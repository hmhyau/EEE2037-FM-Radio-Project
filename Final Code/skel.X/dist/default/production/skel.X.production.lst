

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Sat Apr  1 21:28:39 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F6490
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=2
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text16,global,reloc=2,class=CODE,delta=1
    26                           	psect	text17,global,reloc=2,class=CODE,delta=1
    27                           	psect	text18,global,reloc=2,class=CODE,delta=1
    28                           	psect	text19,global,reloc=2,class=CODE,delta=1
    29                           	psect	text20,global,reloc=2,class=CODE,delta=1
    30                           	psect	text21,global,reloc=2,class=CODE,delta=1
    31                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    35                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    36  0000                     
    37                           ; Version 1.41
    38                           ; Generated 25/01/2017 GMT
    39                           ; 
    40                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    41                           ; All rights reserved.
    42                           ; 
    43                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    44                           ; 
    45                           ; Redistribution and use in source and binary forms, with or without modification, are
    46                           ; permitted provided that the following conditions are met:
    47                           ; 
    48                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    49                           ;        conditions and the following disclaimer.
    50                           ; 
    51                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    52                           ;        of conditions and the following disclaimer in the documentation and/or other
    53                           ;        materials provided with the distribution.
    54                           ; 
    55                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    56                           ;        software without specific prior written permission.
    57                           ; 
    58                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    59                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    60                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    61                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    62                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    63                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    64                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    65                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    66                           ; 
    67                           ; 
    68                           ; Code-generator required, PIC18F6490 Definitions
    69                           ; 
    70                           ; SFR Addresses
    71  0000                     
    72                           	psect	smallconst
    73  000300                     __psmallconst:
    74                           	opt stack 0
    75  000300  00                 	db	0
    76  000301                     _Vol_data:
    77                           	opt stack 0
    78  000301  000F               	dw	15
    79  000303  000F               	dw	15
    80  000305  000F               	dw	15
    81  000307  000F               	dw	15
    82  000309  000B               	dw	11
    83  00030B  000B               	dw	11
    84  00030D  000B               	dw	11
    85  00030F  000A               	dw	10
    86  000311  0009               	dw	9
    87  000313  0008               	dw	8
    88  000315  0007               	dw	7
    89  000317  0006               	dw	6
    90  000319  0006               	dw	6
    91  00031B  0006               	dw	6
    92  00031D  0003               	dw	3
    93  00031F  0003               	dw	3
    94  000321  0002               	dw	2
    95  000323  0001               	dw	1
    96  000325  0000               	dw	0
    97  000327  0000               	dw	0
    98  000329  000C               	dw	12
    99  00032B  000D               	dw	13
   100  00032D  000F               	dw	15
   101  00032F  000C               	dw	12
   102  000331  000D               	dw	13
   103  000333  000F               	dw	15
   104  000335  000F               	dw	15
   105  000337  000F               	dw	15
   106  000339  000F               	dw	15
   107  00033B  000F               	dw	15
   108  00033D  000D               	dw	13
   109  00033F  000E               	dw	14
   110  000341  000F               	dw	15
   111  000343  000E               	dw	14
   112  000345  000F               	dw	15
   113  000347  000F               	dw	15
   114  000349  000F               	dw	15
   115  00034B  000F               	dw	15
   116  00034D                     __end_of_Vol_data:
   117                           	opt stack 0
   118  00034D                     _regDflt:
   119                           	opt stack 0
   120  00034D  FFFF               	dw	65535
   121  00034F  5B15               	dw	23317
   122  000351  D0B9               	dw	53433
   123  000353  A010               	dw	40976
   124  000355  0780               	dw	1920
   125  000357  28AB               	dw	10411
   126  000359  6400               	dw	25600
   127  00035B  1EE7               	dw	7911
   128  00035D  7141               	dw	28993
   129  00035F  007D               	dw	125
   130  000361  82C6               	dw	33478
   131  000363  4F55               	dw	20309
   132  000365  970C               	dw	38668
   133  000367  B845               	dw	47173
   134  000369  FC2D               	dw	64557
   135  00036B  8097               	dw	32919
   136  00036D  04A1               	dw	1185
   137  00036F  DF6A               	dw	57194
   138  000371                     __end_of_regDflt:
   139                           	opt stack 0
   140  000371                     _LCDDigits:
   141                           	opt stack 0
   142  000371  3F                 	db	63
   143  000372  06                 	db	6
   144  000373  5B                 	db	91
   145  000374  4F                 	db	79
   146  000375  66                 	db	102
   147  000376  6D                 	db	109
   148  000377  7D                 	db	125
   149  000378  07                 	db	7
   150  000379  7F                 	db	127
   151  00037A  6F                 	db	111
   152  00037B                     __end_of_LCDDigits:
   153                           	opt stack 0
   154  00037B                     _presetFreq:
   155                           	opt stack 0
   156  00037B  0370               	dw	880
   157  00037D  03C4               	dw	964
   158  00037F  03D1               	dw	977
   159  000381  0416               	dw	1046
   160  000383                     __end_of_presetFreq:
   161                           	opt stack 0
   162  0000                     _LCDPS	set	3928
   163  0000                     _LCDCON	set	3929
   164  0000                     _LCDSE3	set	3933
   165  0000                     _LCDSE2	set	3932
   166  0000                     _LCDSE1	set	3931
   167  0000                     _LCDSE0	set	3930
   168  0000                     _PIR1bits	set	3998
   169  0000                     _SSPCON1bits	set	4038
   170  0000                     _SSPBUF	set	4041
   171  0000                     _TRISCbits	set	3988
   172  0000                     _SSPCON1	set	4038
   173  0000                     _SSPSTAT	set	4039
   174  0000                     _SSPSTATbits	set	4039
   175  0000                     _SSPCON2	set	4037
   176  0000                     _LCDDATA2	set	3938
   177  0000                     _LCDDATA1	set	3937
   178  0000                     _SSPCON2bits	set	4037
   179  0000                     _SSPADD	set	4040
   180  0000                     _T0CONbits	set	4053
   181  0000                     _TMR0L	set	4054
   182  0000                     _TMR0H	set	4055
   183  0000                     _T0CON	set	4053
   184  0000                     _INTCONbits	set	4082
   185  0000                     _PORTC	set	3970
   186  0000                     _PORTB	set	3969
   187  0000                     _PORTA	set	3968
   188  0000                     _TRISG	set	3992
   189  0000                     _TRISC	set	3988
   190  0000                     _TRISB	set	3987
   191  0000                     _TRISA	set	3986
   192  0000                     _ADCON1	set	4033
   193  0000                     _OSCCON	set	4051
   194  0000                     _PORTGbits	set	3974
   195  0000                     _PORTBbits	set	3969
   196  0000                     _PORTAbits	set	3968
   197  0000                     _LCDDATA0	set	3936
   198                           
   199                           ; #config settings
   200  000383  00                 	db	0	; dummy byte at the end
   201  0000                     
   202                           	psect	cinit
   203  001438                     __pcinit:
   204                           	opt stack 0
   205  001438                     start_initialization:
   206                           	opt stack 0
   207  001438                     __initialization:
   208                           	opt stack 0
   209                           
   210                           ; Clear objects allocated to COMRAM (36 bytes)
   211  001438  EE00  F030         	lfsr	0,__pbssCOMRAM
   212  00143C  0E24               	movlw	36
   213  00143E                     clear_0:
   214  00143E  6AEE               	clrf	postinc0,c
   215  001440  06E8               	decf	wreg,f,c
   216  001442  E1FD               	bnz	clear_0
   217  001444                     end_of_initialization:
   218                           	opt stack 0
   219  001444                     __end_of__initialization:
   220                           	opt stack 0
   221  001444  0E00               	movlw	low (__Lmediumconst shr (0+16))
   222  001446  6EF8               	movwf	tblptru,c
   223  001448  0100               	movlb	0
   224  00144A  EF80  F004         	goto	_main	;jump to C main() function
   225                           tblptru	equ	0xFF8
   226                           postinc0	equ	0xFEE
   227                           wreg	equ	0xFE8
   228                           
   229                           	psect	bssCOMRAM
   230  000030                     __pbssCOMRAM:
   231                           	opt stack 0
   232  000030                     _regImg:
   233                           	opt stack 0
   234  000030                     	ds	36
   235                           tblptru	equ	0xFF8
   236                           postinc0	equ	0xFEE
   237                           wreg	equ	0xFE8
   238                           
   239                           	psect	cstackCOMRAM
   240  000001                     __pcstackCOMRAM:
   241                           	opt stack 0
   242  000001                     ??_IdleI2C:
   243  000001                     ??_butnEvent:
   244  000001                     ?___lwdiv:
   245                           	opt stack 0
   246  000001                     segWrt@state:
   247                           	opt stack 0
   248  000001                     OpenI2C@slew:
   249                           	opt stack 0
   250  000001                     dly@d:
   251                           	opt stack 0
   252  000001                     clrscn@CLEARptr:
   253                           	opt stack 0
   254  000001                     ___lwdiv@dividend:
   255                           	opt stack 0
   256                           
   257                           ; 2 bytes @ 0x0
   258  000001                     	ds	1
   259  000002                     ??_segWrt:
   260  000002                     OpenI2C@sync_mode:
   261                           	opt stack 0
   262  000002                     WriteI2C@data_out:
   263                           	opt stack 0
   264                           
   265                           ; 1 bytes @ 0x1
   266  000002                     	ds	1
   267  000003                     ??_FMwrite:
   268  000003                     dly@i:
   269                           	opt stack 0
   270  000003                     clrscn@i:
   271                           	opt stack 0
   272  000003                     FMread@data:
   273                           	opt stack 0
   274  000003                     ___lwdiv@divisor:
   275                           	opt stack 0
   276                           
   277                           ; 2 bytes @ 0x2
   278  000003                     	ds	1
   279  000004                     segWrt@LCReg:
   280                           	opt stack 0
   281                           
   282                           ; 2 bytes @ 0x3
   283  000004                     	ds	1
   284  000005                     ??_FMread:
   285  000005                     FMwrite@firstByt:
   286                           	opt stack 0
   287  000005                     ___lwdiv@quotient:
   288                           	opt stack 0
   289                           
   290                           ; 2 bytes @ 0x4
   291  000005                     	ds	1
   292  000006                     segWrt@bitSelect:
   293                           	opt stack 0
   294  000006                     FMwrite@secndByt:
   295                           	opt stack 0
   296                           
   297                           ; 1 bytes @ 0x5
   298  000006                     	ds	1
   299  000007                     segWrt@segOrd:
   300                           	opt stack 0
   301  000007                     FMwrite@adr:
   302                           	opt stack 0
   303  000007                     ___lwdiv@counter:
   304                           	opt stack 0
   305                           
   306                           ; 1 bytes @ 0x6
   307  000007                     	ds	1
   308  000008                     ?___lwmod:
   309                           	opt stack 0
   310  000008                     ___lwmod@dividend:
   311                           	opt stack 0
   312                           
   313                           ; 2 bytes @ 0x7
   314  000008                     	ds	1
   315  000009                     FMread@regAddr:
   316                           	opt stack 0
   317                           
   318                           ; 1 bytes @ 0x8
   319  000009                     	ds	1
   320  00000A                     FMread@firstByt:
   321                           	opt stack 0
   322  00000A                     ___lwmod@divisor:
   323                           	opt stack 0
   324                           
   325                           ; 2 bytes @ 0x9
   326  00000A                     	ds	1
   327  00000B                     FMread@secndByt:
   328                           	opt stack 0
   329                           
   330                           ; 1 bytes @ 0xA
   331  00000B                     	ds	1
   332  00000C                     ___lwmod@counter:
   333                           	opt stack 0
   334  00000C                     FMready@rdy:
   335                           	opt stack 0
   336  00000C                     FMvers@vsn:
   337                           	opt stack 0
   338                           
   339                           ; 2 bytes @ 0xB
   340  00000C                     	ds	1
   341  00000D                     showFreq@f:
   342                           	opt stack 0
   343  00000D                     showVol@vol:
   344                           	opt stack 0
   345                           
   346                           ; 2 bytes @ 0xC
   347  00000D                     	ds	1
   348  00000E                     ??_FMready:
   349  00000E                     
   350                           ; 1 bytes @ 0xD
   351  00000E                     	ds	1
   352  00000F                     ??_showFreq:
   353  00000F                     ??_showVol:
   354                           
   355                           ; 1 bytes @ 0xE
   356  00000F                     	ds	1
   357  000010                     FMready@sts:
   358                           	opt stack 0
   359                           
   360                           ; 2 bytes @ 0xF
   361  000010                     	ds	2
   362  000012                     FMinit@dat:
   363                           	opt stack 0
   364  000012                     FMfrequenc@f:
   365                           	opt stack 0
   366  000012                     showFreq@ones:
   367                           	opt stack 0
   368  000012                     showVol@ones:
   369                           	opt stack 0
   370                           
   371                           ; 2 bytes @ 0x11
   372  000012                     	ds	2
   373  000014                     ??_FMfrequenc:
   374  000014                     FMinit@ad:
   375                           	opt stack 0
   376  000014                     showFreq@tens:
   377                           	opt stack 0
   378  000014                     showVol@tens:
   379                           	opt stack 0
   380                           
   381                           ; 2 bytes @ 0x13
   382  000014                     	ds	2
   383  000016                     showFreq@hundreds:
   384                           	opt stack 0
   385  000016                     showVol@i:
   386                           	opt stack 0
   387                           
   388                           ; 2 bytes @ 0x15
   389  000016                     	ds	2
   390  000018                     FMfrequenc@cn:
   391                           	opt stack 0
   392  000018                     showFreq@i:
   393                           	opt stack 0
   394  000018                     showVol@j:
   395                           	opt stack 0
   396                           
   397                           ; 2 bytes @ 0x17
   398  000018                     	ds	2
   399  00001A                     ?_Vol_change:
   400                           	opt stack 0
   401  00001A                     FMfrequenc@dat:
   402                           	opt stack 0
   403  00001A                     showFreq@j:
   404                           	opt stack 0
   405  00001A                     Vol_change@vol:
   406                           	opt stack 0
   407                           
   408                           ; 2 bytes @ 0x19
   409  00001A                     	ds	2
   410  00001C                     ?_SeekChannel:
   411                           	opt stack 0
   412  00001C                     ?_ManualChan:
   413                           	opt stack 0
   414  00001C                     ?_presetFrequency:
   415                           	opt stack 0
   416  00001C                     Vol_change@dir:
   417                           	opt stack 0
   418  00001C                     SeekChannel@channel:
   419                           	opt stack 0
   420  00001C                     ManualChan@channel:
   421                           	opt stack 0
   422  00001C                     presetFrequency@channel:
   423                           	opt stack 0
   424                           
   425                           ; 2 bytes @ 0x1B
   426  00001C                     	ds	1
   427  00001D                     ??_Vol_change:
   428                           
   429                           ; 1 bytes @ 0x1C
   430  00001D                     	ds	1
   431  00001E                     ManualChan@dir:
   432                           	opt stack 0
   433  00001E                     SeekChannel@dir:
   434                           	opt stack 0
   435  00001E                     presetFrequency@dir:
   436                           	opt stack 0
   437                           
   438                           ; 2 bytes @ 0x1D
   439  00001E                     	ds	1
   440  00001F                     
   441                           ; 1 bytes @ 0x1E
   442  00001F                     	ds	1
   443  000020                     ??_SeekChannel:
   444  000020                     ??_presetFrequency:
   445                           
   446                           ; 1 bytes @ 0x1F
   447  000020                     	ds	2
   448  000022                     presetFrequency@counter:
   449                           	opt stack 0
   450                           
   451                           ; 2 bytes @ 0x21
   452  000022                     	ds	1
   453  000023                     SeekChannel@dat:
   454                           	opt stack 0
   455                           
   456                           ; 2 bytes @ 0x22
   457  000023                     	ds	2
   458  000025                     SeekChannel@newchannel:
   459                           	opt stack 0
   460                           
   461                           ; 2 bytes @ 0x24
   462  000025                     	ds	2
   463  000027                     main@counter:
   464                           	opt stack 0
   465                           
   466                           ; 2 bytes @ 0x26
   467  000027                     	ds	2
   468  000029                     main@evt:
   469                           	opt stack 0
   470                           
   471                           ; 1 bytes @ 0x28
   472  000029                     	ds	1
   473  00002A                     main@vol:
   474                           	opt stack 0
   475                           
   476                           ; 2 bytes @ 0x29
   477  00002A                     	ds	2
   478  00002C                     main@ui:
   479                           	opt stack 0
   480                           
   481                           ; 2 bytes @ 0x2B
   482  00002C                     	ds	2
   483  00002E                     main@frequency:
   484                           	opt stack 0
   485                           
   486                           ; 2 bytes @ 0x2D
   487  00002E                     	ds	2
   488                           tblptru	equ	0xFF8
   489                           postinc0	equ	0xFEE
   490                           wreg	equ	0xFE8
   491                           
   492 ;;
   493 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   494 ;;
   495 ;; *************** function _main *****************
   496 ;; Defined at:
   497 ;;		line 756 in file "main.c"
   498 ;; Parameters:    Size  Location     Type
   499 ;;		None
   500 ;; Auto vars:     Size  Location     Type
   501 ;;  frequency       2   45[COMRAM] unsigned int 
   502 ;;  ui              2   43[COMRAM] unsigned int 
   503 ;;  vol             2   41[COMRAM] unsigned int 
   504 ;;  counter         2   38[COMRAM] int 
   505 ;;  i               2    0        int 
   506 ;;  evt             1   40[COMRAM] unsigned char 
   507 ;; Return value:  Size  Location     Type
   508 ;;                  1    wreg      void 
   509 ;; Registers used:
   510 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   511 ;; Tracked objects:
   512 ;;		On entry : 0/0
   513 ;;		On exit  : 0/0
   514 ;;		Unchanged: 0/0
   515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   516 ;;      Params:         0       0       0       0
   517 ;;      Locals:         9       0       0       0
   518 ;;      Temps:          0       0       0       0
   519 ;;      Totals:         9       0       0       0
   520 ;;Total ram usage:        9 bytes
   521 ;; Hardware stack levels required when called:    6
   522 ;; This function calls:
   523 ;;		_FMfrequenc
   524 ;;		_FMinit
   525 ;;		_FMvers
   526 ;;		_Init
   527 ;;		_ManualChan
   528 ;;		_SeekChannel
   529 ;;		_Vol_change
   530 ;;		_butnEvent
   531 ;;		_dly
   532 ;;		_errfm
   533 ;;		_presetFrequency
   534 ;;		_showFreq
   535 ;; This function is called by:
   536 ;;		Startup code after reset
   537 ;; This function uses a non-reentrant model
   538 ;;
   539                           
   540                           	psect	text0
   541  000900                     __ptext0:
   542                           	opt stack 0
   543  000900                     _main:
   544                           	opt stack 25
   545                           
   546                           ;main.c: 758: unsigned char evt = 10;
   547                           
   548                           ;incstack = 0
   549  000900  0E0A               	movlw	10
   550  000902  6E29               	movwf	main@evt,c
   551                           
   552                           ;main.c: 759: unsigned int ui;
   553                           ;main.c: 760: unsigned int vol = 18;
   554  000904  0E00               	movlw	0
   555  000906  6E2B               	movwf	main@vol+1,c
   556  000908  0E12               	movlw	18
   557  00090A  6E2A               	movwf	main@vol,c
   558                           
   559                           ;main.c: 761: unsigned int frequency = 964;
   560  00090C  0E03               	movlw	3
   561  00090E  6E2F               	movwf	main@frequency+1,c
   562  000910  0EC4               	movlw	196
   563  000912  6E2E               	movwf	main@frequency,c
   564                           
   565                           ;main.c: 762: int i, counter = 0;
   566  000914  0E00               	movlw	0
   567  000916  6E28               	movwf	main@counter+1,c
   568  000918  0E00               	movlw	0
   569  00091A  6E27               	movwf	main@counter,c
   570                           
   571                           ;main.c: 763: dly(20);
   572  00091C  0E00               	movlw	0
   573  00091E  6E02               	movwf	dly@d+1,c
   574  000920  0E14               	movlw	20
   575  000922  6E01               	movwf	dly@d,c
   576  000924  ECD6  F009         	call	_dly	;wreg free
   577                           
   578                           ;main.c: 764: Init();
   579  000928  ECE9  F008         	call	_Init	;wreg free
   580                           
   581                           ;main.c: 765: FMvers(&ui);
   582  00092C  0E2C               	movlw	low main@ui
   583  00092E  6E0C               	movwf	FMvers@vsn,c
   584  000930  0E00               	movlw	high main@ui
   585  000932  6E0D               	movwf	FMvers@vsn+1,c
   586  000934  EC30  F00A         	call	_FMvers	;wreg free
   587                           
   588                           ;main.c: 766: if (ui != 0x1010) errfm();
   589  000938  0E10               	movlw	16
   590  00093A  182C               	xorwf	main@ui,w,c
   591  00093C  E103               	bnz	u2250
   592  00093E  0E10               	movlw	16
   593  000940  182D               	xorwf	main@ui+1,w,c
   594  000942  A4D8               	btfss	status,2,c
   595  000944                     u2250:
   596  000944  ECEF  F009         	call	_errfm	;wreg free
   597                           
   598                           ;main.c: 767: if (FMinit() != 0) errfm();
   599  000948  ECA7  F007         	call	_FMinit	;wreg free
   600  00094C  0900               	iorlw	0
   601  00094E  A4D8               	btfss	status,2,c
   602  000950  ECEF  F009         	call	_errfm	;wreg free
   603                           
   604                           ;main.c: 770: showFreq(frequency);
   605  000954  C02E  F00D         	movff	main@frequency,showFreq@f
   606  000958  C02F  F00E         	movff	main@frequency+1,showFreq@f+1
   607  00095C  ECC2  F001         	call	_showFreq	;wreg free
   608                           
   609                           ;main.c: 771: FMfrequenc(frequency);
   610  000960  C02E  F012         	movff	main@frequency,FMfrequenc@f
   611  000964  C02F  F013         	movff	main@frequency+1,FMfrequenc@f+1
   612  000968  EC49  F008         	call	_FMfrequenc	;wreg free
   613  00096C                     l2439:
   614                           
   615                           ;main.c: 774: evt = butnEvent();
   616  00096C  ECB0  F006         	call	_butnEvent	;wreg free
   617  000970  6E29               	movwf	main@evt,c
   618                           
   619                           ;main.c: 775: switch (evt) {
   620  000972  D07C               	goto	l2467
   621  000974                     l2441:
   622  000974  C02E  F01C         	movff	main@frequency,SeekChannel@channel
   623  000978  C02F  F01D         	movff	main@frequency+1,SeekChannel@channel+1
   624  00097C  0E00               	movlw	0
   625  00097E  6E1F               	movwf	SeekChannel@dir+1,c
   626  000980  0E01               	movlw	1
   627  000982  6E1E               	movwf	SeekChannel@dir,c
   628  000984  EC50  F005         	call	_SeekChannel	;wreg free
   629  000988  D00A               	goto	L1
   630  00098A                     l2443:
   631  00098A  C02E  F01C         	movff	main@frequency,SeekChannel@channel
   632  00098E  C02F  F01D         	movff	main@frequency+1,SeekChannel@channel+1
   633  000992  0E00               	movlw	0
   634  000994  6E1F               	movwf	SeekChannel@dir+1,c
   635  000996  0E00               	movlw	0
   636  000998  6E1E               	movwf	SeekChannel@dir,c
   637  00099A  EC50  F005         	call	_SeekChannel	;wreg free
   638  00099E                     L1:
   639  00099E  C01C  F02E         	movff	?_SeekChannel,main@frequency
   640  0009A2  C01D  F02F         	movff	?_SeekChannel+1,main@frequency+1
   641  0009A6  D7E2               	goto	l2439
   642  0009A8                     l2445:
   643  0009A8  C02E  F01C         	movff	main@frequency,ManualChan@channel
   644  0009AC  C02F  F01D         	movff	main@frequency+1,ManualChan@channel+1
   645  0009B0  0E01               	movlw	1
   646  0009B2  6E1E               	movwf	ManualChan@dir,c
   647  0009B4  EC82  F008         	call	_ManualChan	;wreg free
   648  0009B8  D008               	goto	L2
   649  0009BA                     l2447:
   650  0009BA  C02E  F01C         	movff	main@frequency,ManualChan@channel
   651  0009BE  C02F  F01D         	movff	main@frequency+1,ManualChan@channel+1
   652  0009C2  0E00               	movlw	0
   653  0009C4  6E1E               	movwf	ManualChan@dir,c
   654  0009C6  EC82  F008         	call	_ManualChan	;wreg free
   655  0009CA                     L2:
   656  0009CA  C01C  F02E         	movff	?_ManualChan,main@frequency
   657  0009CE  C01D  F02F         	movff	?_ManualChan+1,main@frequency+1
   658  0009D2  D7CC               	goto	l2439
   659  0009D4                     l2449:
   660  0009D4  C02A  F01A         	movff	main@vol,Vol_change@vol
   661  0009D8  C02B  F01B         	movff	main@vol+1,Vol_change@vol+1
   662  0009DC  0E01               	movlw	1
   663  0009DE  6E1C               	movwf	Vol_change@dir,c
   664  0009E0  ECC5  F002         	call	_Vol_change	;wreg free
   665  0009E4  C01A  F02A         	movff	?_Vol_change,main@vol
   666  0009E8  C01B  F02B         	movff	?_Vol_change+1,main@vol+1
   667  0009EC  0E03               	movlw	3
   668  0009EE  6E02               	movwf	dly@d+1,c
   669  0009F0  0EE8               	movlw	232
   670  0009F2  6E01               	movwf	dly@d,c
   671  0009F4  ECD6  F009         	call	_dly	;wreg free
   672  0009F8  C02E  F00D         	movff	main@frequency,showFreq@f
   673  0009FC  C02F  F00E         	movff	main@frequency+1,showFreq@f+1
   674  000A00  ECC2  F001         	call	_showFreq	;wreg free
   675  000A04  D7B3               	goto	l2439
   676  000A06                     l2455:
   677  000A06  C02A  F01A         	movff	main@vol,Vol_change@vol
   678  000A0A  C02B  F01B         	movff	main@vol+1,Vol_change@vol+1
   679  000A0E  0E00               	movlw	0
   680  000A10  6E1C               	movwf	Vol_change@dir,c
   681  000A12  ECC5  F002         	call	_Vol_change	;wreg free
   682  000A16  C01A  F02A         	movff	?_Vol_change,main@vol
   683  000A1A  C01B  F02B         	movff	?_Vol_change+1,main@vol+1
   684  000A1E  0E03               	movlw	3
   685  000A20  6E02               	movwf	dly@d+1,c
   686  000A22  0EE8               	movlw	232
   687  000A24  6E01               	movwf	dly@d,c
   688  000A26  ECD6  F009         	call	_dly	;wreg free
   689  000A2A  C02E  F00D         	movff	main@frequency,showFreq@f
   690  000A2E  C02F  F00E         	movff	main@frequency+1,showFreq@f+1
   691  000A32  ECC2  F001         	call	_showFreq	;wreg free
   692  000A36  D79A               	goto	l2439
   693  000A38                     l2461:
   694  000A38  C02E  F01C         	movff	main@frequency,presetFrequency@channel
   695  000A3C  C02F  F01D         	movff	main@frequency+1,presetFrequency@channel+1
   696  000A40  0E00               	movlw	0
   697  000A42  6E1F               	movwf	presetFrequency@dir+1,c
   698  000A44  0E01               	movlw	1
   699  000A46  6E1E               	movwf	presetFrequency@dir,c
   700  000A48  ECAC  F003         	call	_presetFrequency	;wreg free
   701  000A4C  D00A               	goto	L3
   702  000A4E                     l2463:
   703  000A4E  C02E  F01C         	movff	main@frequency,presetFrequency@channel
   704  000A52  C02F  F01D         	movff	main@frequency+1,presetFrequency@channel+1
   705  000A56  0E00               	movlw	0
   706  000A58  6E1F               	movwf	presetFrequency@dir+1,c
   707  000A5A  0E00               	movlw	0
   708  000A5C  6E1E               	movwf	presetFrequency@dir,c
   709  000A5E  ECAC  F003         	call	_presetFrequency	;wreg free
   710  000A62                     L3:
   711  000A62  C01C  F02E         	movff	?_presetFrequency,main@frequency
   712  000A66  C01D  F02F         	movff	?_presetFrequency+1,main@frequency+1
   713                           
   714                           ;main.c: 785: }
   715                           
   716                           ;main.c: 784: default: break;
   717  000A6A  D780               	goto	l2439
   718  000A6C                     l2467:
   719  000A6C  5029               	movf	main@evt,w,c
   720                           
   721                           ; Switch size 1, requested type "space"
   722                           ; Number of cases is 8, Range of values is 1 to 8
   723                           ; switch strategies available:
   724                           ; Name         Instructions Cycles
   725                           ; simple_byte           25    13 (average)
   726                           ;	Chosen strategy is simple_byte
   727  000A6E  0A01               	xorlw	1	; case 1
   728  000A70  B4D8               	btfsc	status,2,c
   729  000A72  D780               	goto	l2441
   730  000A74  0A03               	xorlw	3	; case 2
   731  000A76  B4D8               	btfsc	status,2,c
   732  000A78  D788               	goto	l2443
   733  000A7A  0A01               	xorlw	1	; case 3
   734  000A7C  B4D8               	btfsc	status,2,c
   735  000A7E  D794               	goto	l2445
   736  000A80  0A07               	xorlw	7	; case 4
   737  000A82  B4D8               	btfsc	status,2,c
   738  000A84  D79A               	goto	l2447
   739  000A86  0A01               	xorlw	1	; case 5
   740  000A88  B4D8               	btfsc	status,2,c
   741  000A8A  D7A4               	goto	l2449
   742  000A8C  0A03               	xorlw	3	; case 6
   743  000A8E  B4D8               	btfsc	status,2,c
   744  000A90  D7BA               	goto	l2455
   745  000A92  0A01               	xorlw	1	; case 7
   746  000A94  B4D8               	btfsc	status,2,c
   747  000A96  D7D0               	goto	l2461
   748  000A98  0A0F               	xorlw	15	; case 8
   749  000A9A  B4D8               	btfsc	status,2,c
   750  000A9C  D7D8               	goto	l2463
   751                           
   752                           ;main.c: 786: }
   753  000A9E  D766               	goto	l2439
   754  000AA0                     __end_of_main:
   755                           	opt stack 0
   756                           tblptru	equ	0xFF8
   757                           postinc0	equ	0xFEE
   758                           wreg	equ	0xFE8
   759                           status	equ	0xFD8
   760                           
   761 ;; *************** function _presetFrequency *****************
   762 ;; Defined at:
   763 ;;		line 656 in file "main.c"
   764 ;; Parameters:    Size  Location     Type
   765 ;;  channel         2   27[COMRAM] unsigned int 
   766 ;;  dir             2   29[COMRAM] unsigned int 
   767 ;; Auto vars:     Size  Location     Type
   768 ;;  counter         2   33[COMRAM] int 
   769 ;; Return value:  Size  Location     Type
   770 ;;                  2   27[COMRAM] unsigned int 
   771 ;; Registers used:
   772 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   773 ;; Tracked objects:
   774 ;;		On entry : 0/0
   775 ;;		On exit  : 0/0
   776 ;;		Unchanged: 0/0
   777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   778 ;;      Params:         4       0       0       0
   779 ;;      Locals:         2       0       0       0
   780 ;;      Temps:          2       0       0       0
   781 ;;      Totals:         8       0       0       0
   782 ;;Total ram usage:        8 bytes
   783 ;; Hardware stack levels used:    1
   784 ;; Hardware stack levels required when called:    5
   785 ;; This function calls:
   786 ;;		_FMfrequenc
   787 ;;		_showFreq
   788 ;; This function is called by:
   789 ;;		_main
   790 ;; This function uses a non-reentrant model
   791 ;;
   792                           
   793                           	psect	text1
   794  000758                     __ptext1:
   795                           	opt stack 0
   796  000758                     _presetFrequency:
   797                           	opt stack 25
   798                           
   799                           ;main.c: 657: int counter;
   800                           ;main.c: 659: switch(dir){
   801                           
   802                           ;incstack = 0
   803  000758  D0BF               	goto	l2345
   804  00075A                     l2299:
   805                           
   806                           ;main.c: 661: for(counter = 0; counter <= 3; counter++){
   807  00075A  0E00               	movlw	0
   808  00075C  6E23               	movwf	presetFrequency@counter+1,c
   809  00075E  0E00               	movlw	0
   810  000760  6E22               	movwf	presetFrequency@counter,c
   811  000762  BE23               	btfsc	presetFrequency@counter+1,7,c
   812  000764  D008               	goto	l2305
   813  000766  5023               	movf	presetFrequency@counter+1,w,c
   814  000768  E105               	bnz	u2070
   815  00076A  0E04               	movlw	4
   816  00076C  5C22               	subwf	presetFrequency@counter,w,c
   817  00076E  B0D8               	btfsc	status,0,c
   818  000770  D0C2               	goto	l240
   819  000772  D001               	goto	l2305
   820  000774                     u2070:
   821  000774  D0C0               	goto	l240
   822  000776                     l2305:
   823                           
   824                           ;main.c: 662: if(channel<presetFreq[counter] || channel == presetFreq[3]){
   825  000776  90D8               	bcf	status,0,c
   826  000778  3422               	rlcf	presetFrequency@counter,w,c
   827  00077A  6EF6               	movwf	tblptrl,c
   828  00077C  3423               	rlcf	presetFrequency@counter+1,w,c
   829  00077E  6EF7               	movwf	tblptrh,c
   830  000780  0E7B               	movlw	low _presetFreq
   831  000782  26F6               	addwf	tblptrl,f,c
   832  000784  0E03               	movlw	high _presetFreq
   833  000786  22F7               	addwfc	tblptrh,f,c
   834  000788                     	if	0	;There are less than 3 active tblptr bytes
   835  000788                     	endif
   836  000788  0009               	tblrd		*+
   837  00078A  50F5               	movf	tablat,w,c
   838  00078C  5C1C               	subwf	presetFrequency@channel,w,c
   839  00078E  0009               	tblrd		*+
   840  000790  50F5               	movf	tablat,w,c
   841  000792  581D               	subwfb	presetFrequency@channel+1,w,c
   842  000794  A0D8               	btfss	status,0,c
   843  000796  D00D               	goto	l2309
   844  000798  0E81               	movlw	low (_presetFreq+6)
   845  00079A  6EF6               	movwf	tblptrl,c
   846  00079C  0E03               	movlw	high (_presetFreq+6)
   847  00079E  6EF7               	movwf	tblptrh,c
   848  0007A0                     	if	0	;tblptru may be non-zero
   849  0007A0                     	endif
   850  0007A0                     	if	0	;tblptru may be non-zero
   851  0007A0                     	endif
   852  0007A0  501C               	movf	presetFrequency@channel,w,c
   853  0007A2  0009               	tblrd		*+
   854  0007A4  18F5               	xorwf	tablat,w,c
   855  0007A6  E137               	bnz	l2317
   856  0007A8  501D               	movf	presetFrequency@channel+1,w,c
   857  0007AA  0009               	tblrd		*+
   858  0007AC  18F5               	xorwf	tablat,w,c
   859  0007AE  A4D8               	btfss	status,2,c
   860  0007B0  D032               	goto	l2317
   861  0007B2                     l2309:
   862                           
   863                           ;main.c: 663: FMfrequenc(presetFreq[counter]);
   864  0007B2  90D8               	bcf	status,0,c
   865  0007B4  3422               	rlcf	presetFrequency@counter,w,c
   866  0007B6  6EF6               	movwf	tblptrl,c
   867  0007B8  3423               	rlcf	presetFrequency@counter+1,w,c
   868  0007BA  6EF7               	movwf	tblptrh,c
   869  0007BC  0E7B               	movlw	low _presetFreq
   870  0007BE  26F6               	addwf	tblptrl,f,c
   871  0007C0  0E03               	movlw	high _presetFreq
   872  0007C2  22F7               	addwfc	tblptrh,f,c
   873  0007C4                     	if	0	;There are less than 3 active tblptr bytes
   874  0007C4                     	endif
   875  0007C4  0009               	tblrd		*+
   876  0007C6  CFF5 F012          	movff	tablat,FMfrequenc@f
   877  0007CA  000A               	tblrd		*-
   878  0007CC  CFF5 F013          	movff	tablat,FMfrequenc@f+1
   879  0007D0  EC49  F008         	call	_FMfrequenc	;wreg free
   880                           
   881                           ;main.c: 664: showFreq(presetFreq[counter]);
   882  0007D4  90D8               	bcf	status,0,c
   883  0007D6  3422               	rlcf	presetFrequency@counter,w,c
   884  0007D8  6EF6               	movwf	tblptrl,c
   885  0007DA  3423               	rlcf	presetFrequency@counter+1,w,c
   886  0007DC  6EF7               	movwf	tblptrh,c
   887  0007DE  0E7B               	movlw	low _presetFreq
   888  0007E0  26F6               	addwf	tblptrl,f,c
   889  0007E2  0E03               	movlw	high _presetFreq
   890  0007E4  22F7               	addwfc	tblptrh,f,c
   891  0007E6                     	if	0	;There are less than 3 active tblptr bytes
   892  0007E6                     	endif
   893  0007E6  0009               	tblrd		*+
   894  0007E8  CFF5 F00D          	movff	tablat,showFreq@f
   895  0007EC  000A               	tblrd		*-
   896  0007EE  CFF5 F00E          	movff	tablat,showFreq@f+1
   897  0007F2  ECC2  F001         	call	_showFreq	;wreg free
   898                           
   899                           ;main.c: 665: return presetFreq[counter];
   900  0007F6  90D8               	bcf	status,0,c
   901  0007F8  3422               	rlcf	presetFrequency@counter,w,c
   902  0007FA  6EF6               	movwf	tblptrl,c
   903  0007FC  3423               	rlcf	presetFrequency@counter+1,w,c
   904  0007FE  6EF7               	movwf	tblptrh,c
   905  000800  0E7B               	movlw	low _presetFreq
   906  000802  26F6               	addwf	tblptrl,f,c
   907  000804  0E03               	movlw	high _presetFreq
   908  000806  22F7               	addwfc	tblptrh,f,c
   909  000808                     	if	0	;There are less than 3 active tblptr bytes
   910  000808                     	endif
   911  000808  0009               	tblrd		*+
   912  00080A  CFF5 F01C          	movff	tablat,?_presetFrequency
   913  00080E  000A               	tblrd		*-
   914  000810  CFF5 F01D          	movff	tablat,?_presetFrequency+1
   915  000814  0012               	return	
   916  000816                     l2317:
   917  000816  4A22               	infsnz	presetFrequency@counter,f,c
   918  000818  2A23               	incf	presetFrequency@counter+1,f,c
   919  00081A  BE23               	btfsc	presetFrequency@counter+1,7,c
   920  00081C  D7AC               	goto	l2305
   921  00081E  5023               	movf	presetFrequency@counter+1,w,c
   922  000820  E16A               	bnz	l240
   923  000822  D7A3               	goto	L4
   924  000824                     l2321:
   925                           
   926                           ;main.c: 671: for(counter = 3; counter >= 0; counter--){
   927  000824  0E00               	movlw	0
   928  000826  6E23               	movwf	presetFrequency@counter+1,c
   929  000828  0E03               	movlw	3
   930  00082A  6E22               	movwf	presetFrequency@counter,c
   931  00082C                     l2323:
   932  00082C  BE23               	btfsc	presetFrequency@counter+1,7,c
   933  00082E  D063               	goto	l240
   934                           
   935                           ;main.c: 672: if(channel>presetFreq[counter] || channel == presetFreq[0]){
   936  000830  90D8               	bcf	status,0,c
   937  000832  3422               	rlcf	presetFrequency@counter,w,c
   938  000834  6EF6               	movwf	tblptrl,c
   939  000836  3423               	rlcf	presetFrequency@counter+1,w,c
   940  000838  6EF7               	movwf	tblptrh,c
   941  00083A  0E7B               	movlw	low _presetFreq
   942  00083C  26F6               	addwf	tblptrl,f,c
   943  00083E  0E03               	movlw	high _presetFreq
   944  000840  22F7               	addwfc	tblptrh,f,c
   945  000842                     	if	0	;There are less than 3 active tblptr bytes
   946  000842                     	endif
   947  000842  501C               	movf	presetFrequency@channel,w,c
   948  000844  0009               	tblrd		*+
   949  000846  5CF5               	subwf	tablat,w,c
   950  000848  501D               	movf	presetFrequency@channel+1,w,c
   951  00084A  0009               	tblrd		*+
   952  00084C  58F5               	subwfb	tablat,w,c
   953  00084E  A0D8               	btfss	status,0,c
   954  000850  D00D               	goto	l2331
   955  000852  0E7B               	movlw	low _presetFreq
   956  000854  6EF6               	movwf	tblptrl,c
   957  000856                     	if	1	;There is more than 1 active tblptr byte
   958  000856  0E03               	movlw	high _presetFreq
   959  000858  6EF7               	movwf	tblptrh,c
   960  00085A                     	endif
   961  00085A                     	if	0	;There are less than 3 active tblptr bytes
   962  00085A                     	endif
   963  00085A  501C               	movf	presetFrequency@channel,w,c
   964  00085C  0009               	tblrd		*+
   965  00085E  18F5               	xorwf	tablat,w,c
   966  000860  E137               	bnz	l2339
   967  000862  501D               	movf	presetFrequency@channel+1,w,c
   968  000864  0009               	tblrd		*+
   969  000866  18F5               	xorwf	tablat,w,c
   970  000868  A4D8               	btfss	status,2,c
   971  00086A  D032               	goto	l2339
   972  00086C                     l2331:
   973                           
   974                           ;main.c: 673: FMfrequenc(presetFreq[counter]);
   975  00086C  90D8               	bcf	status,0,c
   976  00086E  3422               	rlcf	presetFrequency@counter,w,c
   977  000870  6EF6               	movwf	tblptrl,c
   978  000872  3423               	rlcf	presetFrequency@counter+1,w,c
   979  000874  6EF7               	movwf	tblptrh,c
   980  000876  0E7B               	movlw	low _presetFreq
   981  000878  26F6               	addwf	tblptrl,f,c
   982  00087A  0E03               	movlw	high _presetFreq
   983  00087C  22F7               	addwfc	tblptrh,f,c
   984  00087E                     	if	0	;There are less than 3 active tblptr bytes
   985  00087E                     	endif
   986  00087E  0009               	tblrd		*+
   987  000880  CFF5 F012          	movff	tablat,FMfrequenc@f
   988  000884  000A               	tblrd		*-
   989  000886  CFF5 F013          	movff	tablat,FMfrequenc@f+1
   990  00088A  EC49  F008         	call	_FMfrequenc	;wreg free
   991                           
   992                           ;main.c: 674: showFreq(presetFreq[counter]);
   993  00088E  90D8               	bcf	status,0,c
   994  000890  3422               	rlcf	presetFrequency@counter,w,c
   995  000892  6EF6               	movwf	tblptrl,c
   996  000894  3423               	rlcf	presetFrequency@counter+1,w,c
   997  000896  6EF7               	movwf	tblptrh,c
   998  000898  0E7B               	movlw	low _presetFreq
   999  00089A  26F6               	addwf	tblptrl,f,c
  1000  00089C  0E03               	movlw	high _presetFreq
  1001  00089E  22F7               	addwfc	tblptrh,f,c
  1002  0008A0                     	if	0	;There are less than 3 active tblptr bytes
  1003  0008A0                     	endif
  1004  0008A0  0009               	tblrd		*+
  1005  0008A2  CFF5 F00D          	movff	tablat,showFreq@f
  1006  0008A6  000A               	tblrd		*-
  1007  0008A8  CFF5 F00E          	movff	tablat,showFreq@f+1
  1008  0008AC  ECC2  F001         	call	_showFreq	;wreg free
  1009                           
  1010                           ;main.c: 675: return presetFreq[counter];
  1011  0008B0  90D8               	bcf	status,0,c
  1012  0008B2  3422               	rlcf	presetFrequency@counter,w,c
  1013  0008B4  6EF6               	movwf	tblptrl,c
  1014  0008B6  3423               	rlcf	presetFrequency@counter+1,w,c
  1015  0008B8  6EF7               	movwf	tblptrh,c
  1016  0008BA  0E7B               	movlw	low _presetFreq
  1017  0008BC  26F6               	addwf	tblptrl,f,c
  1018  0008BE  0E03               	movlw	high _presetFreq
  1019  0008C0  22F7               	addwfc	tblptrh,f,c
  1020  0008C2                     	if	0	;There are less than 3 active tblptr bytes
  1021  0008C2                     	endif
  1022  0008C2  0009               	tblrd		*+
  1023  0008C4  CFF5 F01C          	movff	tablat,?_presetFrequency
  1024  0008C8  000A               	tblrd		*-
  1025  0008CA  CFF5 F01D          	movff	tablat,?_presetFrequency+1
  1026  0008CE  0012               	return	
  1027  0008D0                     l2339:
  1028  0008D0  0622               	decf	presetFrequency@counter,f,c
  1029  0008D2  A0D8               	btfss	status,0,c
  1030  0008D4  0623               	decf	presetFrequency@counter+1,f,c
  1031  0008D6  D7AA               	goto	l2323
  1032  0008D8                     l2345:
  1033  0008D8  C01E  F020         	movff	presetFrequency@dir,??_presetFrequency
  1034  0008DC  C01F  F021         	movff	presetFrequency@dir+1,??_presetFrequency+1
  1035                           
  1036                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1037                           ; Switch size 1, requested type "space"
  1038                           ; Number of cases is 1, Range of values is 0 to 0
  1039                           ; switch strategies available:
  1040                           ; Name         Instructions Cycles
  1041                           ; simple_byte            4     3 (average)
  1042                           ;	Chosen strategy is simple_byte
  1043  0008E0  5021               	movf	??_presetFrequency+1,w,c
  1044  0008E2  0A00               	xorlw	0	; case 0
  1045  0008E4  A4D8               	btfss	status,2,c
  1046  0008E6  D007               	goto	l240
  1047                           
  1048                           ; Switch size 1, requested type "space"
  1049                           ; Number of cases is 2, Range of values is 0 to 1
  1050                           ; switch strategies available:
  1051                           ; Name         Instructions Cycles
  1052                           ; simple_byte            7     4 (average)
  1053                           ;	Chosen strategy is simple_byte
  1054  0008E8  5020               	movf	??_presetFrequency,w,c
  1055  0008EA  0A00               	xorlw	0	; case 0
  1056  0008EC  B4D8               	btfsc	status,2,c
  1057  0008EE  D79A               	goto	l2321
  1058  0008F0  0A01               	xorlw	1	; case 1
  1059  0008F2  B4D8               	btfsc	status,2,c
  1060  0008F4  D732               	goto	l2299
  1061  0008F6                     l240:
  1062                           
  1063                           ;main.c: 680: return channel;
  1064  0008F6  C01C  F01C         	movff	presetFrequency@channel,?_presetFrequency
  1065  0008FA  C01D  F01D         	movff	presetFrequency@channel+1,?_presetFrequency+1
  1066  0008FE  0012               	return		;funcret
  1067  000900                     __end_of_presetFrequency:
  1068                           	opt stack 0
  1069                           tblptru	equ	0xFF8
  1070                           tblptrh	equ	0xFF7
  1071                           tblptrl	equ	0xFF6
  1072                           tablat	equ	0xFF5
  1073                           postinc0	equ	0xFEE
  1074                           wreg	equ	0xFE8
  1075                           status	equ	0xFD8
  1076                           
  1077 ;; *************** function _butnEvent *****************
  1078 ;; Defined at:
  1079 ;;		line 111 in file "main.c"
  1080 ;; Parameters:    Size  Location     Type
  1081 ;;		None
  1082 ;; Auto vars:     Size  Location     Type
  1083 ;;		None
  1084 ;; Return value:  Size  Location     Type
  1085 ;;                  1    wreg      unsigned char 
  1086 ;; Registers used:
  1087 ;;		wreg
  1088 ;; Tracked objects:
  1089 ;;		On entry : 0/0
  1090 ;;		On exit  : 0/0
  1091 ;;		Unchanged: 0/0
  1092 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1093 ;;      Params:         0       0       0       0
  1094 ;;      Locals:         0       0       0       0
  1095 ;;      Temps:          2       0       0       0
  1096 ;;      Totals:         2       0       0       0
  1097 ;;Total ram usage:        2 bytes
  1098 ;; Hardware stack levels used:    1
  1099 ;; This function calls:
  1100 ;;		Nothing
  1101 ;; This function is called by:
  1102 ;;		_main
  1103 ;; This function uses a non-reentrant model
  1104 ;;
  1105                           
  1106                           	psect	text2
  1107  000D60                     __ptext2:
  1108                           	opt stack 0
  1109  000D60                     _butnEvent:
  1110                           	opt stack 30
  1111                           
  1112                           ;main.c: 112: if (PORTAbits.RA0 == 0){
  1113                           
  1114                           ;incstack = 0
  1115  000D60  B080               	btfsc	3968,0,c	;volatile
  1116  000D62  D010               	goto	l81
  1117                           
  1118                           ;main.c: 113: _delay((unsigned long)((100)*(8000000/4000.0)));
  1119  000D64  0E02               	movlw	2
  1120  000D66  6E02               	movwf	(??_butnEvent+1)& (0+255),c
  1121  000D68  0E04               	movlw	4
  1122  000D6A  6E01               	movwf	??_butnEvent& (0+255),c
  1123  000D6C  0EBA               	movlw	186
  1124  000D6E                     u2277:
  1125  000D6E  2EE8               	decfsz	wreg,f,c
  1126  000D70  D7FE               	bra	u2277
  1127  000D72  2E01               	decfsz	??_butnEvent& (0+255),f,c
  1128  000D74  D7FC               	bra	u2277
  1129  000D76  2E02               	decfsz	(??_butnEvent+1)& (0+255),f,c
  1130  000D78  D7FA               	bra	u2277
  1131  000D7A  D000               	nop2	
  1132                           
  1133                           ;main.c: 114: if(PORTAbits.RA0 == 0)
  1134  000D7C  B080               	btfsc	3968,0,c	;volatile
  1135  000D7E  D002               	goto	l81
  1136                           
  1137                           ;main.c: 115: return 1;
  1138  000D80  0E01               	movlw	1
  1139  000D82  0012               	return	
  1140  000D84                     l81:
  1141                           
  1142                           ;main.c: 116: }
  1143                           ;main.c: 117: if (PORTAbits.RA1 == 0){
  1144  000D84  B280               	btfsc	3968,1,c	;volatile
  1145  000D86  D010               	goto	l84
  1146                           
  1147                           ;main.c: 118: _delay((unsigned long)((100)*(8000000/4000.0)));
  1148  000D88  0E02               	movlw	2
  1149  000D8A  6E02               	movwf	(??_butnEvent+1)& (0+255),c
  1150  000D8C  0E04               	movlw	4
  1151  000D8E  6E01               	movwf	??_butnEvent& (0+255),c
  1152  000D90  0EBA               	movlw	186
  1153  000D92                     u2287:
  1154  000D92  2EE8               	decfsz	wreg,f,c
  1155  000D94  D7FE               	bra	u2287
  1156  000D96  2E01               	decfsz	??_butnEvent& (0+255),f,c
  1157  000D98  D7FC               	bra	u2287
  1158  000D9A  2E02               	decfsz	(??_butnEvent+1)& (0+255),f,c
  1159  000D9C  D7FA               	bra	u2287
  1160  000D9E  D000               	nop2	
  1161                           
  1162                           ;main.c: 119: if (PORTAbits.RA1 == 0)
  1163  000DA0  B280               	btfsc	3968,1,c	;volatile
  1164  000DA2  D002               	goto	l84
  1165                           
  1166                           ;main.c: 120: return 2;
  1167  000DA4  0E02               	movlw	2
  1168  000DA6  0012               	return	
  1169  000DA8                     l84:
  1170                           
  1171                           ;main.c: 121: }
  1172                           ;main.c: 123: if(PORTBbits.RB0 == 0){
  1173  000DA8  B081               	btfsc	3969,0,c	;volatile
  1174  000DAA  D010               	goto	l86
  1175                           
  1176                           ;main.c: 124: _delay((unsigned long)((100)*(8000000/4000.0)));
  1177  000DAC  0E02               	movlw	2
  1178  000DAE  6E02               	movwf	(??_butnEvent+1)& (0+255),c
  1179  000DB0  0E04               	movlw	4
  1180  000DB2  6E01               	movwf	??_butnEvent& (0+255),c
  1181  000DB4  0EBA               	movlw	186
  1182  000DB6                     u2297:
  1183  000DB6  2EE8               	decfsz	wreg,f,c
  1184  000DB8  D7FE               	bra	u2297
  1185  000DBA  2E01               	decfsz	??_butnEvent& (0+255),f,c
  1186  000DBC  D7FC               	bra	u2297
  1187  000DBE  2E02               	decfsz	(??_butnEvent+1)& (0+255),f,c
  1188  000DC0  D7FA               	bra	u2297
  1189  000DC2  D000               	nop2	
  1190                           
  1191                           ;main.c: 125: if(PORTBbits.RB0 == 0)
  1192  000DC4  B081               	btfsc	3969,0,c	;volatile
  1193  000DC6  D002               	goto	l86
  1194                           
  1195                           ;main.c: 126: return 3;
  1196  000DC8  0E03               	movlw	3
  1197  000DCA  0012               	return	
  1198  000DCC                     l86:
  1199                           
  1200                           ;main.c: 127: }
  1201                           ;main.c: 129: if(PORTBbits.RB5 == 0){
  1202  000DCC  BA81               	btfsc	3969,5,c	;volatile
  1203  000DCE  D010               	goto	l88
  1204                           
  1205                           ;main.c: 130: _delay((unsigned long)((100)*(8000000/4000.0)));
  1206  000DD0  0E02               	movlw	2
  1207  000DD2  6E02               	movwf	(??_butnEvent+1)& (0+255),c
  1208  000DD4  0E04               	movlw	4
  1209  000DD6  6E01               	movwf	??_butnEvent& (0+255),c
  1210  000DD8  0EBA               	movlw	186
  1211  000DDA                     u2307:
  1212  000DDA  2EE8               	decfsz	wreg,f,c
  1213  000DDC  D7FE               	bra	u2307
  1214  000DDE  2E01               	decfsz	??_butnEvent& (0+255),f,c
  1215  000DE0  D7FC               	bra	u2307
  1216  000DE2  2E02               	decfsz	(??_butnEvent+1)& (0+255),f,c
  1217  000DE4  D7FA               	bra	u2307
  1218  000DE6  D000               	nop2	
  1219                           
  1220                           ;main.c: 131: if(PORTBbits.RB5 == 0)
  1221  000DE8  BA81               	btfsc	3969,5,c	;volatile
  1222  000DEA  D002               	goto	l88
  1223                           
  1224                           ;main.c: 132: return 4;
  1225  000DEC  0E04               	movlw	4
  1226  000DEE  0012               	return	
  1227  000DF0                     l88:
  1228                           
  1229                           ;main.c: 133: }
  1230                           ;main.c: 135: if(PORTGbits.RG0 == 0){
  1231  000DF0  B086               	btfsc	3974,0,c	;volatile
  1232  000DF2  D010               	goto	l90
  1233                           
  1234                           ;main.c: 136: _delay((unsigned long)((100)*(8000000/4000.0)));
  1235  000DF4  0E02               	movlw	2
  1236  000DF6  6E02               	movwf	(??_butnEvent+1)& (0+255),c
  1237  000DF8  0E04               	movlw	4
  1238  000DFA  6E01               	movwf	??_butnEvent& (0+255),c
  1239  000DFC  0EBA               	movlw	186
  1240  000DFE                     u2317:
  1241  000DFE  2EE8               	decfsz	wreg,f,c
  1242  000E00  D7FE               	bra	u2317
  1243  000E02  2E01               	decfsz	??_butnEvent& (0+255),f,c
  1244  000E04  D7FC               	bra	u2317
  1245  000E06  2E02               	decfsz	(??_butnEvent+1)& (0+255),f,c
  1246  000E08  D7FA               	bra	u2317
  1247  000E0A  D000               	nop2	
  1248                           
  1249                           ;main.c: 137: if(PORTGbits.RG0 == 0)
  1250  000E0C  B086               	btfsc	3974,0,c	;volatile
  1251  000E0E  D002               	goto	l90
  1252                           
  1253                           ;main.c: 138: return 5;
  1254  000E10  0E05               	movlw	5
  1255  000E12  0012               	return	
  1256  000E14                     l90:
  1257                           
  1258                           ;main.c: 139: }
  1259                           ;main.c: 141: if(PORTGbits.RG1 == 0){
  1260  000E14  B286               	btfsc	3974,1,c	;volatile
  1261  000E16  D010               	goto	l92
  1262                           
  1263                           ;main.c: 142: _delay((unsigned long)((100)*(8000000/4000.0)));
  1264  000E18  0E02               	movlw	2
  1265  000E1A  6E02               	movwf	(??_butnEvent+1)& (0+255),c
  1266  000E1C  0E04               	movlw	4
  1267  000E1E  6E01               	movwf	??_butnEvent& (0+255),c
  1268  000E20  0EBA               	movlw	186
  1269  000E22                     u2327:
  1270  000E22  2EE8               	decfsz	wreg,f,c
  1271  000E24  D7FE               	bra	u2327
  1272  000E26  2E01               	decfsz	??_butnEvent& (0+255),f,c
  1273  000E28  D7FC               	bra	u2327
  1274  000E2A  2E02               	decfsz	(??_butnEvent+1)& (0+255),f,c
  1275  000E2C  D7FA               	bra	u2327
  1276  000E2E  D000               	nop2	
  1277                           
  1278                           ;main.c: 143: if(PORTGbits.RG1 == 0)
  1279  000E30  B286               	btfsc	3974,1,c	;volatile
  1280  000E32  D002               	goto	l92
  1281                           
  1282                           ;main.c: 144: return 6;
  1283  000E34  0E06               	movlw	6
  1284  000E36  0012               	return	
  1285  000E38                     l92:
  1286                           
  1287                           ;main.c: 145: }
  1288                           ;main.c: 147: if(PORTGbits.RG2 == 0){
  1289  000E38  B486               	btfsc	3974,2,c	;volatile
  1290  000E3A  D010               	goto	l94
  1291                           
  1292                           ;main.c: 148: _delay((unsigned long)((100)*(8000000/4000.0)));
  1293  000E3C  0E02               	movlw	2
  1294  000E3E  6E02               	movwf	(??_butnEvent+1)& (0+255),c
  1295  000E40  0E04               	movlw	4
  1296  000E42  6E01               	movwf	??_butnEvent& (0+255),c
  1297  000E44  0EBA               	movlw	186
  1298  000E46                     u2337:
  1299  000E46  2EE8               	decfsz	wreg,f,c
  1300  000E48  D7FE               	bra	u2337
  1301  000E4A  2E01               	decfsz	??_butnEvent& (0+255),f,c
  1302  000E4C  D7FC               	bra	u2337
  1303  000E4E  2E02               	decfsz	(??_butnEvent+1)& (0+255),f,c
  1304  000E50  D7FA               	bra	u2337
  1305  000E52  D000               	nop2	
  1306                           
  1307                           ;main.c: 149: if(PORTGbits.RG2 == 0)
  1308  000E54  B486               	btfsc	3974,2,c	;volatile
  1309  000E56  D002               	goto	l94
  1310                           
  1311                           ;main.c: 150: return 7;
  1312  000E58  0E07               	movlw	7
  1313  000E5A  0012               	return	
  1314  000E5C                     l94:
  1315                           
  1316                           ;main.c: 151: }
  1317                           ;main.c: 153: if(PORTGbits.RG3 == 0){
  1318  000E5C  B686               	btfsc	3974,3,c	;volatile
  1319  000E5E  D010               	goto	l1427
  1320                           
  1321                           ;main.c: 154: _delay((unsigned long)((100)*(8000000/4000.0)));
  1322  000E60  0E02               	movlw	2
  1323  000E62  6E02               	movwf	(??_butnEvent+1)& (0+255),c
  1324  000E64  0E04               	movlw	4
  1325  000E66  6E01               	movwf	??_butnEvent& (0+255),c
  1326  000E68  0EBA               	movlw	186
  1327  000E6A                     u2347:
  1328  000E6A  2EE8               	decfsz	wreg,f,c
  1329  000E6C  D7FE               	bra	u2347
  1330  000E6E  2E01               	decfsz	??_butnEvent& (0+255),f,c
  1331  000E70  D7FC               	bra	u2347
  1332  000E72  2E02               	decfsz	(??_butnEvent+1)& (0+255),f,c
  1333  000E74  D7FA               	bra	u2347
  1334  000E76  D000               	nop2	
  1335                           
  1336                           ;main.c: 155: if(PORTGbits.RG3 == 0)
  1337  000E78  B686               	btfsc	3974,3,c	;volatile
  1338  000E7A  D002               	goto	l1427
  1339                           
  1340                           ;main.c: 156: return 8;
  1341  000E7C  0E08               	movlw	8
  1342  000E7E  0012               	return	
  1343  000E80                     l1427:
  1344                           
  1345                           ;main.c: 157: }
  1346                           ;main.c: 158: return 0;
  1347  000E80  0E00               	movlw	0
  1348  000E82  0012               	return	
  1349  000E84                     __end_of_butnEvent:
  1350                           	opt stack 0
  1351                           tblptru	equ	0xFF8
  1352                           tblptrh	equ	0xFF7
  1353                           tblptrl	equ	0xFF6
  1354                           tablat	equ	0xFF5
  1355                           postinc0	equ	0xFEE
  1356                           wreg	equ	0xFE8
  1357                           status	equ	0xFD8
  1358                           
  1359 ;; *************** function _Vol_change *****************
  1360 ;; Defined at:
  1361 ;;		line 716 in file "main.c"
  1362 ;; Parameters:    Size  Location     Type
  1363 ;;  vol             2   25[COMRAM] unsigned int 
  1364 ;;  dir             1   27[COMRAM] unsigned char 
  1365 ;; Auto vars:     Size  Location     Type
  1366 ;;		None
  1367 ;; Return value:  Size  Location     Type
  1368 ;;                  2   25[COMRAM] unsigned int 
  1369 ;; Registers used:
  1370 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1371 ;; Tracked objects:
  1372 ;;		On entry : 0/0
  1373 ;;		On exit  : 0/0
  1374 ;;		Unchanged: 0/0
  1375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1376 ;;      Params:         3       0       0       0
  1377 ;;      Locals:         0       0       0       0
  1378 ;;      Temps:          4       0       0       0
  1379 ;;      Totals:         7       0       0       0
  1380 ;;Total ram usage:        7 bytes
  1381 ;; Hardware stack levels used:    1
  1382 ;; Hardware stack levels required when called:    3
  1383 ;; This function calls:
  1384 ;;		_FMwrite
  1385 ;;		_errfm
  1386 ;;		_showVol
  1387 ;; This function is called by:
  1388 ;;		_main
  1389 ;; This function uses a non-reentrant model
  1390 ;;
  1391                           
  1392                           	psect	text3
  1393  00058A                     __ptext3:
  1394                           	opt stack 0
  1395  00058A                     _Vol_change:
  1396                           	opt stack 27
  1397                           
  1398                           ;main.c: 717: switch (dir) {
  1399                           
  1400                           ;incstack = 0
  1401  00058A  D0D9               	goto	l2413
  1402  00058C                     l2353:
  1403                           
  1404                           ;main.c: 719: if(vol < 18){
  1405  00058C  501B               	movf	Vol_change@vol+1,w,c
  1406  00058E  E165               	bnz	l2379
  1407  000590  0E12               	movlw	18
  1408  000592  5C1A               	subwf	Vol_change@vol,w,c
  1409  000594  B0D8               	btfsc	status,0,c
  1410  000596  D061               	goto	l2379
  1411                           
  1412                           ;main.c: 720: vol++;
  1413  000598  4A1A               	infsnz	Vol_change@vol,f,c
  1414  00059A  2A1B               	incf	Vol_change@vol+1,f,c
  1415                           
  1416                           ;main.c: 721: regImg[3] &= ~0x0780;
  1417  00059C  0E7F               	movlw	127
  1418  00059E  1636               	andwf	_regImg+6,f,c
  1419  0005A0  0EF8               	movlw	248
  1420  0005A2  1637               	andwf	_regImg+7,f,c
  1421                           
  1422                           ;main.c: 722: regImg[14] &= ~0xF000;
  1423  0005A4  0EFF               	movlw	255
  1424  0005A6  164C               	andwf	_regImg+28,f,c
  1425  0005A8  0E0F               	movlw	15
  1426  0005AA  164D               	andwf	_regImg+29,f,c
  1427                           
  1428                           ;main.c: 723: regImg[3] |= (Vol_data[0][vol] << 7);
  1429  0005AC  90D8               	bcf	status,0,c
  1430  0005AE  341A               	rlcf	Vol_change@vol,w,c
  1431  0005B0  6EF6               	movwf	tblptrl,c
  1432  0005B2  341B               	rlcf	Vol_change@vol+1,w,c
  1433  0005B4  6EF7               	movwf	tblptrh,c
  1434  0005B6  0E01               	movlw	low _Vol_data
  1435  0005B8  26F6               	addwf	tblptrl,f,c
  1436  0005BA  0E03               	movlw	high _Vol_data
  1437  0005BC  22F7               	addwfc	tblptrh,f,c
  1438  0005BE                     	if	0	;There are less than 3 active tblptr bytes
  1439  0005BE                     	endif
  1440  0005BE  0009               	tblrd		*+
  1441  0005C0  CFF5 F01D          	movff	tablat,??_Vol_change
  1442  0005C4  0009               	tblrd		*+
  1443  0005C6  CFF5 F01E          	movff	tablat,??_Vol_change+1
  1444  0005CA  0E07               	movlw	7
  1445  0005CC                     u2165:
  1446  0005CC  90D8               	bcf	status,0,c
  1447  0005CE  361D               	rlcf	??_Vol_change,f,c
  1448  0005D0  361E               	rlcf	??_Vol_change+1,f,c
  1449  0005D2  2EE8               	decfsz	wreg,f,c
  1450  0005D4  D7FB               	goto	u2165
  1451  0005D6  501D               	movf	??_Vol_change,w,c
  1452  0005D8  1236               	iorwf	_regImg+6,f,c
  1453  0005DA  501E               	movf	??_Vol_change+1,w,c
  1454  0005DC  1237               	iorwf	_regImg+7,f,c
  1455                           
  1456                           ;main.c: 724: regImg[14] |= (Vol_data[1][vol] << 12);
  1457  0005DE  C01A  F01D         	movff	Vol_change@vol,??_Vol_change
  1458  0005E2  C01B  F01E         	movff	Vol_change@vol+1,??_Vol_change+1
  1459  0005E6  90D8               	bcf	status,0,c
  1460  0005E8  361D               	rlcf	??_Vol_change,f,c
  1461  0005EA  361E               	rlcf	??_Vol_change+1,f,c
  1462  0005EC  0E26               	movlw	38
  1463  0005EE  261D               	addwf	??_Vol_change,f,c
  1464  0005F0  0E00               	movlw	0
  1465  0005F2  221E               	addwfc	??_Vol_change+1,f,c
  1466  0005F4  0E01               	movlw	low _Vol_data
  1467  0005F6  241D               	addwf	??_Vol_change,w,c
  1468  0005F8  6EF6               	movwf	tblptrl,c
  1469  0005FA  0E03               	movlw	high _Vol_data
  1470  0005FC  201E               	addwfc	??_Vol_change+1,w,c
  1471  0005FE  6EF7               	movwf	tblptrh,c
  1472  000600                     	if	0	;There are less than 3 active tblptr bytes
  1473  000600                     	endif
  1474  000600  0009               	tblrd		*+
  1475  000602  CFF5 F01F          	movff	tablat,??_Vol_change+2
  1476  000606  0009               	tblrd		*+
  1477  000608  CFF5 F020          	movff	tablat,??_Vol_change+3
  1478  00060C  0E0C               	movlw	12
  1479  00060E                     u2175:
  1480  00060E  90D8               	bcf	status,0,c
  1481  000610  361F               	rlcf	??_Vol_change+2,f,c
  1482  000612  3620               	rlcf	??_Vol_change+3,f,c
  1483  000614  2EE8               	decfsz	wreg,f,c
  1484  000616  D7FB               	goto	u2175
  1485  000618  501F               	movf	??_Vol_change+2,w,c
  1486  00061A  124C               	iorwf	_regImg+28,f,c
  1487  00061C  5020               	movf	??_Vol_change+3,w,c
  1488  00061E  124D               	iorwf	_regImg+29,f,c
  1489                           
  1490                           ;main.c: 725: if(FMwrite(3) != 0) return 1;
  1491  000620  0E03               	movlw	3
  1492  000622  EC08  F008         	call	_FMwrite
  1493  000626  0900               	iorlw	0
  1494  000628  B4D8               	btfsc	status,2,c
  1495  00062A  D005               	goto	l2371
  1496  00062C  0E00               	movlw	0
  1497  00062E  6E1B               	movwf	?_Vol_change+1,c
  1498  000630  0E01               	movlw	1
  1499  000632  6E1A               	movwf	?_Vol_change,c
  1500  000634  0012               	return	
  1501  000636                     l2371:
  1502                           
  1503                           ;main.c: 726: if(FMwrite(14) != 0) return 1;
  1504  000636  0E0E               	movlw	14
  1505  000638  EC08  F008         	call	_FMwrite
  1506  00063C  0900               	iorlw	0
  1507  00063E  B4D8               	btfsc	status,2,c
  1508  000640  D005               	goto	l2377
  1509  000642  0E00               	movlw	0
  1510  000644  6E1B               	movwf	?_Vol_change+1,c
  1511  000646  0E01               	movlw	1
  1512  000648  6E1A               	movwf	?_Vol_change,c
  1513  00064A  0012               	return	
  1514  00064C                     l2377:
  1515                           
  1516                           ;main.c: 727: showVol(vol);
  1517  00064C  C01A  F00D         	movff	Vol_change@vol,showVol@vol
  1518  000650  C01B  F00E         	movff	Vol_change@vol+1,showVol@vol+1
  1519  000654  EC0A  F006         	call	_showVol	;wreg free
  1520                           
  1521                           ;main.c: 728: }
  1522  000658  D07A               	goto	l269
  1523  00065A                     l2379:
  1524                           
  1525                           ;main.c: 729: else
  1526                           ;main.c: 730: vol = 18;
  1527  00065A  0E00               	movlw	0
  1528  00065C  6E1B               	movwf	Vol_change@vol+1,c
  1529  00065E  0E12               	movlw	18
  1530  000660  D069               	goto	L5
  1531  000662                     l2381:
  1532                           
  1533                           ;main.c: 734: if(vol > 0){
  1534  000662  501A               	movf	Vol_change@vol,w,c
  1535  000664  101B               	iorwf	Vol_change@vol+1,w,c
  1536  000666  B4D8               	btfsc	status,2,c
  1537  000668  D062               	goto	l2407
  1538                           
  1539                           ;main.c: 735: vol--;
  1540  00066A  061A               	decf	Vol_change@vol,f,c
  1541  00066C  A0D8               	btfss	status,0,c
  1542  00066E  061B               	decf	Vol_change@vol+1,f,c
  1543                           
  1544                           ;main.c: 736: regImg[3] &= ~0x0780;
  1545  000670  0E7F               	movlw	127
  1546  000672  1636               	andwf	_regImg+6,f,c
  1547  000674  0EF8               	movlw	248
  1548  000676  1637               	andwf	_regImg+7,f,c
  1549                           
  1550                           ;main.c: 737: regImg[14] &= ~0xF000;
  1551  000678  0EFF               	movlw	255
  1552  00067A  164C               	andwf	_regImg+28,f,c
  1553  00067C  0E0F               	movlw	15
  1554  00067E  164D               	andwf	_regImg+29,f,c
  1555                           
  1556                           ;main.c: 738: regImg[3] |= (Vol_data[0][vol] << 7);
  1557  000680  90D8               	bcf	status,0,c
  1558  000682  341A               	rlcf	Vol_change@vol,w,c
  1559  000684  6EF6               	movwf	tblptrl,c
  1560  000686  341B               	rlcf	Vol_change@vol+1,w,c
  1561  000688  6EF7               	movwf	tblptrh,c
  1562  00068A  0E01               	movlw	low _Vol_data
  1563  00068C  26F6               	addwf	tblptrl,f,c
  1564  00068E  0E03               	movlw	high _Vol_data
  1565  000690  22F7               	addwfc	tblptrh,f,c
  1566  000692                     	if	0	;There are less than 3 active tblptr bytes
  1567  000692                     	endif
  1568  000692  0009               	tblrd		*+
  1569  000694  CFF5 F01D          	movff	tablat,??_Vol_change
  1570  000698  0009               	tblrd		*+
  1571  00069A  CFF5 F01E          	movff	tablat,??_Vol_change+1
  1572  00069E  0E07               	movlw	7
  1573  0006A0                     u2215:
  1574  0006A0  90D8               	bcf	status,0,c
  1575  0006A2  361D               	rlcf	??_Vol_change,f,c
  1576  0006A4  361E               	rlcf	??_Vol_change+1,f,c
  1577  0006A6  2EE8               	decfsz	wreg,f,c
  1578  0006A8  D7FB               	goto	u2215
  1579  0006AA  501D               	movf	??_Vol_change,w,c
  1580  0006AC  1236               	iorwf	_regImg+6,f,c
  1581  0006AE  501E               	movf	??_Vol_change+1,w,c
  1582  0006B0  1237               	iorwf	_regImg+7,f,c
  1583                           
  1584                           ;main.c: 739: regImg[14] |= (Vol_data[1][vol] << 12);
  1585  0006B2  C01A  F01D         	movff	Vol_change@vol,??_Vol_change
  1586  0006B6  C01B  F01E         	movff	Vol_change@vol+1,??_Vol_change+1
  1587  0006BA  90D8               	bcf	status,0,c
  1588  0006BC  361D               	rlcf	??_Vol_change,f,c
  1589  0006BE  361E               	rlcf	??_Vol_change+1,f,c
  1590  0006C0  0E26               	movlw	38
  1591  0006C2  261D               	addwf	??_Vol_change,f,c
  1592  0006C4  0E00               	movlw	0
  1593  0006C6  221E               	addwfc	??_Vol_change+1,f,c
  1594  0006C8  0E01               	movlw	low _Vol_data
  1595  0006CA  241D               	addwf	??_Vol_change,w,c
  1596  0006CC  6EF6               	movwf	tblptrl,c
  1597  0006CE  0E03               	movlw	high _Vol_data
  1598  0006D0  201E               	addwfc	??_Vol_change+1,w,c
  1599  0006D2  6EF7               	movwf	tblptrh,c
  1600  0006D4                     	if	0	;There are less than 3 active tblptr bytes
  1601  0006D4                     	endif
  1602  0006D4  0009               	tblrd		*+
  1603  0006D6  CFF5 F01F          	movff	tablat,??_Vol_change+2
  1604  0006DA  0009               	tblrd		*+
  1605  0006DC  CFF5 F020          	movff	tablat,??_Vol_change+3
  1606  0006E0  0E0C               	movlw	12
  1607  0006E2                     u2225:
  1608  0006E2  90D8               	bcf	status,0,c
  1609  0006E4  361F               	rlcf	??_Vol_change+2,f,c
  1610  0006E6  3620               	rlcf	??_Vol_change+3,f,c
  1611  0006E8  2EE8               	decfsz	wreg,f,c
  1612  0006EA  D7FB               	goto	u2225
  1613  0006EC  501F               	movf	??_Vol_change+2,w,c
  1614  0006EE  124C               	iorwf	_regImg+28,f,c
  1615  0006F0  5020               	movf	??_Vol_change+3,w,c
  1616  0006F2  124D               	iorwf	_regImg+29,f,c
  1617                           
  1618                           ;main.c: 740: if(FMwrite(3) != 0) return 1;
  1619  0006F4  0E03               	movlw	3
  1620  0006F6  EC08  F008         	call	_FMwrite
  1621  0006FA  0900               	iorlw	0
  1622  0006FC  B4D8               	btfsc	status,2,c
  1623  0006FE  D005               	goto	l2399
  1624  000700  0E00               	movlw	0
  1625  000702  6E1B               	movwf	?_Vol_change+1,c
  1626  000704  0E01               	movlw	1
  1627  000706  6E1A               	movwf	?_Vol_change,c
  1628  000708  0012               	return	
  1629  00070A                     l2399:
  1630                           
  1631                           ;main.c: 741: if(FMwrite(14) != 0) return 1;
  1632  00070A  0E0E               	movlw	14
  1633  00070C  EC08  F008         	call	_FMwrite
  1634  000710  0900               	iorlw	0
  1635  000712  B4D8               	btfsc	status,2,c
  1636  000714  D005               	goto	l2405
  1637  000716  0E00               	movlw	0
  1638  000718  6E1B               	movwf	?_Vol_change+1,c
  1639  00071A  0E01               	movlw	1
  1640  00071C  6E1A               	movwf	?_Vol_change,c
  1641  00071E  0012               	return	
  1642  000720                     l2405:
  1643                           
  1644                           ;main.c: 742: showVol(vol);
  1645  000720  C01A  F00D         	movff	Vol_change@vol,showVol@vol
  1646  000724  C01B  F00E         	movff	Vol_change@vol+1,showVol@vol+1
  1647  000728  EC0A  F006         	call	_showVol	;wreg free
  1648                           
  1649                           ;main.c: 743: }
  1650  00072C  D010               	goto	l269
  1651  00072E                     l2407:
  1652                           
  1653                           ;main.c: 744: else
  1654                           ;main.c: 745: vol = 0;
  1655  00072E  0E00               	movlw	0
  1656  000730  6E1B               	movwf	Vol_change@vol+1,c
  1657  000732  0E00               	movlw	0
  1658  000734                     L5:
  1659  000734  6E1A               	movwf	Vol_change@vol,c
  1660                           
  1661                           ;main.c: 746: break;
  1662  000736  D00B               	goto	l269
  1663  000738                     l2409:
  1664  000738  ECEF  F009         	call	_errfm	;wreg free
  1665                           
  1666                           ;main.c: 749: }
  1667  00073C  D008               	goto	l269
  1668  00073E                     l2413:
  1669  00073E  501C               	movf	Vol_change@dir,w,c
  1670                           
  1671                           ; Switch size 1, requested type "space"
  1672                           ; Number of cases is 2, Range of values is 0 to 1
  1673                           ; switch strategies available:
  1674                           ; Name         Instructions Cycles
  1675                           ; simple_byte            7     4 (average)
  1676                           ;	Chosen strategy is simple_byte
  1677  000740  0A00               	xorlw	0	; case 0
  1678  000742  B4D8               	btfsc	status,2,c
  1679  000744  D78E               	goto	l2381
  1680  000746  0A01               	xorlw	1	; case 1
  1681  000748  B4D8               	btfsc	status,2,c
  1682  00074A  D720               	goto	l2353
  1683  00074C  D7F5               	goto	l2409
  1684  00074E                     l269:
  1685                           
  1686                           ;main.c: 750: return vol;
  1687  00074E  C01A  F01A         	movff	Vol_change@vol,?_Vol_change
  1688  000752  C01B  F01B         	movff	Vol_change@vol+1,?_Vol_change+1
  1689  000756  0012               	return		;funcret
  1690  000758                     __end_of_Vol_change:
  1691                           	opt stack 0
  1692                           tblptru	equ	0xFF8
  1693                           tblptrh	equ	0xFF7
  1694                           tblptrl	equ	0xFF6
  1695                           tablat	equ	0xFF5
  1696                           postinc0	equ	0xFEE
  1697                           wreg	equ	0xFE8
  1698                           status	equ	0xFD8
  1699                           
  1700 ;; *************** function _showVol *****************
  1701 ;; Defined at:
  1702 ;;		line 683 in file "main.c"
  1703 ;; Parameters:    Size  Location     Type
  1704 ;;  vol             2   12[COMRAM] unsigned int 
  1705 ;; Auto vars:     Size  Location     Type
  1706 ;;  j               2   23[COMRAM] int 
  1707 ;;  i               2   21[COMRAM] int 
  1708 ;;  tens            2   19[COMRAM] int 
  1709 ;;  ones            2   17[COMRAM] int 
  1710 ;; Return value:  Size  Location     Type
  1711 ;;                  1    wreg      void 
  1712 ;; Registers used:
  1713 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1714 ;; Tracked objects:
  1715 ;;		On entry : 0/0
  1716 ;;		On exit  : 0/0
  1717 ;;		Unchanged: 0/0
  1718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1719 ;;      Params:         2       0       0       0
  1720 ;;      Locals:         8       0       0       0
  1721 ;;      Temps:          3       0       0       0
  1722 ;;      Totals:        13       0       0       0
  1723 ;;Total ram usage:       13 bytes
  1724 ;; Hardware stack levels used:    1
  1725 ;; Hardware stack levels required when called:    1
  1726 ;; This function calls:
  1727 ;;		___lwdiv
  1728 ;;		___lwmod
  1729 ;;		_clrscn
  1730 ;;		_segWrt
  1731 ;; This function is called by:
  1732 ;;		_Vol_change
  1733 ;; This function uses a non-reentrant model
  1734 ;;
  1735                           
  1736                           	psect	text4
  1737  000C14                     __ptext4:
  1738                           	opt stack 0
  1739  000C14                     _showVol:
  1740                           	opt stack 28
  1741                           
  1742                           ;main.c: 684: int ones, tens;
  1743                           ;main.c: 685: int i, j;
  1744                           ;main.c: 686: clrscn();
  1745                           
  1746                           ;incstack = 0
  1747  000C14  ECB6  F009         	call	_clrscn	;wreg free
  1748                           
  1749                           ;main.c: 687: ones = vol % 10;
  1750  000C18  C00D  F008         	movff	showVol@vol,___lwmod@dividend
  1751  000C1C  C00E  F009         	movff	showVol@vol+1,___lwmod@dividend+1
  1752  000C20  0E00               	movlw	0
  1753  000C22  6E0B               	movwf	___lwmod@divisor+1,c
  1754  000C24  0E0A               	movlw	10
  1755  000C26  6E0A               	movwf	___lwmod@divisor,c
  1756  000C28  EC95  F009         	call	___lwmod	;wreg free
  1757  000C2C  C008  F012         	movff	?___lwmod,showVol@ones
  1758  000C30  C009  F013         	movff	?___lwmod+1,showVol@ones+1
  1759                           
  1760                           ;main.c: 688: ones = LCDDigits[ones];
  1761  000C34  0E71               	movlw	low _LCDDigits
  1762  000C36  2412               	addwf	showVol@ones,w,c
  1763  000C38  6EF6               	movwf	tblptrl,c
  1764  000C3A  0E03               	movlw	high _LCDDigits
  1765  000C3C  2013               	addwfc	showVol@ones+1,w,c
  1766  000C3E  6EF7               	movwf	tblptrh,c
  1767  000C40                     	if	0	;There are less than 3 active tblptr bytes
  1768  000C40                     	endif
  1769  000C40  0008               	tblrd		*
  1770  000C42  50F5               	movf	tablat,w,c
  1771  000C44  6E12               	movwf	showVol@ones,c
  1772  000C46  6A13               	clrf	showVol@ones+1,c
  1773                           
  1774                           ;main.c: 690: tens = (vol/10) % 10;
  1775  000C48  0E00               	movlw	0
  1776  000C4A  6E04               	movwf	___lwdiv@divisor+1,c
  1777  000C4C  0E0A               	movlw	10
  1778  000C4E  6E03               	movwf	___lwdiv@divisor,c
  1779  000C50  C00D  F001         	movff	showVol@vol,___lwdiv@dividend
  1780  000C54  C00E  F002         	movff	showVol@vol+1,___lwdiv@dividend+1
  1781  000C58  EC49  F009         	call	___lwdiv	;wreg free
  1782  000C5C  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  1783  000C60  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  1784  000C64  0E00               	movlw	0
  1785  000C66  6E0B               	movwf	___lwmod@divisor+1,c
  1786  000C68  0E0A               	movlw	10
  1787  000C6A  6E0A               	movwf	___lwmod@divisor,c
  1788  000C6C  EC95  F009         	call	___lwmod	;wreg free
  1789  000C70  C008  F014         	movff	?___lwmod,showVol@tens
  1790  000C74  C009  F015         	movff	?___lwmod+1,showVol@tens+1
  1791                           
  1792                           ;main.c: 691: tens = LCDDigits[tens];
  1793  000C78  0E71               	movlw	low _LCDDigits
  1794  000C7A  2414               	addwf	showVol@tens,w,c
  1795  000C7C  6EF6               	movwf	tblptrl,c
  1796  000C7E  0E03               	movlw	high _LCDDigits
  1797  000C80  2015               	addwfc	showVol@tens+1,w,c
  1798  000C82  6EF7               	movwf	tblptrh,c
  1799  000C84                     	if	0	;There are less than 3 active tblptr bytes
  1800  000C84                     	endif
  1801  000C84  0008               	tblrd		*
  1802  000C86  50F5               	movf	tablat,w,c
  1803  000C88  6E14               	movwf	showVol@tens,c
  1804  000C8A  6A15               	clrf	showVol@tens+1,c
  1805                           
  1806                           ;main.c: 693: for(i = 0; i <= 13; i++){
  1807  000C8C  0E00               	movlw	0
  1808  000C8E  6E17               	movwf	showVol@i+1,c
  1809  000C90  0E00               	movlw	0
  1810  000C92  6E16               	movwf	showVol@i,c
  1811  000C94  BE17               	btfsc	showVol@i+1,7,c
  1812  000C96  D008               	goto	l2067
  1813  000C98  5017               	movf	showVol@i+1,w,c
  1814  000C9A  E105               	bnz	u1710
  1815  000C9C  0E0E               	movlw	14
  1816  000C9E  5C16               	subwf	showVol@i,w,c
  1817  000CA0  B0D8               	btfsc	status,0,c
  1818  000CA2  0012               	return	
  1819  000CA4  D001               	goto	l2067
  1820  000CA6                     u1710:
  1821  000CA6  0012               	return	
  1822  000CA8                     l2067:
  1823                           
  1824                           ;main.c: 694: for(j = 0; j <= 6; j++){
  1825  000CA8  0E00               	movlw	0
  1826  000CAA  6E19               	movwf	showVol@j+1,c
  1827  000CAC  0E00               	movlw	0
  1828  000CAE  6E18               	movwf	showVol@j,c
  1829  000CB0                     l2069:
  1830  000CB0  BE19               	btfsc	showVol@j+1,7,c
  1831  000CB2  D006               	goto	l2073
  1832  000CB4  5019               	movf	showVol@j+1,w,c
  1833  000CB6  E121               	bnz	l2083
  1834  000CB8  0E07               	movlw	7
  1835  000CBA  5C18               	subwf	showVol@j,w,c
  1836  000CBC  B0D8               	btfsc	status,0,c
  1837  000CBE  D01D               	goto	l2083
  1838  000CC0                     l2073:
  1839                           
  1840                           ;main.c: 695: if (((ones >> j) % 2) == 1)
  1841  000CC0  C018  F00F         	movff	showVol@j,??_showVol
  1842  000CC4  C012  F010         	movff	showVol@ones,??_showVol+1
  1843  000CC8  C013  F011         	movff	showVol@ones+1,??_showVol+2
  1844  000CCC  2A0F               	incf	??_showVol,f,c
  1845  000CCE  D003               	goto	u1734
  1846  000CD0                     u1735:
  1847  000CD0  3411               	rlcf	??_showVol+2,w,c
  1848  000CD2  3211               	rrcf	??_showVol+2,f,c
  1849  000CD4  3210               	rrcf	??_showVol+1,f,c
  1850  000CD6                     u1734:
  1851  000CD6  2E0F               	decfsz	??_showVol,f,c
  1852  000CD8  D7FB               	goto	u1735
  1853  000CDA  A010               	btfss	??_showVol+1,0,c
  1854  000CDC  D006               	goto	l2077
  1855                           
  1856                           ;main.c: 696: segWrt(j, 1);
  1857  000CDE  0E01               	movlw	1
  1858  000CE0  6E01               	movwf	segWrt@state,c
  1859  000CE2  5018               	movf	showVol@j,w,c
  1860  000CE4  ECB7  F008         	call	_segWrt
  1861  000CE8  D005               	goto	l2079
  1862  000CEA                     l2077:
  1863                           
  1864                           ;main.c: 697: else
  1865                           ;main.c: 698: segWrt(j, 0);
  1866  000CEA  0E00               	movlw	0
  1867  000CEC  6E01               	movwf	segWrt@state,c
  1868  000CEE  5018               	movf	showVol@j,w,c
  1869  000CF0  ECB7  F008         	call	_segWrt
  1870  000CF4                     l2079:
  1871  000CF4  4A18               	infsnz	showVol@j,f,c
  1872  000CF6  2A19               	incf	showVol@j+1,f,c
  1873  000CF8  D7DB               	goto	l2069
  1874  000CFA                     l2083:
  1875                           
  1876                           ;main.c: 699: }
  1877                           ;main.c: 701: for(j = 0; j <= 6; j++){
  1878  000CFA  0E00               	movlw	0
  1879  000CFC  6E19               	movwf	showVol@j+1,c
  1880  000CFE  0E00               	movlw	0
  1881  000D00  6E18               	movwf	showVol@j,c
  1882  000D02                     l2085:
  1883  000D02  BE19               	btfsc	showVol@j+1,7,c
  1884  000D04  D006               	goto	l2089
  1885  000D06  5019               	movf	showVol@j+1,w,c
  1886  000D08  E123               	bnz	l2099
  1887  000D0A  0E07               	movlw	7
  1888  000D0C  5C18               	subwf	showVol@j,w,c
  1889  000D0E  B0D8               	btfsc	status,0,c
  1890  000D10  D01F               	goto	l2099
  1891  000D12                     l2089:
  1892                           
  1893                           ;main.c: 702: if (((tens >> j) % 2) == 1)
  1894  000D12  C018  F00F         	movff	showVol@j,??_showVol
  1895  000D16  C014  F010         	movff	showVol@tens,??_showVol+1
  1896  000D1A  C015  F011         	movff	showVol@tens+1,??_showVol+2
  1897  000D1E  2A0F               	incf	??_showVol,f,c
  1898  000D20  D003               	goto	u1774
  1899  000D22                     u1775:
  1900  000D22  3411               	rlcf	??_showVol+2,w,c
  1901  000D24  3211               	rrcf	??_showVol+2,f,c
  1902  000D26  3210               	rrcf	??_showVol+1,f,c
  1903  000D28                     u1774:
  1904  000D28  2E0F               	decfsz	??_showVol,f,c
  1905  000D2A  D7FB               	goto	u1775
  1906  000D2C  A010               	btfss	??_showVol+1,0,c
  1907  000D2E  D007               	goto	l2093
  1908                           
  1909                           ;main.c: 703: segWrt(j + 7, 1);
  1910  000D30  0E01               	movlw	1
  1911  000D32  6E01               	movwf	segWrt@state,c
  1912  000D34  5018               	movf	showVol@j,w,c
  1913  000D36  0F07               	addlw	7
  1914  000D38  ECB7  F008         	call	_segWrt
  1915  000D3C  D006               	goto	l2095
  1916  000D3E                     l2093:
  1917                           
  1918                           ;main.c: 704: else
  1919                           ;main.c: 705: segWrt(j + 7, 0);
  1920  000D3E  0E00               	movlw	0
  1921  000D40  6E01               	movwf	segWrt@state,c
  1922  000D42  5018               	movf	showVol@j,w,c
  1923  000D44  0F07               	addlw	7
  1924  000D46  ECB7  F008         	call	_segWrt
  1925  000D4A                     l2095:
  1926  000D4A  4A18               	infsnz	showVol@j,f,c
  1927  000D4C  2A19               	incf	showVol@j+1,f,c
  1928  000D4E  D7D9               	goto	l2085
  1929  000D50                     l2099:
  1930  000D50  4A16               	infsnz	showVol@i,f,c
  1931  000D52  2A17               	incf	showVol@i+1,f,c
  1932  000D54  BE17               	btfsc	showVol@i+1,7,c
  1933  000D56  D7A8               	goto	l2067
  1934  000D58  5017               	movf	showVol@i+1,w,c
  1935  000D5A  E101               	bnz	l259
  1936  000D5C  D79F               	goto	L6
  1937  000D5E                     l259:
  1938  000D5E  0012               	return		;funcret
  1939  000D60                     __end_of_showVol:
  1940                           	opt stack 0
  1941                           tblptru	equ	0xFF8
  1942                           tblptrh	equ	0xFF7
  1943                           tblptrl	equ	0xFF6
  1944                           tablat	equ	0xFF5
  1945                           postinc0	equ	0xFEE
  1946                           wreg	equ	0xFE8
  1947                           status	equ	0xFD8
  1948                           
  1949 ;; *************** function _errfm *****************
  1950 ;; Defined at:
  1951 ;;		line 587 in file "main.c"
  1952 ;; Parameters:    Size  Location     Type
  1953 ;;		None
  1954 ;; Auto vars:     Size  Location     Type
  1955 ;;  i               2    0        int 
  1956 ;; Return value:  Size  Location     Type
  1957 ;;                  1    wreg      void 
  1958 ;; Registers used:
  1959 ;;		wreg, status,2, status,0, cstack
  1960 ;; Tracked objects:
  1961 ;;		On entry : 0/0
  1962 ;;		On exit  : 0/0
  1963 ;;		Unchanged: 0/0
  1964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1965 ;;      Params:         0       0       0       0
  1966 ;;      Locals:         0       0       0       0
  1967 ;;      Temps:          0       0       0       0
  1968 ;;      Totals:         0       0       0       0
  1969 ;;Total ram usage:        0 bytes
  1970 ;; Hardware stack levels used:    1
  1971 ;; Hardware stack levels required when called:    1
  1972 ;; This function calls:
  1973 ;;		_dly
  1974 ;; This function is called by:
  1975 ;;		_Vol_change
  1976 ;;		_main
  1977 ;; This function uses a non-reentrant model
  1978 ;;
  1979                           
  1980                           	psect	text5
  1981  0013DE                     __ptext5:
  1982                           	opt stack 0
  1983  0013DE                     _errfm:
  1984                           	opt stack 29
  1985  0013DE                     l209:
  1986                           
  1987                           ;main.c: 590: LCDDATA0 = 0xFF;
  1988  0013DE  6860               	setf	3936,c	;volatile
  1989                           
  1990                           ;main.c: 591: LCDDATA1 = 0xFF;
  1991  0013E0  6861               	setf	3937,c	;volatile
  1992                           
  1993                           ;main.c: 592: LCDDATA2 = 0xFF;
  1994  0013E2  6862               	setf	3938,c	;volatile
  1995                           
  1996                           ;main.c: 593: dly(20);
  1997  0013E4  0E00               	movlw	0
  1998  0013E6  6E02               	movwf	dly@d+1,c
  1999  0013E8  0E14               	movlw	20
  2000  0013EA  6E01               	movwf	dly@d,c
  2001  0013EC  ECD6  F009         	call	_dly	;wreg free
  2002                           
  2003                           ;main.c: 594: LCDDATA0 = 0x00;
  2004  0013F0  0E00               	movlw	0
  2005  0013F2  6E60               	movwf	3936,c	;volatile
  2006                           
  2007                           ;main.c: 595: LCDDATA1 = 0x00;
  2008  0013F4  0E00               	movlw	0
  2009  0013F6  6E61               	movwf	3937,c	;volatile
  2010                           
  2011                           ;main.c: 596: LCDDATA2 = 0x00;
  2012  0013F8  0E00               	movlw	0
  2013  0013FA  6E62               	movwf	3938,c	;volatile
  2014                           
  2015                           ;main.c: 597: };
  2016  0013FC  D7F0               	goto	l209
  2017  0013FE                     __end_of_errfm:
  2018                           	opt stack 0
  2019                           tblptru	equ	0xFF8
  2020                           tblptrh	equ	0xFF7
  2021                           tblptrl	equ	0xFF6
  2022                           tablat	equ	0xFF5
  2023                           postinc0	equ	0xFEE
  2024                           wreg	equ	0xFE8
  2025                           status	equ	0xFD8
  2026                           
  2027 ;; *************** function _SeekChannel *****************
  2028 ;; Defined at:
  2029 ;;		line 493 in file "main.c"
  2030 ;; Parameters:    Size  Location     Type
  2031 ;;  channel         2   27[COMRAM] unsigned int 
  2032 ;;  dir             2   29[COMRAM] unsigned int 
  2033 ;; Auto vars:     Size  Location     Type
  2034 ;;  newchannel      2   36[COMRAM] unsigned int 
  2035 ;;  dat             2   34[COMRAM] unsigned int 
  2036 ;; Return value:  Size  Location     Type
  2037 ;;                  2   27[COMRAM] unsigned int 
  2038 ;; Registers used:
  2039 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2040 ;; Tracked objects:
  2041 ;;		On entry : 0/0
  2042 ;;		On exit  : 0/0
  2043 ;;		Unchanged: 0/0
  2044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2045 ;;      Params:         4       0       0       0
  2046 ;;      Locals:         4       0       0       0
  2047 ;;      Temps:          3       0       0       0
  2048 ;;      Totals:        11       0       0       0
  2049 ;;Total ram usage:       11 bytes
  2050 ;; Hardware stack levels used:    1
  2051 ;; Hardware stack levels required when called:    5
  2052 ;; This function calls:
  2053 ;;		_FMfrequenc
  2054 ;;		_FMread
  2055 ;;		_FMready
  2056 ;;		_FMwrite
  2057 ;;		_dly
  2058 ;;		_showFreq
  2059 ;; This function is called by:
  2060 ;;		_main
  2061 ;; This function uses a non-reentrant model
  2062 ;;
  2063                           
  2064                           	psect	text6
  2065  000AA0                     __ptext6:
  2066                           	opt stack 0
  2067  000AA0                     _SeekChannel:
  2068                           	opt stack 25
  2069                           
  2070                           ;main.c: 495: unsigned int newchannel;
  2071                           ;main.c: 496: dir <<= 15;
  2072                           
  2073                           ;incstack = 0
  2074  000AA0  0E0F               	movlw	15
  2075  000AA2                     u1895:
  2076  000AA2  90D8               	bcf	status,0,c
  2077  000AA4  361E               	rlcf	SeekChannel@dir,f,c
  2078  000AA6  361F               	rlcf	SeekChannel@dir+1,f,c
  2079  000AA8  2EE8               	decfsz	wreg,f,c
  2080  000AAA  D7FB               	goto	u1895
  2081                           
  2082                           ;main.c: 497: unsigned int dat;
  2083                           ;main.c: 499: regImg[1] |= 0x0002;
  2084  000AAC  8232               	bsf	_regImg+2,1,c
  2085                           
  2086                           ;main.c: 500: if(FMwrite(1) != 0) return 1;
  2087  000AAE  0E01               	movlw	1
  2088  000AB0  EC08  F008         	call	_FMwrite
  2089  000AB4  0900               	iorlw	0
  2090  000AB6  B4D8               	btfsc	status,2,c
  2091  000AB8  D005               	goto	l2193
  2092  000ABA  0E00               	movlw	0
  2093  000ABC  6E1D               	movwf	?_SeekChannel+1,c
  2094  000ABE  0E01               	movlw	1
  2095  000AC0  6E1C               	movwf	?_SeekChannel,c
  2096  000AC2  0012               	return	
  2097  000AC4                     l2193:
  2098                           
  2099                           ;main.c: 502: regImg[2] &= ~0x0200;
  2100  000AC4  9235               	bcf	_regImg+5,1,c
  2101                           
  2102                           ;main.c: 503: if(FMwrite(2) != 0) return 1;
  2103  000AC6  0E02               	movlw	2
  2104  000AC8  EC08  F008         	call	_FMwrite
  2105  000ACC  0900               	iorlw	0
  2106  000ACE  B4D8               	btfsc	status,2,c
  2107  000AD0  D005               	goto	l2201
  2108  000AD2  0E00               	movlw	0
  2109  000AD4  6E1D               	movwf	?_SeekChannel+1,c
  2110  000AD6  0E01               	movlw	1
  2111  000AD8  6E1C               	movwf	?_SeekChannel,c
  2112  000ADA  0012               	return	
  2113  000ADC                     l2201:
  2114                           
  2115                           ;main.c: 505: regImg[3] &= ~0x4000;
  2116  000ADC  9C37               	bcf	_regImg+7,6,c
  2117                           
  2118                           ;main.c: 506: if(FMwrite(3) != 0) return 1;
  2119  000ADE  0E03               	movlw	3
  2120  000AE0  EC08  F008         	call	_FMwrite
  2121  000AE4  0900               	iorlw	0
  2122  000AE6  B4D8               	btfsc	status,2,c
  2123  000AE8  D005               	goto	l2209
  2124  000AEA  0E00               	movlw	0
  2125  000AEC  6E1D               	movwf	?_SeekChannel+1,c
  2126  000AEE  0E01               	movlw	1
  2127  000AF0  6E1C               	movwf	?_SeekChannel,c
  2128  000AF2  0012               	return	
  2129  000AF4                     l2209:
  2130                           
  2131                           ;main.c: 508: regImg[3] |= dir;
  2132  000AF4  501E               	movf	SeekChannel@dir,w,c
  2133  000AF6  1236               	iorwf	_regImg+6,f,c
  2134  000AF8  501F               	movf	SeekChannel@dir+1,w,c
  2135  000AFA  1237               	iorwf	_regImg+7,f,c
  2136                           
  2137                           ;main.c: 509: regImg[3] |= 0x2000;
  2138  000AFC  8A37               	bsf	_regImg+7,5,c
  2139                           
  2140                           ;main.c: 510: if(FMwrite(3) != 0) return 1;
  2141  000AFE  0E03               	movlw	3
  2142  000B00  EC08  F008         	call	_FMwrite
  2143  000B04  0900               	iorlw	0
  2144  000B06  B4D8               	btfsc	status,2,c
  2145  000B08  D005               	goto	l2219
  2146  000B0A  0E00               	movlw	0
  2147  000B0C  6E1D               	movwf	?_SeekChannel+1,c
  2148  000B0E  0E01               	movlw	1
  2149  000B10  6E1C               	movwf	?_SeekChannel,c
  2150  000B12  0012               	return	
  2151  000B14                     l2219:
  2152                           
  2153                           ;main.c: 512: regImg[3] |= 0x4000;
  2154  000B14  8C37               	bsf	_regImg+7,6,c
  2155                           
  2156                           ;main.c: 513: if(FMwrite(3) != 0) return 1;
  2157  000B16  0E03               	movlw	3
  2158  000B18  EC08  F008         	call	_FMwrite
  2159  000B1C  0900               	iorlw	0
  2160  000B1E  B4D8               	btfsc	status,2,c
  2161  000B20  D005               	goto	l2227
  2162  000B22  0E00               	movlw	0
  2163  000B24  6E1D               	movwf	?_SeekChannel+1,c
  2164  000B26  0E01               	movlw	1
  2165  000B28  6E1C               	movwf	?_SeekChannel,c
  2166  000B2A  0012               	return	
  2167  000B2C                     l2227:
  2168                           
  2169                           ;main.c: 516: dly(2);
  2170  000B2C  0E00               	movlw	0
  2171  000B2E  6E02               	movwf	dly@d+1,c
  2172  000B30  0E02               	movlw	2
  2173  000B32  6E01               	movwf	dly@d,c
  2174  000B34  ECD6  F009         	call	_dly	;wreg free
  2175                           
  2176                           ;main.c: 517: if (FMready(&dat) != 0) return 1;
  2177  000B38  0E23               	movlw	low SeekChannel@dat
  2178  000B3A  6E0C               	movwf	FMready@rdy,c
  2179  000B3C  0E00               	movlw	high SeekChannel@dat
  2180  000B3E  6E0D               	movwf	FMready@rdy+1,c
  2181  000B40  EC72  F009         	call	_FMready	;wreg free
  2182  000B44  0900               	iorlw	0
  2183  000B46  B4D8               	btfsc	status,2,c
  2184  000B48  D005               	goto	l2235
  2185  000B4A  0E00               	movlw	0
  2186  000B4C  6E1D               	movwf	?_SeekChannel+1,c
  2187  000B4E  0E01               	movlw	1
  2188  000B50  6E1C               	movwf	?_SeekChannel,c
  2189  000B52  0012               	return	
  2190  000B54                     l2235:
  2191                           
  2192                           ;main.c: 518: } while (!dat);
  2193  000B54  5023               	movf	SeekChannel@dat,w,c
  2194  000B56  1024               	iorwf	SeekChannel@dat+1,w,c
  2195  000B58  B4D8               	btfsc	status,2,c
  2196  000B5A  D7E8               	goto	l2227
  2197                           
  2198                           ;main.c: 520: regImg[1] &= ~0x0002;
  2199  000B5C  9232               	bcf	_regImg+2,1,c
  2200                           
  2201                           ;main.c: 521: if(FMwrite(1) != 0) return 1;
  2202  000B5E  0E01               	movlw	1
  2203  000B60  EC08  F008         	call	_FMwrite
  2204  000B64  0900               	iorlw	0
  2205  000B66  B4D8               	btfsc	status,2,c
  2206  000B68  D005               	goto	l2245
  2207  000B6A  0E00               	movlw	0
  2208  000B6C  6E1D               	movwf	?_SeekChannel+1,c
  2209  000B6E  0E01               	movlw	1
  2210  000B70  6E1C               	movwf	?_SeekChannel,c
  2211  000B72  0012               	return	
  2212  000B74                     l2245:
  2213                           
  2214                           ;main.c: 523: if(FMread(0x13, &newchannel) != 0) return 1;
  2215  000B74  0E25               	movlw	low SeekChannel@newchannel
  2216  000B76  6E03               	movwf	FMread@data,c
  2217  000B78  0E00               	movlw	high SeekChannel@newchannel
  2218  000B7A  6E04               	movwf	FMread@data+1,c
  2219  000B7C  0E13               	movlw	19
  2220  000B7E  EC42  F007         	call	_FMread
  2221  000B82  0900               	iorlw	0
  2222  000B84  B4D8               	btfsc	status,2,c
  2223  000B86  D005               	goto	l2251
  2224  000B88  0E00               	movlw	0
  2225  000B8A  6E1D               	movwf	?_SeekChannel+1,c
  2226  000B8C  0E01               	movlw	1
  2227  000B8E  6E1C               	movwf	?_SeekChannel,c
  2228  000B90  0012               	return	
  2229  000B92                     l2251:
  2230                           
  2231                           ;main.c: 524: regImg[3] &= ~(0x8000);
  2232  000B92  9E37               	bcf	_regImg+7,7,c
  2233                           
  2234                           ;main.c: 525: if(FMwrite(3) != 0) return 1;
  2235  000B94  0E03               	movlw	3
  2236  000B96  EC08  F008         	call	_FMwrite
  2237  000B9A  0900               	iorlw	0
  2238  000B9C  B4D8               	btfsc	status,2,c
  2239  000B9E  D005               	goto	l2259
  2240  000BA0  0E00               	movlw	0
  2241  000BA2  6E1D               	movwf	?_SeekChannel+1,c
  2242  000BA4  0E01               	movlw	1
  2243  000BA6  6E1C               	movwf	?_SeekChannel,c
  2244  000BA8  0012               	return	
  2245  000BAA                     l2259:
  2246                           
  2247                           ;main.c: 526: newchannel = newchannel >> 7;
  2248  000BAA  C025  F020         	movff	SeekChannel@newchannel,??_SeekChannel
  2249  000BAE  C026  F021         	movff	SeekChannel@newchannel+1,??_SeekChannel+1
  2250  000BB2  0E07               	movlw	7
  2251  000BB4  6E22               	movwf	(??_SeekChannel+2)& (0+255),c
  2252  000BB6                     u2005:
  2253  000BB6  90D8               	bcf	status,0,c
  2254  000BB8  3221               	rrcf	??_SeekChannel+1,f,c
  2255  000BBA  3220               	rrcf	??_SeekChannel,f,c
  2256  000BBC  2E22               	decfsz	(??_SeekChannel+2)& (0+255),f,c
  2257  000BBE  D7FB               	goto	u2005
  2258  000BC0  C020  F025         	movff	??_SeekChannel,SeekChannel@newchannel
  2259  000BC4  C021  F026         	movff	??_SeekChannel+1,SeekChannel@newchannel+1
  2260                           
  2261                           ;main.c: 527: newchannel += 690;
  2262  000BC8  0EB2               	movlw	178
  2263  000BCA  2625               	addwf	SeekChannel@newchannel,f,c
  2264  000BCC  0E02               	movlw	2
  2265  000BCE  2226               	addwfc	SeekChannel@newchannel+1,f,c
  2266                           
  2267                           ;main.c: 529: if(newchannel <= 1080 && newchannel >= 875){
  2268  000BD0  0E39               	movlw	57
  2269  000BD2  5C25               	subwf	SeekChannel@newchannel,w,c
  2270  000BD4  0E04               	movlw	4
  2271  000BD6  5826               	subwfb	SeekChannel@newchannel+1,w,c
  2272  000BD8  B0D8               	btfsc	status,0,c
  2273  000BDA  D017               	goto	l197
  2274  000BDC  0E6B               	movlw	107
  2275  000BDE  5C25               	subwf	SeekChannel@newchannel,w,c
  2276  000BE0  0E03               	movlw	3
  2277  000BE2  5826               	subwfb	SeekChannel@newchannel+1,w,c
  2278  000BE4  A0D8               	btfss	status,0,c
  2279  000BE6  D011               	goto	l197
  2280                           
  2281                           ;main.c: 530: FMfrequenc(newchannel);
  2282  000BE8  C025  F012         	movff	SeekChannel@newchannel,FMfrequenc@f
  2283  000BEC  C026  F013         	movff	SeekChannel@newchannel+1,FMfrequenc@f+1
  2284  000BF0  EC49  F008         	call	_FMfrequenc	;wreg free
  2285                           
  2286                           ;main.c: 531: showFreq(newchannel);
  2287  000BF4  C025  F00D         	movff	SeekChannel@newchannel,showFreq@f
  2288  000BF8  C026  F00E         	movff	SeekChannel@newchannel+1,showFreq@f+1
  2289  000BFC  ECC2  F001         	call	_showFreq	;wreg free
  2290                           
  2291                           ;main.c: 532: return newchannel;
  2292  000C00  C025  F01C         	movff	SeekChannel@newchannel,?_SeekChannel
  2293  000C04  C026  F01D         	movff	SeekChannel@newchannel+1,?_SeekChannel+1
  2294                           
  2295                           ;main.c: 533: }
  2296  000C08  0012               	return	
  2297  000C0A                     l197:
  2298                           
  2299                           ;main.c: 534: else{
  2300                           ;main.c: 535: return channel;
  2301  000C0A  C01C  F01C         	movff	SeekChannel@channel,?_SeekChannel
  2302  000C0E  C01D  F01D         	movff	SeekChannel@channel+1,?_SeekChannel+1
  2303  000C12  0012               	return	
  2304  000C14                     __end_of_SeekChannel:
  2305                           	opt stack 0
  2306                           tblptru	equ	0xFF8
  2307                           tblptrh	equ	0xFF7
  2308                           tblptrl	equ	0xFF6
  2309                           tablat	equ	0xFF5
  2310                           postinc0	equ	0xFEE
  2311                           wreg	equ	0xFE8
  2312                           status	equ	0xFD8
  2313                           
  2314 ;; *************** function _ManualChan *****************
  2315 ;; Defined at:
  2316 ;;		line 552 in file "main.c"
  2317 ;; Parameters:    Size  Location     Type
  2318 ;;  channel         2   27[COMRAM] unsigned int 
  2319 ;;  dir             1   29[COMRAM] unsigned char 
  2320 ;; Auto vars:     Size  Location     Type
  2321 ;;		None
  2322 ;; Return value:  Size  Location     Type
  2323 ;;                  2   27[COMRAM] unsigned int 
  2324 ;; Registers used:
  2325 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2326 ;; Tracked objects:
  2327 ;;		On entry : 0/0
  2328 ;;		On exit  : 0/0
  2329 ;;		Unchanged: 0/0
  2330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2331 ;;      Params:         3       0       0       0
  2332 ;;      Locals:         0       0       0       0
  2333 ;;      Temps:          0       0       0       0
  2334 ;;      Totals:         3       0       0       0
  2335 ;;Total ram usage:        3 bytes
  2336 ;; Hardware stack levels used:    1
  2337 ;; Hardware stack levels required when called:    5
  2338 ;; This function calls:
  2339 ;;		_FMfrequenc
  2340 ;;		_showFreq
  2341 ;; This function is called by:
  2342 ;;		_main
  2343 ;; This function uses a non-reentrant model
  2344 ;;
  2345                           
  2346                           	psect	text7
  2347  001104                     __ptext7:
  2348                           	opt stack 0
  2349  001104                     _ManualChan:
  2350                           	opt stack 25
  2351                           
  2352                           ;main.c: 558: if(dir == 1){
  2353                           
  2354                           ;incstack = 0
  2355  001104  041E               	decf	ManualChan@dir,w,c
  2356  001106  A4D8               	btfss	status,2,c
  2357  001108  D015               	goto	l2283
  2358                           
  2359                           ;main.c: 559: if(channel < 1080){
  2360  00110A  0E38               	movlw	56
  2361  00110C  5C1C               	subwf	ManualChan@channel,w,c
  2362  00110E  0E04               	movlw	4
  2363  001110  581D               	subwfb	ManualChan@channel+1,w,c
  2364  001112  B0D8               	btfsc	status,0,c
  2365  001114  D027               	goto	l2293
  2366                           
  2367                           ;main.c: 560: channel++;
  2368  001116  4A1C               	infsnz	ManualChan@channel,f,c
  2369  001118  2A1D               	incf	ManualChan@channel+1,f,c
  2370                           
  2371                           ;main.c: 561: FMfrequenc(channel);
  2372  00111A  C01C  F012         	movff	ManualChan@channel,FMfrequenc@f
  2373  00111E  C01D  F013         	movff	ManualChan@channel+1,FMfrequenc@f+1
  2374  001122  EC49  F008         	call	_FMfrequenc	;wreg free
  2375                           
  2376                           ;main.c: 562: showFreq(channel);
  2377  001126  C01C  F00D         	movff	ManualChan@channel,showFreq@f
  2378  00112A  C01D  F00E         	movff	ManualChan@channel+1,showFreq@f+1
  2379  00112E  ECC2  F001         	call	_showFreq	;wreg free
  2380                           
  2381                           ;main.c: 563: }
  2382                           ;main.c: 564: }
  2383  001132  D018               	goto	l2293
  2384  001134                     l2283:
  2385                           
  2386                           ;main.c: 565: else if(dir == 0){
  2387  001134  501E               	movf	ManualChan@dir,w,c
  2388  001136  A4D8               	btfss	status,2,c
  2389  001138  D015               	goto	l2293
  2390                           
  2391                           ;main.c: 566: if(channel > 875){
  2392  00113A  0E6C               	movlw	108
  2393  00113C  5C1C               	subwf	ManualChan@channel,w,c
  2394  00113E  0E03               	movlw	3
  2395  001140  581D               	subwfb	ManualChan@channel+1,w,c
  2396  001142  A0D8               	btfss	status,0,c
  2397  001144  D00F               	goto	l2293
  2398                           
  2399                           ;main.c: 567: channel--;
  2400  001146  061C               	decf	ManualChan@channel,f,c
  2401  001148  A0D8               	btfss	status,0,c
  2402  00114A  061D               	decf	ManualChan@channel+1,f,c
  2403                           
  2404                           ;main.c: 568: FMfrequenc(channel);
  2405  00114C  C01C  F012         	movff	ManualChan@channel,FMfrequenc@f
  2406  001150  C01D  F013         	movff	ManualChan@channel+1,FMfrequenc@f+1
  2407  001154  EC49  F008         	call	_FMfrequenc	;wreg free
  2408                           
  2409                           ;main.c: 569: showFreq(channel);
  2410  001158  C01C  F00D         	movff	ManualChan@channel,showFreq@f
  2411  00115C  C01D  F00E         	movff	ManualChan@channel+1,showFreq@f+1
  2412  001160  ECC2  F001         	call	_showFreq	;wreg free
  2413  001164                     l2293:
  2414                           
  2415                           ;main.c: 570: }
  2416                           ;main.c: 571: }
  2417                           ;main.c: 572: return channel;
  2418  001164  C01C  F01C         	movff	ManualChan@channel,?_ManualChan
  2419  001168  C01D  F01D         	movff	ManualChan@channel+1,?_ManualChan+1
  2420  00116C  0012               	return	
  2421  00116E                     __end_of_ManualChan:
  2422                           	opt stack 0
  2423                           tblptru	equ	0xFF8
  2424                           tblptrh	equ	0xFF7
  2425                           tblptrl	equ	0xFF6
  2426                           tablat	equ	0xFF5
  2427                           postinc0	equ	0xFEE
  2428                           wreg	equ	0xFE8
  2429                           status	equ	0xFD8
  2430                           
  2431 ;; *************** function _showFreq *****************
  2432 ;; Defined at:
  2433 ;;		line 610 in file "main.c"
  2434 ;; Parameters:    Size  Location     Type
  2435 ;;  f               2   12[COMRAM] unsigned int 
  2436 ;; Auto vars:     Size  Location     Type
  2437 ;;  j               2   25[COMRAM] int 
  2438 ;;  i               2   23[COMRAM] int 
  2439 ;;  hundreds        2   21[COMRAM] int 
  2440 ;;  tens            2   19[COMRAM] int 
  2441 ;;  ones            2   17[COMRAM] int 
  2442 ;; Return value:  Size  Location     Type
  2443 ;;                  1    wreg      void 
  2444 ;; Registers used:
  2445 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2446 ;; Tracked objects:
  2447 ;;		On entry : 0/0
  2448 ;;		On exit  : 0/0
  2449 ;;		Unchanged: 0/0
  2450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2451 ;;      Params:         2       0       0       0
  2452 ;;      Locals:        10       0       0       0
  2453 ;;      Temps:          3       0       0       0
  2454 ;;      Totals:        15       0       0       0
  2455 ;;Total ram usage:       15 bytes
  2456 ;; Hardware stack levels used:    1
  2457 ;; Hardware stack levels required when called:    1
  2458 ;; This function calls:
  2459 ;;		___lwdiv
  2460 ;;		___lwmod
  2461 ;;		_clrscn
  2462 ;;		_segWrt
  2463 ;; This function is called by:
  2464 ;;		_SeekChannel
  2465 ;;		_ManualChan
  2466 ;;		_presetFrequency
  2467 ;;		_main
  2468 ;; This function uses a non-reentrant model
  2469 ;;
  2470                           
  2471                           	psect	text8
  2472  000384                     __ptext8:
  2473                           	opt stack 0
  2474  000384                     _showFreq:
  2475                           	opt stack 29
  2476                           
  2477                           ;main.c: 611: int ones, tens, hundreds;
  2478                           ;main.c: 612: int i, j;
  2479                           ;main.c: 613: clrscn();
  2480                           
  2481                           ;incstack = 0
  2482  000384  ECB6  F009         	call	_clrscn	;wreg free
  2483                           
  2484                           ;main.c: 614: segWrt(22, 1);
  2485  000388  0E01               	movlw	1
  2486  00038A  6E01               	movwf	segWrt@state,c
  2487  00038C  0E16               	movlw	22
  2488  00038E  ECB7  F008         	call	_segWrt
  2489                           
  2490                           ;main.c: 615: ones = f % 10;
  2491  000392  C00D  F008         	movff	showFreq@f,___lwmod@dividend
  2492  000396  C00E  F009         	movff	showFreq@f+1,___lwmod@dividend+1
  2493  00039A  0E00               	movlw	0
  2494  00039C  6E0B               	movwf	___lwmod@divisor+1,c
  2495  00039E  0E0A               	movlw	10
  2496  0003A0  6E0A               	movwf	___lwmod@divisor,c
  2497  0003A2  EC95  F009         	call	___lwmod	;wreg free
  2498  0003A6  C008  F012         	movff	?___lwmod,showFreq@ones
  2499  0003AA  C009  F013         	movff	?___lwmod+1,showFreq@ones+1
  2500                           
  2501                           ;main.c: 616: ones = LCDDigits[ones];
  2502  0003AE  0E71               	movlw	low _LCDDigits
  2503  0003B0  2412               	addwf	showFreq@ones,w,c
  2504  0003B2  6EF6               	movwf	tblptrl,c
  2505  0003B4  0E03               	movlw	high _LCDDigits
  2506  0003B6  2013               	addwfc	showFreq@ones+1,w,c
  2507  0003B8  6EF7               	movwf	tblptrh,c
  2508  0003BA                     	if	0	;There are less than 3 active tblptr bytes
  2509  0003BA                     	endif
  2510  0003BA  0008               	tblrd		*
  2511  0003BC  50F5               	movf	tablat,w,c
  2512  0003BE  6E12               	movwf	showFreq@ones,c
  2513  0003C0  6A13               	clrf	showFreq@ones+1,c
  2514                           
  2515                           ;main.c: 618: tens = (f/10) % 10;
  2516  0003C2  0E00               	movlw	0
  2517  0003C4  6E04               	movwf	___lwdiv@divisor+1,c
  2518  0003C6  0E0A               	movlw	10
  2519  0003C8  6E03               	movwf	___lwdiv@divisor,c
  2520  0003CA  C00D  F001         	movff	showFreq@f,___lwdiv@dividend
  2521  0003CE  C00E  F002         	movff	showFreq@f+1,___lwdiv@dividend+1
  2522  0003D2  EC49  F009         	call	___lwdiv	;wreg free
  2523  0003D6  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  2524  0003DA  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  2525  0003DE  0E00               	movlw	0
  2526  0003E0  6E0B               	movwf	___lwmod@divisor+1,c
  2527  0003E2  0E0A               	movlw	10
  2528  0003E4  6E0A               	movwf	___lwmod@divisor,c
  2529  0003E6  EC95  F009         	call	___lwmod	;wreg free
  2530  0003EA  C008  F014         	movff	?___lwmod,showFreq@tens
  2531  0003EE  C009  F015         	movff	?___lwmod+1,showFreq@tens+1
  2532                           
  2533                           ;main.c: 619: tens = LCDDigits[tens];
  2534  0003F2  0E71               	movlw	low _LCDDigits
  2535  0003F4  2414               	addwf	showFreq@tens,w,c
  2536  0003F6  6EF6               	movwf	tblptrl,c
  2537  0003F8  0E03               	movlw	high _LCDDigits
  2538  0003FA  2015               	addwfc	showFreq@tens+1,w,c
  2539  0003FC  6EF7               	movwf	tblptrh,c
  2540  0003FE                     	if	0	;There are less than 3 active tblptr bytes
  2541  0003FE                     	endif
  2542  0003FE  0008               	tblrd		*
  2543  000400  50F5               	movf	tablat,w,c
  2544  000402  6E14               	movwf	showFreq@tens,c
  2545  000404  6A15               	clrf	showFreq@tens+1,c
  2546                           
  2547                           ;main.c: 621: hundreds = (f/100) % 10;
  2548  000406  0E00               	movlw	0
  2549  000408  6E04               	movwf	___lwdiv@divisor+1,c
  2550  00040A  0E64               	movlw	100
  2551  00040C  6E03               	movwf	___lwdiv@divisor,c
  2552  00040E  C00D  F001         	movff	showFreq@f,___lwdiv@dividend
  2553  000412  C00E  F002         	movff	showFreq@f+1,___lwdiv@dividend+1
  2554  000416  EC49  F009         	call	___lwdiv	;wreg free
  2555  00041A  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  2556  00041E  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  2557  000422  0E00               	movlw	0
  2558  000424  6E0B               	movwf	___lwmod@divisor+1,c
  2559  000426  0E0A               	movlw	10
  2560  000428  6E0A               	movwf	___lwmod@divisor,c
  2561  00042A  EC95  F009         	call	___lwmod	;wreg free
  2562  00042E  C008  F016         	movff	?___lwmod,showFreq@hundreds
  2563  000432  C009  F017         	movff	?___lwmod+1,showFreq@hundreds+1
  2564                           
  2565                           ;main.c: 622: hundreds = LCDDigits[hundreds];
  2566  000436  0E71               	movlw	low _LCDDigits
  2567  000438  2416               	addwf	showFreq@hundreds,w,c
  2568  00043A  6EF6               	movwf	tblptrl,c
  2569  00043C  0E03               	movlw	high _LCDDigits
  2570  00043E  2017               	addwfc	showFreq@hundreds+1,w,c
  2571  000440  6EF7               	movwf	tblptrh,c
  2572  000442                     	if	0	;There are less than 3 active tblptr bytes
  2573  000442                     	endif
  2574  000442  0008               	tblrd		*
  2575  000444  50F5               	movf	tablat,w,c
  2576  000446  6E16               	movwf	showFreq@hundreds,c
  2577  000448  6A17               	clrf	showFreq@hundreds+1,c
  2578                           
  2579                           ;main.c: 624: if(f >= 1000)
  2580  00044A  0EE8               	movlw	232
  2581  00044C  5C0D               	subwf	showFreq@f,w,c
  2582  00044E  0E03               	movlw	3
  2583  000450  580E               	subwfb	showFreq@f+1,w,c
  2584  000452  A0D8               	btfss	status,0,c
  2585  000454  D005               	goto	l1985
  2586                           
  2587                           ;main.c: 625: segWrt(21, 1);
  2588  000456  0E01               	movlw	1
  2589  000458  6E01               	movwf	segWrt@state,c
  2590  00045A  0E15               	movlw	21
  2591  00045C  ECB7  F008         	call	_segWrt
  2592  000460                     l1985:
  2593                           
  2594                           ;main.c: 627: for(i = 0; i <= 20; i++){
  2595  000460  0E00               	movlw	0
  2596  000462  6E19               	movwf	showFreq@i+1,c
  2597  000464  0E00               	movlw	0
  2598  000466  6E18               	movwf	showFreq@i,c
  2599  000468  BE19               	btfsc	showFreq@i+1,7,c
  2600  00046A  D008               	goto	l1991
  2601  00046C  5019               	movf	showFreq@i+1,w,c
  2602  00046E  E105               	bnz	u1570
  2603  000470  0E15               	movlw	21
  2604  000472  5C18               	subwf	showFreq@i,w,c
  2605  000474  B0D8               	btfsc	status,0,c
  2606  000476  0012               	return	
  2607  000478  D001               	goto	l1991
  2608  00047A                     u1570:
  2609  00047A  0012               	return	
  2610  00047C                     l1991:
  2611                           
  2612                           ;main.c: 628: for(j = 0; j <= 6; j++){
  2613  00047C  0E00               	movlw	0
  2614  00047E  6E1B               	movwf	showFreq@j+1,c
  2615  000480  0E00               	movlw	0
  2616  000482  6E1A               	movwf	showFreq@j,c
  2617  000484                     l1993:
  2618  000484  BE1B               	btfsc	showFreq@j+1,7,c
  2619  000486  D006               	goto	l1997
  2620  000488  501B               	movf	showFreq@j+1,w,c
  2621  00048A  E121               	bnz	l2007
  2622  00048C  0E07               	movlw	7
  2623  00048E  5C1A               	subwf	showFreq@j,w,c
  2624  000490  B0D8               	btfsc	status,0,c
  2625  000492  D01D               	goto	l2007
  2626  000494                     l1997:
  2627                           
  2628                           ;main.c: 629: if (((ones >> j) % 2) == 1)
  2629  000494  C01A  F00F         	movff	showFreq@j,??_showFreq
  2630  000498  C012  F010         	movff	showFreq@ones,??_showFreq+1
  2631  00049C  C013  F011         	movff	showFreq@ones+1,??_showFreq+2
  2632  0004A0  2A0F               	incf	??_showFreq,f,c
  2633  0004A2  D003               	goto	u1594
  2634  0004A4                     u1595:
  2635  0004A4  3411               	rlcf	??_showFreq+2,w,c
  2636  0004A6  3211               	rrcf	??_showFreq+2,f,c
  2637  0004A8  3210               	rrcf	??_showFreq+1,f,c
  2638  0004AA                     u1594:
  2639  0004AA  2E0F               	decfsz	??_showFreq,f,c
  2640  0004AC  D7FB               	goto	u1595
  2641  0004AE  A010               	btfss	??_showFreq+1,0,c
  2642  0004B0  D006               	goto	l2001
  2643                           
  2644                           ;main.c: 630: segWrt(j, 1);
  2645  0004B2  0E01               	movlw	1
  2646  0004B4  6E01               	movwf	segWrt@state,c
  2647  0004B6  501A               	movf	showFreq@j,w,c
  2648  0004B8  ECB7  F008         	call	_segWrt
  2649  0004BC  D005               	goto	l2003
  2650  0004BE                     l2001:
  2651                           
  2652                           ;main.c: 631: else
  2653                           ;main.c: 632: segWrt(j, 0);
  2654  0004BE  0E00               	movlw	0
  2655  0004C0  6E01               	movwf	segWrt@state,c
  2656  0004C2  501A               	movf	showFreq@j,w,c
  2657  0004C4  ECB7  F008         	call	_segWrt
  2658  0004C8                     l2003:
  2659  0004C8  4A1A               	infsnz	showFreq@j,f,c
  2660  0004CA  2A1B               	incf	showFreq@j+1,f,c
  2661  0004CC  D7DB               	goto	l1993
  2662  0004CE                     l2007:
  2663                           
  2664                           ;main.c: 633: }
  2665                           ;main.c: 635: for(j = 0; j <= 6; j++){
  2666  0004CE  0E00               	movlw	0
  2667  0004D0  6E1B               	movwf	showFreq@j+1,c
  2668  0004D2  0E00               	movlw	0
  2669  0004D4  6E1A               	movwf	showFreq@j,c
  2670  0004D6                     l2009:
  2671  0004D6  BE1B               	btfsc	showFreq@j+1,7,c
  2672  0004D8  D006               	goto	l2013
  2673  0004DA  501B               	movf	showFreq@j+1,w,c
  2674  0004DC  E123               	bnz	l2023
  2675  0004DE  0E07               	movlw	7
  2676  0004E0  5C1A               	subwf	showFreq@j,w,c
  2677  0004E2  B0D8               	btfsc	status,0,c
  2678  0004E4  D01F               	goto	l2023
  2679  0004E6                     l2013:
  2680                           
  2681                           ;main.c: 636: if (((tens >> j) % 2) == 1)
  2682  0004E6  C01A  F00F         	movff	showFreq@j,??_showFreq
  2683  0004EA  C014  F010         	movff	showFreq@tens,??_showFreq+1
  2684  0004EE  C015  F011         	movff	showFreq@tens+1,??_showFreq+2
  2685  0004F2  2A0F               	incf	??_showFreq,f,c
  2686  0004F4  D003               	goto	u1634
  2687  0004F6                     u1635:
  2688  0004F6  3411               	rlcf	??_showFreq+2,w,c
  2689  0004F8  3211               	rrcf	??_showFreq+2,f,c
  2690  0004FA  3210               	rrcf	??_showFreq+1,f,c
  2691  0004FC                     u1634:
  2692  0004FC  2E0F               	decfsz	??_showFreq,f,c
  2693  0004FE  D7FB               	goto	u1635
  2694  000500  A010               	btfss	??_showFreq+1,0,c
  2695  000502  D007               	goto	l2017
  2696                           
  2697                           ;main.c: 637: segWrt(j + 7, 1);
  2698  000504  0E01               	movlw	1
  2699  000506  6E01               	movwf	segWrt@state,c
  2700  000508  501A               	movf	showFreq@j,w,c
  2701  00050A  0F07               	addlw	7
  2702  00050C  ECB7  F008         	call	_segWrt
  2703  000510  D006               	goto	l2019
  2704  000512                     l2017:
  2705                           
  2706                           ;main.c: 638: else
  2707                           ;main.c: 639: segWrt(j + 7, 0);
  2708  000512  0E00               	movlw	0
  2709  000514  6E01               	movwf	segWrt@state,c
  2710  000516  501A               	movf	showFreq@j,w,c
  2711  000518  0F07               	addlw	7
  2712  00051A  ECB7  F008         	call	_segWrt
  2713  00051E                     l2019:
  2714  00051E  4A1A               	infsnz	showFreq@j,f,c
  2715  000520  2A1B               	incf	showFreq@j+1,f,c
  2716  000522  D7D9               	goto	l2009
  2717  000524                     l2023:
  2718                           
  2719                           ;main.c: 640: }
  2720                           ;main.c: 642: for(j = 0; j <= 6; j++){
  2721  000524  0E00               	movlw	0
  2722  000526  6E1B               	movwf	showFreq@j+1,c
  2723  000528  0E00               	movlw	0
  2724  00052A  6E1A               	movwf	showFreq@j,c
  2725  00052C                     l2025:
  2726  00052C  BE1B               	btfsc	showFreq@j+1,7,c
  2727  00052E  D006               	goto	l2029
  2728  000530  501B               	movf	showFreq@j+1,w,c
  2729  000532  E123               	bnz	l2039
  2730  000534  0E07               	movlw	7
  2731  000536  5C1A               	subwf	showFreq@j,w,c
  2732  000538  B0D8               	btfsc	status,0,c
  2733  00053A  D01F               	goto	l2039
  2734  00053C                     l2029:
  2735                           
  2736                           ;main.c: 643: if (((hundreds >> j) % 2) == 1)
  2737  00053C  C01A  F00F         	movff	showFreq@j,??_showFreq
  2738  000540  C016  F010         	movff	showFreq@hundreds,??_showFreq+1
  2739  000544  C017  F011         	movff	showFreq@hundreds+1,??_showFreq+2
  2740  000548  2A0F               	incf	??_showFreq,f,c
  2741  00054A  D003               	goto	u1674
  2742  00054C                     u1675:
  2743  00054C  3411               	rlcf	??_showFreq+2,w,c
  2744  00054E  3211               	rrcf	??_showFreq+2,f,c
  2745  000550  3210               	rrcf	??_showFreq+1,f,c
  2746  000552                     u1674:
  2747  000552  2E0F               	decfsz	??_showFreq,f,c
  2748  000554  D7FB               	goto	u1675
  2749  000556  A010               	btfss	??_showFreq+1,0,c
  2750  000558  D007               	goto	l2033
  2751                           
  2752                           ;main.c: 644: segWrt(j + 14, 1);
  2753  00055A  0E01               	movlw	1
  2754  00055C  6E01               	movwf	segWrt@state,c
  2755  00055E  501A               	movf	showFreq@j,w,c
  2756  000560  0F0E               	addlw	14
  2757  000562  ECB7  F008         	call	_segWrt
  2758  000566  D006               	goto	l2035
  2759  000568                     l2033:
  2760                           
  2761                           ;main.c: 645: else
  2762                           ;main.c: 646: segWrt(j + 14, 0);
  2763  000568  0E00               	movlw	0
  2764  00056A  6E01               	movwf	segWrt@state,c
  2765  00056C  501A               	movf	showFreq@j,w,c
  2766  00056E  0F0E               	addlw	14
  2767  000570  ECB7  F008         	call	_segWrt
  2768  000574                     l2035:
  2769  000574  4A1A               	infsnz	showFreq@j,f,c
  2770  000576  2A1B               	incf	showFreq@j+1,f,c
  2771  000578  D7D9               	goto	l2025
  2772  00057A                     l2039:
  2773  00057A  4A18               	infsnz	showFreq@i,f,c
  2774  00057C  2A19               	incf	showFreq@i+1,f,c
  2775  00057E  BE19               	btfsc	showFreq@i+1,7,c
  2776  000580  D77D               	goto	l1991
  2777  000582  5019               	movf	showFreq@i+1,w,c
  2778  000584  E101               	bnz	l229
  2779  000586  D774               	goto	L7
  2780  000588                     l229:
  2781  000588  0012               	return		;funcret
  2782  00058A                     __end_of_showFreq:
  2783                           	opt stack 0
  2784                           tblptru	equ	0xFF8
  2785                           tblptrh	equ	0xFF7
  2786                           tblptrl	equ	0xFF6
  2787                           tablat	equ	0xFF5
  2788                           postinc0	equ	0xFEE
  2789                           wreg	equ	0xFE8
  2790                           status	equ	0xFD8
  2791                           
  2792 ;; *************** function _segWrt *****************
  2793 ;; Defined at:
  2794 ;;		line 240 in file "main.c"
  2795 ;; Parameters:    Size  Location     Type
  2796 ;;  segOrd          1    wreg     unsigned char 
  2797 ;;  state           1    0[COMRAM] unsigned char 
  2798 ;; Auto vars:     Size  Location     Type
  2799 ;;  segOrd          1    6[COMRAM] unsigned char 
  2800 ;;  LCReg           2    3[COMRAM] PTR unsigned char 
  2801 ;;		 -> LCDDATA0(1), 
  2802 ;;  bitSelect       1    5[COMRAM] unsigned char 
  2803 ;; Return value:  Size  Location     Type
  2804 ;;                  1    wreg      void 
  2805 ;; Registers used:
  2806 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2807 ;; Tracked objects:
  2808 ;;		On entry : 0/0
  2809 ;;		On exit  : 0/0
  2810 ;;		Unchanged: 0/0
  2811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2812 ;;      Params:         1       0       0       0
  2813 ;;      Locals:         4       0       0       0
  2814 ;;      Temps:          2       0       0       0
  2815 ;;      Totals:         7       0       0       0
  2816 ;;Total ram usage:        7 bytes
  2817 ;; Hardware stack levels used:    1
  2818 ;; This function calls:
  2819 ;;		Nothing
  2820 ;; This function is called by:
  2821 ;;		_showFreq
  2822 ;;		_showVol
  2823 ;; This function uses a non-reentrant model
  2824 ;;
  2825                           
  2826                           	psect	text9
  2827  00116E                     __ptext9:
  2828                           	opt stack 0
  2829  00116E                     _segWrt:
  2830                           	opt stack 29
  2831                           
  2832                           ;incstack = 0
  2833                           ;segWrt@segOrd stored from wreg
  2834  00116E  6E07               	movwf	segWrt@segOrd,c
  2835                           
  2836                           ;main.c: 242: unsigned char bitSelect;
  2837                           ;main.c: 243: unsigned char *LCReg;
  2838                           ;main.c: 245: if (segOrd > 23) return;
  2839  001170  0E17               	movlw	23
  2840  001172  6407               	cpfsgt	segWrt@segOrd,c
  2841  001174  D001               	goto	l1873
  2842  001176  0012               	return	
  2843  001178                     l1873:
  2844                           
  2845                           ;main.c: 246: LCReg = (unsigned char *)&LCDDATA0 + (segOrd >> 3);
  2846  001178  3807               	swapf	segWrt@segOrd,w,c
  2847  00117A  46E8               	rlncf	wreg,f,c
  2848  00117C  0B1F               	andlw	31
  2849  00117E  6E02               	movwf	??_segWrt& (0+255),c
  2850  001180  6A03               	clrf	(??_segWrt+1)& (0+255),c
  2851  001182  0E60               	movlw	96
  2852  001184  2402               	addwf	??_segWrt,w,c
  2853  001186  6E04               	movwf	segWrt@LCReg,c
  2854  001188  0E0F               	movlw	15
  2855  00118A  2003               	addwfc	??_segWrt+1,w,c
  2856  00118C  6E05               	movwf	segWrt@LCReg+1,c
  2857                           
  2858                           ;main.c: 247: bitSelect = 1 << (segOrd & 0x07);
  2859  00118E  C007  F002         	movff	segWrt@segOrd,??_segWrt
  2860  001192  0E07               	movlw	7
  2861  001194  1602               	andwf	??_segWrt,f,c
  2862  001196  0E01               	movlw	1
  2863  001198  6E03               	movwf	(??_segWrt+1)& (0+255),c
  2864  00119A  2A02               	incf	??_segWrt,f,c
  2865  00119C  D002               	goto	u1414
  2866  00119E                     u1415:
  2867  00119E  90D8               	bcf	status,0,c
  2868  0011A0  3603               	rlcf	??_segWrt+1,f,c
  2869  0011A2                     u1414:
  2870  0011A2  2E02               	decfsz	??_segWrt,f,c
  2871  0011A4  D7FC               	goto	u1415
  2872  0011A6  5003               	movf	??_segWrt+1,w,c
  2873  0011A8  6E06               	movwf	segWrt@bitSelect,c
  2874                           
  2875                           ;main.c: 248: if (state) *LCReg |= bitSelect;
  2876  0011AA  5001               	movf	segWrt@state,w,c
  2877  0011AC  B4D8               	btfsc	status,2,c
  2878  0011AE  D007               	goto	l1879
  2879  0011B0  C004  FFD9         	movff	segWrt@LCReg,fsr2l
  2880  0011B4  C005  FFDA         	movff	segWrt@LCReg+1,fsr2h
  2881  0011B8  5006               	movf	segWrt@bitSelect,w,c
  2882  0011BA  12DF               	iorwf	indf2,f,c
  2883  0011BC  0012               	return	
  2884  0011BE                     l1879:
  2885                           
  2886                           ;main.c: 249: else *LCReg &= ~bitSelect;
  2887  0011BE  5006               	movf	segWrt@bitSelect,w,c
  2888  0011C0  0AFF               	xorlw	255
  2889  0011C2  6E02               	movwf	??_segWrt& (0+255),c
  2890  0011C4  C004  FFD9         	movff	segWrt@LCReg,fsr2l
  2891  0011C8  C005  FFDA         	movff	segWrt@LCReg+1,fsr2h
  2892  0011CC  5002               	movf	??_segWrt,w,c
  2893  0011CE  16DF               	andwf	indf2,f,c
  2894  0011D0  0012               	return	
  2895  0011D2                     __end_of_segWrt:
  2896                           	opt stack 0
  2897                           tblptru	equ	0xFF8
  2898                           tblptrh	equ	0xFF7
  2899                           tblptrl	equ	0xFF6
  2900                           tablat	equ	0xFF5
  2901                           postinc0	equ	0xFEE
  2902                           wreg	equ	0xFE8
  2903                           indf2	equ	0xFDF
  2904                           fsr2h	equ	0xFDA
  2905                           fsr2l	equ	0xFD9
  2906                           status	equ	0xFD8
  2907                           
  2908 ;; *************** function _clrscn *****************
  2909 ;; Defined at:
  2910 ;;		line 180 in file "main.c"
  2911 ;; Parameters:    Size  Location     Type
  2912 ;;		None
  2913 ;; Auto vars:     Size  Location     Type
  2914 ;;  i               2    2[COMRAM] int 
  2915 ;;  CLEARptr        2    0[COMRAM] PTR unsigned char 
  2916 ;;		 -> LCDDATA0(1), 
  2917 ;; Return value:  Size  Location     Type
  2918 ;;                  1    wreg      void 
  2919 ;; Registers used:
  2920 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2921 ;; Tracked objects:
  2922 ;;		On entry : 0/0
  2923 ;;		On exit  : 0/0
  2924 ;;		Unchanged: 0/0
  2925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2926 ;;      Params:         0       0       0       0
  2927 ;;      Locals:         4       0       0       0
  2928 ;;      Temps:          0       0       0       0
  2929 ;;      Totals:         4       0       0       0
  2930 ;;Total ram usage:        4 bytes
  2931 ;; Hardware stack levels used:    1
  2932 ;; This function calls:
  2933 ;;		Nothing
  2934 ;; This function is called by:
  2935 ;;		_showFreq
  2936 ;;		_showVol
  2937 ;; This function uses a non-reentrant model
  2938 ;;
  2939                           
  2940                           	psect	text10
  2941  00136C                     __ptext10:
  2942                           	opt stack 0
  2943  00136C                     _clrscn:
  2944                           	opt stack 29
  2945                           
  2946                           ;main.c: 182: int i = 0;
  2947                           
  2948                           ;incstack = 0
  2949  00136C  0E00               	movlw	0
  2950  00136E  6E04               	movwf	clrscn@i+1,c
  2951  001370  0E00               	movlw	0
  2952  001372  6E03               	movwf	clrscn@i,c
  2953                           
  2954                           ;main.c: 183: unsigned char *CLEARptr;
  2955                           ;main.c: 186: for ( i = 0,
  2956                           ;main.c: 187: CLEARptr = (unsigned char *) &LCDDATA0;
  2957  001374  0E00               	movlw	0
  2958  001376  6E04               	movwf	clrscn@i+1,c
  2959  001378  0E00               	movlw	0
  2960  00137A  6E03               	movwf	clrscn@i,c
  2961  00137C  0E60               	movlw	96
  2962  00137E  6E01               	movwf	clrscn@CLEARptr,c
  2963  001380  0E0F               	movlw	15
  2964  001382  6E02               	movwf	clrscn@CLEARptr+1,c
  2965  001384                     l1095:
  2966                           
  2967                           ;main.c: 188: i < 28;
  2968                           ;main.c: 189: i++)
  2969  001384  BE04               	btfsc	clrscn@i+1,7,c
  2970  001386  D006               	goto	l1099
  2971  001388  5004               	movf	clrscn@i+1,w,c
  2972  00138A  E10F               	bnz	l111
  2973  00138C  0E1C               	movlw	28
  2974  00138E  5C03               	subwf	clrscn@i,w,c
  2975  001390  B0D8               	btfsc	status,0,c
  2976  001392  0012               	return	
  2977  001394                     l1099:
  2978                           
  2979                           ;main.c: 190: *CLEARptr++ = 0x00;
  2980  001394  C001  FFD9         	movff	clrscn@CLEARptr,fsr2l
  2981  001398  C002  FFDA         	movff	clrscn@CLEARptr+1,fsr2h
  2982  00139C  0E00               	movlw	0
  2983  00139E  6EDF               	movwf	indf2,c
  2984  0013A0  4A01               	infsnz	clrscn@CLEARptr,f,c
  2985  0013A2  2A02               	incf	clrscn@CLEARptr+1,f,c
  2986  0013A4  4A03               	infsnz	clrscn@i,f,c
  2987  0013A6  2A04               	incf	clrscn@i+1,f,c
  2988  0013A8  D7ED               	goto	l1095
  2989  0013AA                     l111:
  2990  0013AA  0012               	return		;funcret
  2991  0013AC                     __end_of_clrscn:
  2992                           	opt stack 0
  2993                           tblptru	equ	0xFF8
  2994                           tblptrh	equ	0xFF7
  2995                           tblptrl	equ	0xFF6
  2996                           tablat	equ	0xFF5
  2997                           postinc0	equ	0xFEE
  2998                           wreg	equ	0xFE8
  2999                           indf2	equ	0xFDF
  3000                           fsr2h	equ	0xFDA
  3001                           fsr2l	equ	0xFD9
  3002                           status	equ	0xFD8
  3003                           
  3004 ;; *************** function ___lwmod *****************
  3005 ;; Defined at:
  3006 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/lwmod.c"
  3007 ;; Parameters:    Size  Location     Type
  3008 ;;  dividend        2    7[COMRAM] unsigned int 
  3009 ;;  divisor         2    9[COMRAM] unsigned int 
  3010 ;; Auto vars:     Size  Location     Type
  3011 ;;  counter         1   11[COMRAM] unsigned char 
  3012 ;; Return value:  Size  Location     Type
  3013 ;;                  2    7[COMRAM] unsigned int 
  3014 ;; Registers used:
  3015 ;;		wreg, status,2, status,0
  3016 ;; Tracked objects:
  3017 ;;		On entry : 0/0
  3018 ;;		On exit  : 0/0
  3019 ;;		Unchanged: 0/0
  3020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3021 ;;      Params:         4       0       0       0
  3022 ;;      Locals:         1       0       0       0
  3023 ;;      Temps:          0       0       0       0
  3024 ;;      Totals:         5       0       0       0
  3025 ;;Total ram usage:        5 bytes
  3026 ;; Hardware stack levels used:    1
  3027 ;; This function calls:
  3028 ;;		Nothing
  3029 ;; This function is called by:
  3030 ;;		_showFreq
  3031 ;;		_showVol
  3032 ;; This function uses a non-reentrant model
  3033 ;;
  3034                           
  3035                           	psect	text11
  3036  00132A                     __ptext11:
  3037                           	opt stack 0
  3038  00132A                     ___lwmod:
  3039                           	opt stack 29
  3040                           
  3041                           ;incstack = 0
  3042  00132A  500A               	movf	___lwmod@divisor,w,c
  3043  00132C  100B               	iorwf	___lwmod@divisor+1,w,c
  3044  00132E  B4D8               	btfsc	status,2,c
  3045  001330  D018               	goto	l778
  3046  001332  0E01               	movlw	1
  3047  001334  6E0C               	movwf	___lwmod@counter,c
  3048  001336  D004               	goto	l1923
  3049  001338                     l1921:
  3050  001338  90D8               	bcf	status,0,c
  3051  00133A  360A               	rlcf	___lwmod@divisor,f,c
  3052  00133C  360B               	rlcf	___lwmod@divisor+1,f,c
  3053  00133E  2A0C               	incf	___lwmod@counter,f,c
  3054  001340                     l1923:
  3055  001340  AE0B               	btfss	___lwmod@divisor+1,7,c
  3056  001342  D7FA               	goto	l1921
  3057  001344                     l1925:
  3058  001344  500A               	movf	___lwmod@divisor,w,c
  3059  001346  5C08               	subwf	___lwmod@dividend,w,c
  3060  001348  500B               	movf	___lwmod@divisor+1,w,c
  3061  00134A  5809               	subwfb	___lwmod@dividend+1,w,c
  3062  00134C  A0D8               	btfss	status,0,c
  3063  00134E  D004               	goto	l1929
  3064  001350  500A               	movf	___lwmod@divisor,w,c
  3065  001352  5E08               	subwf	___lwmod@dividend,f,c
  3066  001354  500B               	movf	___lwmod@divisor+1,w,c
  3067  001356  5A09               	subwfb	___lwmod@dividend+1,f,c
  3068  001358                     l1929:
  3069  001358  90D8               	bcf	status,0,c
  3070  00135A  320B               	rrcf	___lwmod@divisor+1,f,c
  3071  00135C  320A               	rrcf	___lwmod@divisor,f,c
  3072  00135E  2E0C               	decfsz	___lwmod@counter,f,c
  3073  001360  D7F1               	goto	l1925
  3074  001362                     l778:
  3075  001362  C008  F008         	movff	___lwmod@dividend,?___lwmod
  3076  001366  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
  3077  00136A  0012               	return		;funcret
  3078  00136C                     __end_of___lwmod:
  3079                           	opt stack 0
  3080                           tblptru	equ	0xFF8
  3081                           tblptrh	equ	0xFF7
  3082                           tblptrl	equ	0xFF6
  3083                           tablat	equ	0xFF5
  3084                           postinc0	equ	0xFEE
  3085                           wreg	equ	0xFE8
  3086                           indf2	equ	0xFDF
  3087                           fsr2h	equ	0xFDA
  3088                           fsr2l	equ	0xFD9
  3089                           status	equ	0xFD8
  3090                           
  3091 ;; *************** function ___lwdiv *****************
  3092 ;; Defined at:
  3093 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/lwdiv.c"
  3094 ;; Parameters:    Size  Location     Type
  3095 ;;  dividend        2    0[COMRAM] unsigned int 
  3096 ;;  divisor         2    2[COMRAM] unsigned int 
  3097 ;; Auto vars:     Size  Location     Type
  3098 ;;  quotient        2    4[COMRAM] unsigned int 
  3099 ;;  counter         1    6[COMRAM] unsigned char 
  3100 ;; Return value:  Size  Location     Type
  3101 ;;                  2    0[COMRAM] unsigned int 
  3102 ;; Registers used:
  3103 ;;		wreg, status,2, status,0
  3104 ;; Tracked objects:
  3105 ;;		On entry : 0/0
  3106 ;;		On exit  : 0/0
  3107 ;;		Unchanged: 0/0
  3108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3109 ;;      Params:         4       0       0       0
  3110 ;;      Locals:         3       0       0       0
  3111 ;;      Temps:          0       0       0       0
  3112 ;;      Totals:         7       0       0       0
  3113 ;;Total ram usage:        7 bytes
  3114 ;; Hardware stack levels used:    1
  3115 ;; This function calls:
  3116 ;;		Nothing
  3117 ;; This function is called by:
  3118 ;;		_showFreq
  3119 ;;		_showVol
  3120 ;; This function uses a non-reentrant model
  3121 ;;
  3122                           
  3123                           	psect	text12
  3124  001292                     __ptext12:
  3125                           	opt stack 0
  3126  001292                     ___lwdiv:
  3127                           	opt stack 29
  3128                           
  3129                           ;incstack = 0
  3130  001292  0E00               	movlw	0
  3131  001294  6E06               	movwf	___lwdiv@quotient+1,c
  3132  001296  0E00               	movlw	0
  3133  001298  6E05               	movwf	___lwdiv@quotient,c
  3134  00129A  5003               	movf	___lwdiv@divisor,w,c
  3135  00129C  1004               	iorwf	___lwdiv@divisor+1,w,c
  3136  00129E  B4D8               	btfsc	status,2,c
  3137  0012A0  D01C               	goto	l768
  3138  0012A2  0E01               	movlw	1
  3139  0012A4  6E07               	movwf	___lwdiv@counter,c
  3140  0012A6  D004               	goto	l1903
  3141  0012A8                     l1901:
  3142  0012A8  90D8               	bcf	status,0,c
  3143  0012AA  3603               	rlcf	___lwdiv@divisor,f,c
  3144  0012AC  3604               	rlcf	___lwdiv@divisor+1,f,c
  3145  0012AE  2A07               	incf	___lwdiv@counter,f,c
  3146  0012B0                     l1903:
  3147  0012B0  AE04               	btfss	___lwdiv@divisor+1,7,c
  3148  0012B2  D7FA               	goto	l1901
  3149  0012B4                     l1905:
  3150  0012B4  90D8               	bcf	status,0,c
  3151  0012B6  3605               	rlcf	___lwdiv@quotient,f,c
  3152  0012B8  3606               	rlcf	___lwdiv@quotient+1,f,c
  3153  0012BA  5003               	movf	___lwdiv@divisor,w,c
  3154  0012BC  5C01               	subwf	___lwdiv@dividend,w,c
  3155  0012BE  5004               	movf	___lwdiv@divisor+1,w,c
  3156  0012C0  5802               	subwfb	___lwdiv@dividend+1,w,c
  3157  0012C2  A0D8               	btfss	status,0,c
  3158  0012C4  D005               	goto	l1913
  3159  0012C6  5003               	movf	___lwdiv@divisor,w,c
  3160  0012C8  5E01               	subwf	___lwdiv@dividend,f,c
  3161  0012CA  5004               	movf	___lwdiv@divisor+1,w,c
  3162  0012CC  5A02               	subwfb	___lwdiv@dividend+1,f,c
  3163  0012CE  8005               	bsf	___lwdiv@quotient,0,c
  3164  0012D0                     l1913:
  3165  0012D0  90D8               	bcf	status,0,c
  3166  0012D2  3204               	rrcf	___lwdiv@divisor+1,f,c
  3167  0012D4  3203               	rrcf	___lwdiv@divisor,f,c
  3168  0012D6  2E07               	decfsz	___lwdiv@counter,f,c
  3169  0012D8  D7ED               	goto	l1905
  3170  0012DA                     l768:
  3171  0012DA  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  3172  0012DE  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3173  0012E2  0012               	return		;funcret
  3174  0012E4                     __end_of___lwdiv:
  3175                           	opt stack 0
  3176                           tblptru	equ	0xFF8
  3177                           tblptrh	equ	0xFF7
  3178                           tblptrl	equ	0xFF6
  3179                           tablat	equ	0xFF5
  3180                           postinc0	equ	0xFEE
  3181                           wreg	equ	0xFE8
  3182                           indf2	equ	0xFDF
  3183                           fsr2h	equ	0xFDA
  3184                           fsr2l	equ	0xFD9
  3185                           status	equ	0xFD8
  3186                           
  3187 ;; *************** function _FMfrequenc *****************
  3188 ;; Defined at:
  3189 ;;		line 422 in file "main.c"
  3190 ;; Parameters:    Size  Location     Type
  3191 ;;  f               2   17[COMRAM] unsigned int 
  3192 ;; Auto vars:     Size  Location     Type
  3193 ;;  dat             2   25[COMRAM] unsigned int 
  3194 ;;  cn              2   23[COMRAM] unsigned int 
  3195 ;; Return value:  Size  Location     Type
  3196 ;;                  1    wreg      unsigned char 
  3197 ;; Registers used:
  3198 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3199 ;; Tracked objects:
  3200 ;;		On entry : 0/0
  3201 ;;		On exit  : 0/0
  3202 ;;		Unchanged: 0/0
  3203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3204 ;;      Params:         2       0       0       0
  3205 ;;      Locals:         4       0       0       0
  3206 ;;      Temps:          4       0       0       0
  3207 ;;      Totals:        10       0       0       0
  3208 ;;Total ram usage:       10 bytes
  3209 ;; Hardware stack levels used:    1
  3210 ;; Hardware stack levels required when called:    4
  3211 ;; This function calls:
  3212 ;;		_FMready
  3213 ;;		_FMwrite
  3214 ;;		_dly
  3215 ;; This function is called by:
  3216 ;;		_SeekChannel
  3217 ;;		_ManualChan
  3218 ;;		_presetFrequency
  3219 ;;		_main
  3220 ;; This function uses a non-reentrant model
  3221 ;;
  3222                           
  3223                           	psect	text13
  3224  001092                     __ptext13:
  3225                           	opt stack 0
  3226  001092                     _FMfrequenc:
  3227                           	opt stack 25
  3228                           
  3229                           ;main.c: 424: unsigned int dat;
  3230                           ;main.c: 425: unsigned int cn;
  3231                           ;main.c: 427: cn = f - 690;
  3232                           
  3233                           ;incstack = 0
  3234  001092  0E4E               	movlw	78
  3235  001094  2412               	addwf	FMfrequenc@f,w,c
  3236  001096  6E18               	movwf	FMfrequenc@cn,c
  3237  001098  0EFD               	movlw	253
  3238  00109A  2013               	addwfc	FMfrequenc@f+1,w,c
  3239  00109C  6E19               	movwf	FMfrequenc@cn+1,c
  3240                           
  3241                           ;main.c: 430: regImg[2] &= ~0x0200;
  3242  00109E  9235               	bcf	_regImg+5,1,c
  3243                           
  3244                           ;main.c: 431: if (FMwrite(2) != 0) return 1;
  3245  0010A0  0E02               	movlw	2
  3246  0010A2  EC08  F008         	call	_FMwrite
  3247  0010A6  0900               	iorlw	0
  3248  0010A8  A4D8               	btfss	status,2,c
  3249  0010AA  0012               	return	
  3250                           
  3251                           ;main.c: 432: regImg[2] &= 0xfe00;
  3252                           
  3253                           ;	Return value of _FMfrequenc is never used
  3254  0010AC  0E00               	movlw	0
  3255  0010AE  1634               	andwf	_regImg+4,f,c
  3256  0010B0  0EFE               	movlw	254
  3257  0010B2  1635               	andwf	_regImg+5,f,c
  3258                           
  3259                           ;main.c: 433: regImg[2] |= (cn | 0x0200);
  3260  0010B4  0E00               	movlw	0
  3261  0010B6  6E14               	movwf	??_FMfrequenc& (0+255),c
  3262  0010B8  0E02               	movlw	2
  3263  0010BA  6E15               	movwf	(??_FMfrequenc+1)& (0+255),c
  3264  0010BC  C018  F016         	movff	FMfrequenc@cn,??_FMfrequenc+2
  3265  0010C0  C019  F017         	movff	FMfrequenc@cn+1,??_FMfrequenc+3
  3266  0010C4  5014               	movf	??_FMfrequenc,w,c
  3267  0010C6  1216               	iorwf	??_FMfrequenc+2,f,c
  3268  0010C8  5015               	movf	??_FMfrequenc+1,w,c
  3269  0010CA  1217               	iorwf	??_FMfrequenc+3,f,c
  3270  0010CC  5016               	movf	??_FMfrequenc+2,w,c
  3271  0010CE  1234               	iorwf	_regImg+4,f,c
  3272  0010D0  5017               	movf	??_FMfrequenc+3,w,c
  3273  0010D2  1235               	iorwf	_regImg+5,f,c
  3274                           
  3275                           ;main.c: 434: if (FMwrite(2) != 0) return 1;
  3276  0010D4  0E02               	movlw	2
  3277  0010D6  EC08  F008         	call	_FMwrite
  3278  0010DA  0900               	iorlw	0
  3279  0010DC  A4D8               	btfss	status,2,c
  3280  0010DE  0012               	return	
  3281                           
  3282                           ;main.c: 436: dly(2);
  3283                           
  3284                           ;main.c: 435: do {
  3285                           
  3286                           ;	Return value of _FMfrequenc is never used
  3287  0010E0  0E00               	movlw	0
  3288  0010E2  6E02               	movwf	dly@d+1,c
  3289  0010E4  0E02               	movlw	2
  3290  0010E6  6E01               	movwf	dly@d,c
  3291  0010E8  ECD6  F009         	call	_dly	;wreg free
  3292                           
  3293                           ;main.c: 437: if (FMready(&dat) != 0) return 1;
  3294  0010EC  0E1A               	movlw	low FMfrequenc@dat
  3295  0010EE  6E0C               	movwf	FMready@rdy,c
  3296  0010F0  0E00               	movlw	high FMfrequenc@dat
  3297  0010F2  6E0D               	movwf	FMready@rdy+1,c
  3298  0010F4  EC72  F009         	call	_FMready	;wreg free
  3299  0010F8  0900               	iorlw	0
  3300  0010FA  A4D8               	btfss	status,2,c
  3301  0010FC  0012               	return	
  3302                           
  3303                           ;main.c: 438: } while (!dat);
  3304                           
  3305                           ;	Return value of _FMfrequenc is never used
  3306  0010FE  501A               	movf	FMfrequenc@dat,w,c
  3307  001100  101B               	iorwf	FMfrequenc@dat+1,w,c
  3308  001102  D7EC               	goto	L8
  3309  001104                     __end_of_FMfrequenc:
  3310                           	opt stack 0
  3311                           tblptru	equ	0xFF8
  3312                           tblptrh	equ	0xFF7
  3313                           tblptrl	equ	0xFF6
  3314                           tablat	equ	0xFF5
  3315                           postinc0	equ	0xFEE
  3316                           wreg	equ	0xFE8
  3317                           indf2	equ	0xFDF
  3318                           fsr2h	equ	0xFDA
  3319                           fsr2l	equ	0xFD9
  3320                           status	equ	0xFD8
  3321                           
  3322 ;; *************** function _Init *****************
  3323 ;; Defined at:
  3324 ;;		line 197 in file "main.c"
  3325 ;; Parameters:    Size  Location     Type
  3326 ;;		None
  3327 ;; Auto vars:     Size  Location     Type
  3328 ;;  i               2    0        int 
  3329 ;; Return value:  Size  Location     Type
  3330 ;;                  1    wreg      void 
  3331 ;; Registers used:
  3332 ;;		wreg, status,2, status,0, cstack
  3333 ;; Tracked objects:
  3334 ;;		On entry : 0/0
  3335 ;;		On exit  : 0/0
  3336 ;;		Unchanged: 0/0
  3337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3338 ;;      Params:         0       0       0       0
  3339 ;;      Locals:         0       0       0       0
  3340 ;;      Temps:          0       0       0       0
  3341 ;;      Totals:         0       0       0       0
  3342 ;;Total ram usage:        0 bytes
  3343 ;; Hardware stack levels used:    1
  3344 ;; Hardware stack levels required when called:    1
  3345 ;; This function calls:
  3346 ;;		_OpenI2C
  3347 ;; This function is called by:
  3348 ;;		_main
  3349 ;; This function uses a non-reentrant model
  3350 ;;
  3351                           
  3352                           	psect	text14
  3353  0011D2                     __ptext14:
  3354                           	opt stack 0
  3355  0011D2                     _Init:
  3356                           	opt stack 29
  3357                           
  3358                           ;main.c: 199: int i;
  3359                           ;main.c: 201: OSCCON = 0b01110010;
  3360                           
  3361                           ;incstack = 0
  3362  0011D2  0E72               	movlw	114
  3363  0011D4  6ED3               	movwf	4051,c	;volatile
  3364                           
  3365                           ;main.c: 202: LCDSE0 = 0b11111111;
  3366  0011D6  010F               	movlb	15	; () banked
  3367  0011D8  695A               	setf	90,b	;volatile
  3368                           
  3369                           ; BSR set to: 15
  3370                           ;main.c: 203: LCDSE1 = 0b11111111;
  3371  0011DA  010F               	movlb	15	; () banked
  3372  0011DC  695B               	setf	91,b	;volatile
  3373                           
  3374                           ; BSR set to: 15
  3375                           ;main.c: 204: LCDSE2 = 0b11111111;
  3376  0011DE  010F               	movlb	15	; () banked
  3377  0011E0  695C               	setf	92,b	;volatile
  3378                           
  3379                           ;main.c: 205: LCDSE3 = 0b00000000;
  3380  0011E2  0E00               	movlw	0
  3381  0011E4  010F               	movlb	15	; () banked
  3382  0011E6  6F5D               	movwf	93,b	;volatile
  3383                           
  3384                           ;main.c: 206: LCDCON = 0b10001000;
  3385  0011E8  0E88               	movlw	136
  3386  0011EA  010F               	movlb	15	; () banked
  3387  0011EC  6F59               	movwf	89,b	;volatile
  3388                           
  3389                           ;main.c: 207: LCDPS = 0b00110110;
  3390  0011EE  0E36               	movlw	54
  3391  0011F0  010F               	movlb	15	; () banked
  3392  0011F2  6F58               	movwf	88,b	;volatile
  3393                           
  3394                           ;main.c: 208: ADCON1 = 0b00111111;
  3395  0011F4  0E3F               	movlw	63
  3396  0011F6  6EC1               	movwf	4033,c	;volatile
  3397                           
  3398                           ;main.c: 209: TRISA = 0b00000011;
  3399  0011F8  0E03               	movlw	3
  3400  0011FA  6E92               	movwf	3986,c	;volatile
  3401                           
  3402                           ;main.c: 210: TRISB = 0b00100001;
  3403  0011FC  0E21               	movlw	33
  3404  0011FE  6E93               	movwf	3987,c	;volatile
  3405                           
  3406                           ;main.c: 211: TRISC = 0b00011000;
  3407  001200  0E18               	movlw	24
  3408  001202  6E94               	movwf	3988,c	;volatile
  3409                           
  3410                           ; BSR set to: 15
  3411                           ;main.c: 212: TRISG = 0b11111111;
  3412  001204  6898               	setf	3992,c	;volatile
  3413                           
  3414                           ;main.c: 213: PORTA = 0;
  3415  001206  0E00               	movlw	0
  3416  001208  6E80               	movwf	3968,c	;volatile
  3417                           
  3418                           ;main.c: 214: PORTB = 0;
  3419  00120A  0E00               	movlw	0
  3420  00120C  6E81               	movwf	3969,c	;volatile
  3421                           
  3422                           ;main.c: 215: PORTC = 0;
  3423  00120E  0E00               	movlw	0
  3424  001210  6E82               	movwf	3970,c	;volatile
  3425                           
  3426                           ; BSR set to: 15
  3427                           ;main.c: 216: INTCONbits.TMR0IF = 0;
  3428  001212  94F2               	bcf	intcon,2,c	;volatile
  3429                           
  3430                           ; BSR set to: 15
  3431                           ;main.c: 217: INTCONbits.GIE = 0;
  3432  001214  9EF2               	bcf	intcon,7,c	;volatile
  3433                           
  3434                           ;main.c: 220: T0CON = 0b00001000;
  3435  001216  0E08               	movlw	8
  3436  001218  6ED5               	movwf	4053,c	;volatile
  3437                           
  3438                           ;main.c: 221: TMR0H = 0;
  3439  00121A  0E00               	movlw	0
  3440  00121C  6ED7               	movwf	4055,c	;volatile
  3441                           
  3442                           ;main.c: 222: TMR0L = 0;
  3443  00121E  0E00               	movlw	0
  3444  001220  6ED6               	movwf	4054,c	;volatile
  3445                           
  3446                           ; BSR set to: 15
  3447                           ;main.c: 223: T0CONbits.TMR0ON = 1;
  3448  001222  8ED5               	bsf	4053,7,c	;volatile
  3449                           
  3450                           ; BSR set to: 15
  3451                           ;main.c: 224: OpenI2C( 0b00001000, 0b10000000);
  3452  001224  0E80               	movlw	128
  3453  001226  6E01               	movwf	OpenI2C@slew,c
  3454  001228  0E08               	movlw	8
  3455  00122A  ECFF  F009         	call	_OpenI2C
  3456                           
  3457                           ;main.c: 225: SSPADD = 0x3F;
  3458  00122E  0E3F               	movlw	63
  3459  001230  6EC8               	movwf	4040,c	;volatile
  3460  001232  0012               	return		;funcret
  3461  001234                     __end_of_Init:
  3462                           	opt stack 0
  3463                           tblptru	equ	0xFF8
  3464                           tblptrh	equ	0xFF7
  3465                           tblptrl	equ	0xFF6
  3466                           tablat	equ	0xFF5
  3467                           intcon	equ	0xFF2
  3468                           postinc0	equ	0xFEE
  3469                           wreg	equ	0xFE8
  3470                           indf2	equ	0xFDF
  3471                           fsr2h	equ	0xFDA
  3472                           fsr2l	equ	0xFD9
  3473                           status	equ	0xFD8
  3474                           
  3475 ;; *************** function _OpenI2C *****************
  3476 ;; Defined at:
  3477 ;;		line 14 in file "/Applications/microchip/xc8/v1.41/sources/pic18/plib/i2c/i2c_open.c"
  3478 ;; Parameters:    Size  Location     Type
  3479 ;;  sync_mode       1    wreg     unsigned char 
  3480 ;;  slew            1    0[COMRAM] unsigned char 
  3481 ;; Auto vars:     Size  Location     Type
  3482 ;;  sync_mode       1    1[COMRAM] unsigned char 
  3483 ;; Return value:  Size  Location     Type
  3484 ;;                  1    wreg      void 
  3485 ;; Registers used:
  3486 ;;		wreg, status,2, status,0
  3487 ;; Tracked objects:
  3488 ;;		On entry : 0/0
  3489 ;;		On exit  : 0/0
  3490 ;;		Unchanged: 0/0
  3491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3492 ;;      Params:         1       0       0       0
  3493 ;;      Locals:         1       0       0       0
  3494 ;;      Temps:          0       0       0       0
  3495 ;;      Totals:         2       0       0       0
  3496 ;;Total ram usage:        2 bytes
  3497 ;; Hardware stack levels used:    1
  3498 ;; This function calls:
  3499 ;;		Nothing
  3500 ;; This function is called by:
  3501 ;;		_Init
  3502 ;; This function uses a non-reentrant model
  3503 ;;
  3504                           
  3505                           	psect	text15
  3506  0013FE                     __ptext15:
  3507                           	opt stack 0
  3508  0013FE                     _OpenI2C:
  3509                           	opt stack 29
  3510                           
  3511                           ;incstack = 0
  3512                           ;OpenI2C@sync_mode stored from wreg
  3513  0013FE  6E02               	movwf	OpenI2C@sync_mode,c
  3514  001400  0E3F               	movlw	63
  3515  001402  16C7               	andwf	4039,f,c	;volatile
  3516  001404  0E00               	movlw	0
  3517  001406  6EC6               	movwf	4038,c	;volatile
  3518  001408  0E00               	movlw	0
  3519  00140A  6EC5               	movwf	4037,c	;volatile
  3520  00140C  5002               	movf	OpenI2C@sync_mode,w,c
  3521  00140E  12C6               	iorwf	4038,f,c	;volatile
  3522  001410  5001               	movf	OpenI2C@slew,w,c
  3523  001412  12C7               	iorwf	4039,f,c	;volatile
  3524  001414  8694               	bsf	3988,3,c	;volatile
  3525  001416  8894               	bsf	3988,4,c	;volatile
  3526  001418  8AC6               	bsf	4038,5,c	;volatile
  3527  00141A  0012               	return		;funcret
  3528  00141C                     __end_of_OpenI2C:
  3529                           	opt stack 0
  3530                           tblptru	equ	0xFF8
  3531                           tblptrh	equ	0xFF7
  3532                           tblptrl	equ	0xFF6
  3533                           tablat	equ	0xFF5
  3534                           intcon	equ	0xFF2
  3535                           postinc0	equ	0xFEE
  3536                           wreg	equ	0xFE8
  3537                           indf2	equ	0xFDF
  3538                           fsr2h	equ	0xFDA
  3539                           fsr2l	equ	0xFD9
  3540                           status	equ	0xFD8
  3541                           
  3542 ;; *************** function _FMvers *****************
  3543 ;; Defined at:
  3544 ;;		line 456 in file "main.c"
  3545 ;; Parameters:    Size  Location     Type
  3546 ;;  vsn             2   11[COMRAM] PTR unsigned int 
  3547 ;;		 -> main@ui(2), 
  3548 ;; Auto vars:     Size  Location     Type
  3549 ;;		None
  3550 ;; Return value:  Size  Location     Type
  3551 ;;                  1    wreg      unsigned char 
  3552 ;; Registers used:
  3553 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3554 ;; Tracked objects:
  3555 ;;		On entry : 0/0
  3556 ;;		On exit  : 0/0
  3557 ;;		Unchanged: 0/0
  3558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3559 ;;      Params:         2       0       0       0
  3560 ;;      Locals:         0       0       0       0
  3561 ;;      Temps:          0       0       0       0
  3562 ;;      Totals:         2       0       0       0
  3563 ;;Total ram usage:        2 bytes
  3564 ;; Hardware stack levels used:    1
  3565 ;; Hardware stack levels required when called:    3
  3566 ;; This function calls:
  3567 ;;		_FMread
  3568 ;; This function is called by:
  3569 ;;		_main
  3570 ;; This function uses a non-reentrant model
  3571 ;;
  3572                           
  3573                           	psect	text16
  3574  001460                     __ptext16:
  3575                           	opt stack 0
  3576  001460                     _FMvers:
  3577                           	opt stack 27
  3578                           
  3579                           ;main.c: 457: if (FMread(0x1C, vsn) != 0) return 1;
  3580                           
  3581                           ;incstack = 0
  3582  001460  C00C  F003         	movff	FMvers@vsn,FMread@data
  3583  001464  C00D  F004         	movff	FMvers@vsn+1,FMread@data+1
  3584  001468  0E1C               	movlw	28
  3585  00146A  EC42  F007         	call	_FMread
  3586                           
  3587                           ;	Return value of _FMvers is never used
  3588  00146E  0012               	return	
  3589  001470                     __end_of_FMvers:
  3590                           	opt stack 0
  3591                           tblptru	equ	0xFF8
  3592                           tblptrh	equ	0xFF7
  3593                           tblptrl	equ	0xFF6
  3594                           tablat	equ	0xFF5
  3595                           intcon	equ	0xFF2
  3596                           postinc0	equ	0xFEE
  3597                           wreg	equ	0xFE8
  3598                           indf2	equ	0xFDF
  3599                           fsr2h	equ	0xFDA
  3600                           fsr2l	equ	0xFD9
  3601                           status	equ	0xFD8
  3602                           
  3603 ;; *************** function _FMinit *****************
  3604 ;; Defined at:
  3605 ;;		line 384 in file "main.c"
  3606 ;; Parameters:    Size  Location     Type
  3607 ;;		None
  3608 ;; Auto vars:     Size  Location     Type
  3609 ;;  dat             2   17[COMRAM] unsigned int 
  3610 ;;  ad              1   19[COMRAM] unsigned char 
  3611 ;; Return value:  Size  Location     Type
  3612 ;;                  1    wreg      unsigned char 
  3613 ;; Registers used:
  3614 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3615 ;; Tracked objects:
  3616 ;;		On entry : 0/0
  3617 ;;		On exit  : 0/0
  3618 ;;		Unchanged: 0/0
  3619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3620 ;;      Params:         0       0       0       0
  3621 ;;      Locals:         3       0       0       0
  3622 ;;      Temps:          0       0       0       0
  3623 ;;      Totals:         3       0       0       0
  3624 ;;Total ram usage:        3 bytes
  3625 ;; Hardware stack levels used:    1
  3626 ;; Hardware stack levels required when called:    4
  3627 ;; This function calls:
  3628 ;;		_FMready
  3629 ;;		_FMwrite
  3630 ;;		_dly
  3631 ;; This function is called by:
  3632 ;;		_main
  3633 ;; This function uses a non-reentrant model
  3634 ;;
  3635                           
  3636                           	psect	text17
  3637  000F4E                     __ptext17:
  3638                           	opt stack 0
  3639  000F4E                     _FMinit:
  3640                           	opt stack 26
  3641                           
  3642                           ;main.c: 386: unsigned char ad;
  3643                           ;main.c: 387: unsigned int dat;
  3644                           ;main.c: 390: for(ad = 0; ad < 18; ad++) regImg[ad] = regDflt[ad];
  3645                           
  3646                           ;incstack = 0
  3647  000F4E  0E00               	movlw	0
  3648  000F50  6E14               	movwf	FMinit@ad,c
  3649  000F52                     l2125:
  3650  000F52  0E11               	movlw	17
  3651  000F54  6414               	cpfsgt	FMinit@ad,c
  3652  000F56  D001               	goto	l2129
  3653  000F58  D018               	goto	l157
  3654  000F5A                     l2129:
  3655  000F5A  5014               	movf	FMinit@ad,w,c
  3656  000F5C  0D02               	mullw	2
  3657  000F5E  0E4D               	movlw	low _regDflt
  3658  000F60  24F3               	addwf	prodl,w,c
  3659  000F62  6EF6               	movwf	tblptrl,c
  3660  000F64  0E03               	movlw	high _regDflt
  3661  000F66  20F4               	addwfc	prodh,w,c
  3662  000F68  6EF7               	movwf	tblptrh,c
  3663  000F6A                     	if	0	;There are less than 3 active tblptr bytes
  3664  000F6A                     	endif
  3665  000F6A  5014               	movf	FMinit@ad,w,c
  3666  000F6C  0D02               	mullw	2
  3667  000F6E  0E30               	movlw	low _regImg
  3668  000F70  24F3               	addwf	prodl,w,c
  3669  000F72  6ED9               	movwf	fsr2l,c
  3670  000F74  0E00               	movlw	high _regImg
  3671  000F76  20F4               	addwfc	prodh,w,c
  3672  000F78  6EDA               	movwf	fsr2h,c
  3673  000F7A  0009               	tblrd		*+
  3674  000F7C  CFF5 FFDE          	movff	tablat,postinc2
  3675  000F80  0008               	tblrd		*
  3676  000F82  CFF5 FFDD          	movff	tablat,postdec2
  3677  000F86  2A14               	incf	FMinit@ad,f,c
  3678  000F88  D7E4               	goto	l2125
  3679  000F8A                     l157:
  3680                           
  3681                           ;main.c: 392: dat = regImg[0];
  3682  000F8A  C030  F012         	movff	_regImg,FMinit@dat
  3683  000F8E  C031  F013         	movff	_regImg+1,FMinit@dat+1
  3684                           
  3685                           ;main.c: 393: regImg[0] &= ~1;
  3686  000F92  9030               	bcf	_regImg,0,c
  3687                           
  3688                           ;main.c: 394: if (FMwrite(0) != 0) return 1;
  3689  000F94  0E00               	movlw	0
  3690  000F96  EC08  F008         	call	_FMwrite
  3691  000F9A  0900               	iorlw	0
  3692  000F9C  B4D8               	btfsc	status,2,c
  3693  000F9E  D002               	goto	l2143
  3694  000FA0  0E01               	movlw	1
  3695  000FA2  0012               	return	
  3696  000FA4                     l2143:
  3697                           
  3698                           ;main.c: 395: for(ad = 1; ad < 18; ad++) {
  3699  000FA4  0E01               	movlw	1
  3700  000FA6  6E14               	movwf	FMinit@ad,c
  3701  000FA8                     l2145:
  3702  000FA8  0E11               	movlw	17
  3703  000FAA  6414               	cpfsgt	FMinit@ad,c
  3704  000FAC  D001               	goto	l2149
  3705  000FAE  D00A               	goto	l2159
  3706  000FB0                     l2149:
  3707                           
  3708                           ;main.c: 396: if (FMwrite(ad) != 0) return 1;
  3709  000FB0  5014               	movf	FMinit@ad,w,c
  3710  000FB2  EC08  F008         	call	_FMwrite
  3711  000FB6  0900               	iorlw	0
  3712  000FB8  B4D8               	btfsc	status,2,c
  3713  000FBA  D002               	goto	l2155
  3714  000FBC  0E01               	movlw	1
  3715  000FBE  0012               	return	
  3716  000FC0                     l2155:
  3717  000FC0  2A14               	incf	FMinit@ad,f,c
  3718  000FC2  D7F2               	goto	l2145
  3719  000FC4                     l2159:
  3720                           
  3721                           ;main.c: 397: }
  3722                           ;main.c: 399: regImg[0] = dat | 1;
  3723  000FC4  0E01               	movlw	1
  3724  000FC6  1012               	iorwf	FMinit@dat,w,c
  3725  000FC8  6E30               	movwf	_regImg,c
  3726  000FCA  5013               	movf	FMinit@dat+1,w,c
  3727  000FCC  6E31               	movwf	_regImg+1,c
  3728                           
  3729                           ;main.c: 400: if (FMwrite(0) != 0) return 1;
  3730  000FCE  0E00               	movlw	0
  3731  000FD0  EC08  F008         	call	_FMwrite
  3732  000FD4  0900               	iorlw	0
  3733  000FD6  B4D8               	btfsc	status,2,c
  3734  000FD8  D002               	goto	l2167
  3735  000FDA  0E01               	movlw	1
  3736  000FDC  0012               	return	
  3737  000FDE                     l2167:
  3738                           
  3739                           ;main.c: 401: dly(20);
  3740  000FDE  0E00               	movlw	0
  3741  000FE0  6E02               	movwf	dly@d+1,c
  3742  000FE2  0E14               	movlw	20
  3743  000FE4  6E01               	movwf	dly@d,c
  3744  000FE6  ECD6  F009         	call	_dly	;wreg free
  3745                           
  3746                           ;main.c: 402: while (FMready(&dat), !dat) dly(2);
  3747  000FEA  D006               	goto	l2171
  3748  000FEC                     l2169:
  3749  000FEC  0E00               	movlw	0
  3750  000FEE  6E02               	movwf	dly@d+1,c
  3751  000FF0  0E02               	movlw	2
  3752  000FF2  6E01               	movwf	dly@d,c
  3753  000FF4  ECD6  F009         	call	_dly	;wreg free
  3754  000FF8                     l2171:
  3755  000FF8  0E12               	movlw	low FMinit@dat
  3756  000FFA  6E0C               	movwf	FMready@rdy,c
  3757  000FFC  0E00               	movlw	high FMinit@dat
  3758  000FFE  6E0D               	movwf	FMready@rdy+1,c
  3759  001000  EC72  F009         	call	_FMready	;wreg free
  3760  001004  5012               	movf	FMinit@dat,w,c
  3761  001006  1013               	iorwf	FMinit@dat+1,w,c
  3762  001008  B4D8               	btfsc	status,2,c
  3763  00100A  D7F0               	goto	l2169
  3764                           
  3765                           ;main.c: 403: return 0;
  3766  00100C  0E00               	movlw	0
  3767  00100E  0012               	return	
  3768  001010                     __end_of_FMinit:
  3769                           	opt stack 0
  3770                           tblptru	equ	0xFF8
  3771                           tblptrh	equ	0xFF7
  3772                           tblptrl	equ	0xFF6
  3773                           tablat	equ	0xFF5
  3774                           prodh	equ	0xFF4
  3775                           prodl	equ	0xFF3
  3776                           intcon	equ	0xFF2
  3777                           postinc0	equ	0xFEE
  3778                           wreg	equ	0xFE8
  3779                           indf2	equ	0xFDF
  3780                           postinc2	equ	0xFDE
  3781                           postdec2	equ	0xFDD
  3782                           fsr2h	equ	0xFDA
  3783                           fsr2l	equ	0xFD9
  3784                           status	equ	0xFD8
  3785                           
  3786 ;; *************** function _dly *****************
  3787 ;; Defined at:
  3788 ;;		line 165 in file "main.c"
  3789 ;; Parameters:    Size  Location     Type
  3790 ;;  d               2    0[COMRAM] int 
  3791 ;; Auto vars:     Size  Location     Type
  3792 ;;  i               2    2[COMRAM] int 
  3793 ;; Return value:  Size  Location     Type
  3794 ;;                  1    wreg      void 
  3795 ;; Registers used:
  3796 ;;		wreg, status,2, status,0
  3797 ;; Tracked objects:
  3798 ;;		On entry : 0/0
  3799 ;;		On exit  : 0/0
  3800 ;;		Unchanged: 0/0
  3801 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3802 ;;      Params:         2       0       0       0
  3803 ;;      Locals:         2       0       0       0
  3804 ;;      Temps:          0       0       0       0
  3805 ;;      Totals:         4       0       0       0
  3806 ;;Total ram usage:        4 bytes
  3807 ;; Hardware stack levels used:    1
  3808 ;; This function calls:
  3809 ;;		Nothing
  3810 ;; This function is called by:
  3811 ;;		_FMinit
  3812 ;;		_FMfrequenc
  3813 ;;		_SeekChannel
  3814 ;;		_errfm
  3815 ;;		_main
  3816 ;; This function uses a non-reentrant model
  3817 ;;
  3818                           
  3819                           	psect	text18
  3820  0013AC                     __ptext18:
  3821                           	opt stack 0
  3822  0013AC                     _dly:
  3823                           	opt stack 28
  3824                           
  3825                           ;main.c: 167: int i = 0;
  3826                           
  3827                           ;incstack = 0
  3828  0013AC  0E00               	movlw	0
  3829  0013AE  6E04               	movwf	dly@i+1,c
  3830  0013B0  0E00               	movlw	0
  3831  0013B2  6E03               	movwf	dly@i,c
  3832                           
  3833                           ;main.c: 169: for ( ; d; --d)
  3834  0013B4  D00F               	goto	l1867
  3835  0013B6                     l1859:
  3836                           
  3837                           ;main.c: 170: for (i = 100; i; --i) ;
  3838  0013B6  0E00               	movlw	0
  3839  0013B8  6E04               	movwf	dly@i+1,c
  3840  0013BA  0E64               	movlw	100
  3841  0013BC  6E03               	movwf	dly@i,c
  3842  0013BE  D003               	goto	l1863
  3843  0013C0                     l1861:
  3844  0013C0  0603               	decf	dly@i,f,c
  3845  0013C2  A0D8               	btfss	status,0,c
  3846  0013C4  0604               	decf	dly@i+1,f,c
  3847  0013C6                     l1863:
  3848  0013C6  5003               	movf	dly@i,w,c
  3849  0013C8  1004               	iorwf	dly@i+1,w,c
  3850  0013CA  A4D8               	btfss	status,2,c
  3851  0013CC  D7F9               	goto	l1861
  3852  0013CE  0601               	decf	dly@d,f,c
  3853  0013D0  A0D8               	btfss	status,0,c
  3854  0013D2  0602               	decf	dly@d+1,f,c
  3855  0013D4                     l1867:
  3856  0013D4  5001               	movf	dly@d,w,c
  3857  0013D6  1002               	iorwf	dly@d+1,w,c
  3858  0013D8  B4D8               	btfsc	status,2,c
  3859  0013DA  0012               	return	
  3860  0013DC  D7EC               	goto	l1859
  3861  0013DE                     __end_of_dly:
  3862                           	opt stack 0
  3863                           tblptru	equ	0xFF8
  3864                           tblptrh	equ	0xFF7
  3865                           tblptrl	equ	0xFF6
  3866                           tablat	equ	0xFF5
  3867                           prodh	equ	0xFF4
  3868                           prodl	equ	0xFF3
  3869                           intcon	equ	0xFF2
  3870                           postinc0	equ	0xFEE
  3871                           wreg	equ	0xFE8
  3872                           indf2	equ	0xFDF
  3873                           postinc2	equ	0xFDE
  3874                           postdec2	equ	0xFDD
  3875                           fsr2h	equ	0xFDA
  3876                           fsr2l	equ	0xFD9
  3877                           status	equ	0xFD8
  3878                           
  3879 ;; *************** function _FMwrite *****************
  3880 ;; Defined at:
  3881 ;;		line 269 in file "main.c"
  3882 ;; Parameters:    Size  Location     Type
  3883 ;;  adr             1    wreg     unsigned char 
  3884 ;; Auto vars:     Size  Location     Type
  3885 ;;  adr             1    6[COMRAM] unsigned char 
  3886 ;;  regstr          2    0        unsigned int 
  3887 ;;  secndByt        1    5[COMRAM] unsigned char 
  3888 ;;  firstByt        1    4[COMRAM] unsigned char 
  3889 ;;  rpy             1    0        unsigned char 
  3890 ;; Return value:  Size  Location     Type
  3891 ;;                  1    wreg      unsigned char 
  3892 ;; Registers used:
  3893 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3894 ;; Tracked objects:
  3895 ;;		On entry : 0/0
  3896 ;;		On exit  : 0/0
  3897 ;;		Unchanged: 0/0
  3898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3899 ;;      Params:         0       0       0       0
  3900 ;;      Locals:         3       0       0       0
  3901 ;;      Temps:          2       0       0       0
  3902 ;;      Totals:         5       0       0       0
  3903 ;;Total ram usage:        5 bytes
  3904 ;; Hardware stack levels used:    1
  3905 ;; Hardware stack levels required when called:    2
  3906 ;; This function calls:
  3907 ;;		_IdleI2C
  3908 ;;		_WriteI2C
  3909 ;; This function is called by:
  3910 ;;		_FMinit
  3911 ;;		_FMfrequenc
  3912 ;;		_SeekChannel
  3913 ;;		_Vol_change
  3914 ;; This function uses a non-reentrant model
  3915 ;;
  3916                           
  3917                           	psect	text19
  3918  001010                     __ptext19:
  3919                           	opt stack 0
  3920  001010                     _FMwrite:
  3921                           	opt stack 26
  3922                           
  3923                           ;incstack = 0
  3924                           ;FMwrite@adr stored from wreg
  3925  001010  6E07               	movwf	FMwrite@adr,c
  3926                           
  3927                           ;main.c: 271: unsigned int regstr;
  3928                           ;main.c: 272: unsigned char firstByt;
  3929                           ;main.c: 273: unsigned char secndByt;
  3930                           ;main.c: 274: unsigned char rpy;
  3931                           ;main.c: 276: firstByt = regImg[adr] >> 8;
  3932  001012  5007               	movf	FMwrite@adr,w,c
  3933  001014  0D02               	mullw	2
  3934  001016  0E30               	movlw	low _regImg
  3935  001018  24F3               	addwf	prodl,w,c
  3936  00101A  6ED9               	movwf	fsr2l,c
  3937  00101C  0E00               	movlw	high _regImg
  3938  00101E  20F4               	addwfc	prodh,w,c
  3939  001020  6EDA               	movwf	fsr2h,c
  3940  001022  CFDE F003          	movff	postinc2,??_FMwrite
  3941  001026  CFDD F004          	movff	postdec2,??_FMwrite+1
  3942  00102A  C004  F003         	movff	??_FMwrite+1,??_FMwrite
  3943  00102E  6A04               	clrf	??_FMwrite+1,c
  3944  001030  5003               	movf	??_FMwrite,w,c
  3945  001032  6E05               	movwf	FMwrite@firstByt,c
  3946                           
  3947                           ;main.c: 277: secndByt = regImg[adr];
  3948  001034  5007               	movf	FMwrite@adr,w,c
  3949  001036  0D02               	mullw	2
  3950  001038  0E30               	movlw	low _regImg
  3951  00103A  24F3               	addwf	prodl,w,c
  3952  00103C  6ED9               	movwf	fsr2l,c
  3953  00103E  0E00               	movlw	high _regImg
  3954  001040  20F4               	addwfc	prodh,w,c
  3955  001042  6EDA               	movwf	fsr2h,c
  3956  001044  50DF               	movf	indf2,w,c
  3957  001046  6E06               	movwf	FMwrite@secndByt,c
  3958                           
  3959                           ;main.c: 279: SSPCON2bits.SEN=1;while(SSPCON2bits.SEN);
  3960  001048  80C5               	bsf	4037,0,c	;volatile
  3961  00104A                     l123:
  3962  00104A  B0C5               	btfsc	4037,0,c	;volatile
  3963  00104C  D7FE               	goto	l123
  3964                           
  3965                           ;main.c: 280: IdleI2C();
  3966  00104E  EC27  F00A         	call	_IdleI2C	;wreg free
  3967                           
  3968                           ;main.c: 283: if (WriteI2C(0x20)) return 1;
  3969  001052  0E20               	movlw	32
  3970  001054  EC1A  F009         	call	_WriteI2C
  3971  001058  0900               	iorlw	0
  3972  00105A  B4D8               	btfsc	status,2,c
  3973  00105C  D002               	goto	l1129
  3974  00105E  0E01               	movlw	1
  3975  001060  0012               	return	
  3976  001062                     l1129:
  3977                           
  3978                           ;main.c: 284: IdleI2C();
  3979  001062  EC27  F00A         	call	_IdleI2C	;wreg free
  3980                           
  3981                           ;main.c: 285: WriteI2C(adr);
  3982  001066  5007               	movf	FMwrite@adr,w,c
  3983  001068  EC1A  F009         	call	_WriteI2C
  3984                           
  3985                           ;main.c: 286: IdleI2C();
  3986  00106C  EC27  F00A         	call	_IdleI2C	;wreg free
  3987                           
  3988                           ;main.c: 287: WriteI2C(firstByt);
  3989  001070  5005               	movf	FMwrite@firstByt,w,c
  3990  001072  EC1A  F009         	call	_WriteI2C
  3991                           
  3992                           ;main.c: 288: IdleI2C();
  3993  001076  EC27  F00A         	call	_IdleI2C	;wreg free
  3994                           
  3995                           ;main.c: 289: WriteI2C(secndByt);
  3996  00107A  5006               	movf	FMwrite@secndByt,w,c
  3997  00107C  EC1A  F009         	call	_WriteI2C
  3998                           
  3999                           ;main.c: 290: IdleI2C();
  4000  001080  EC27  F00A         	call	_IdleI2C	;wreg free
  4001                           
  4002                           ;main.c: 291: SSPCON2bits.PEN=1;while(SSPCON2bits.PEN);
  4003  001084  84C5               	bsf	4037,2,c	;volatile
  4004  001086                     l128:
  4005  001086  B4C5               	btfsc	4037,2,c	;volatile
  4006  001088  D7FE               	goto	l128
  4007                           
  4008                           ;main.c: 292: IdleI2C();
  4009  00108A  EC27  F00A         	call	_IdleI2C	;wreg free
  4010                           
  4011                           ;main.c: 293: return 0;
  4012  00108E  0E00               	movlw	0
  4013  001090  0012               	return	
  4014  001092                     __end_of_FMwrite:
  4015                           	opt stack 0
  4016                           tblptru	equ	0xFF8
  4017                           tblptrh	equ	0xFF7
  4018                           tblptrl	equ	0xFF6
  4019                           tablat	equ	0xFF5
  4020                           prodh	equ	0xFF4
  4021                           prodl	equ	0xFF3
  4022                           intcon	equ	0xFF2
  4023                           postinc0	equ	0xFEE
  4024                           wreg	equ	0xFE8
  4025                           indf2	equ	0xFDF
  4026                           postinc2	equ	0xFDE
  4027                           postdec2	equ	0xFDD
  4028                           fsr2h	equ	0xFDA
  4029                           fsr2l	equ	0xFD9
  4030                           status	equ	0xFD8
  4031                           
  4032 ;; *************** function _FMready *****************
  4033 ;; Defined at:
  4034 ;;		line 363 in file "main.c"
  4035 ;; Parameters:    Size  Location     Type
  4036 ;;  rdy             2   11[COMRAM] PTR unsigned int 
  4037 ;;		 -> SeekChannel@dat(2), FMfrequenc@dat(2), FMinit@dat(2), 
  4038 ;; Auto vars:     Size  Location     Type
  4039 ;;  sts             2   15[COMRAM] unsigned int 
  4040 ;; Return value:  Size  Location     Type
  4041 ;;                  1    wreg      unsigned char 
  4042 ;; Registers used:
  4043 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4044 ;; Tracked objects:
  4045 ;;		On entry : 0/0
  4046 ;;		On exit  : 0/0
  4047 ;;		Unchanged: 0/0
  4048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4049 ;;      Params:         2       0       0       0
  4050 ;;      Locals:         2       0       0       0
  4051 ;;      Temps:          2       0       0       0
  4052 ;;      Totals:         6       0       0       0
  4053 ;;Total ram usage:        6 bytes
  4054 ;; Hardware stack levels used:    1
  4055 ;; Hardware stack levels required when called:    3
  4056 ;; This function calls:
  4057 ;;		_FMread
  4058 ;; This function is called by:
  4059 ;;		_FMinit
  4060 ;;		_FMfrequenc
  4061 ;;		_SeekChannel
  4062 ;; This function uses a non-reentrant model
  4063 ;;
  4064                           
  4065                           	psect	text20
  4066  0012E4                     __ptext20:
  4067                           	opt stack 0
  4068  0012E4                     _FMready:
  4069                           	opt stack 25
  4070                           
  4071                           ;main.c: 365: unsigned int sts;
  4072                           ;main.c: 367: if (FMread(0x13, &sts) != 0) return 1;
  4073                           
  4074                           ;incstack = 0
  4075  0012E4  0E10               	movlw	low FMready@sts
  4076  0012E6  6E03               	movwf	FMread@data,c
  4077  0012E8  0E00               	movlw	high FMready@sts
  4078  0012EA  6E04               	movwf	FMread@data+1,c
  4079  0012EC  0E13               	movlw	19
  4080  0012EE  EC42  F007         	call	_FMread
  4081  0012F2  0900               	iorlw	0
  4082  0012F4  B4D8               	btfsc	status,2,c
  4083  0012F6  D002               	goto	l1887
  4084  0012F8  0E01               	movlw	1
  4085  0012FA  0012               	return	
  4086  0012FC                     l1887:
  4087                           
  4088                           ;main.c: 368: sts &= 0x0020;
  4089  0012FC  0E20               	movlw	32
  4090  0012FE  1610               	andwf	FMready@sts,f,c
  4091  001300  0E00               	movlw	0
  4092  001302  1611               	andwf	FMready@sts+1,f,c
  4093                           
  4094                           ;main.c: 369: *rdy = sts ? 1 : 0;
  4095  001304  5010               	movf	FMready@sts,w,c
  4096  001306  1011               	iorwf	FMready@sts+1,w,c
  4097  001308  B4D8               	btfsc	status,2,c
  4098  00130A  D002               	goto	u1440
  4099  00130C  0E01               	movlw	1
  4100  00130E  D001               	goto	u1450
  4101  001310                     u1440:
  4102  001310  0E00               	movlw	0
  4103  001312                     u1450:
  4104  001312  6E0E               	movwf	??_FMready& (0+255),c
  4105  001314  6A0F               	clrf	(??_FMready+1)& (0+255),c
  4106  001316  C00C  FFD9         	movff	FMready@rdy,fsr2l
  4107  00131A  C00D  FFDA         	movff	FMready@rdy+1,fsr2h
  4108  00131E  C00E  FFDE         	movff	??_FMready,postinc2
  4109  001322  C00F  FFDD         	movff	??_FMready+1,postdec2
  4110                           
  4111                           ;main.c: 370: return 0;
  4112  001326  0E00               	movlw	0
  4113  001328  0012               	return	
  4114  00132A                     __end_of_FMready:
  4115                           	opt stack 0
  4116                           tblptru	equ	0xFF8
  4117                           tblptrh	equ	0xFF7
  4118                           tblptrl	equ	0xFF6
  4119                           tablat	equ	0xFF5
  4120                           prodh	equ	0xFF4
  4121                           prodl	equ	0xFF3
  4122                           intcon	equ	0xFF2
  4123                           postinc0	equ	0xFEE
  4124                           wreg	equ	0xFE8
  4125                           indf2	equ	0xFDF
  4126                           postinc2	equ	0xFDE
  4127                           postdec2	equ	0xFDD
  4128                           fsr2h	equ	0xFDA
  4129                           fsr2l	equ	0xFD9
  4130                           status	equ	0xFD8
  4131                           
  4132 ;; *************** function _FMread *****************
  4133 ;; Defined at:
  4134 ;;		line 313 in file "main.c"
  4135 ;; Parameters:    Size  Location     Type
  4136 ;;  regAddr         1    wreg     unsigned char 
  4137 ;;  data            2    2[COMRAM] PTR unsigned int 
  4138 ;;		 -> main@ui(2), SeekChannel@newchannel(2), FMready@sts(2), 
  4139 ;; Auto vars:     Size  Location     Type
  4140 ;;  regAddr         1    8[COMRAM] unsigned char 
  4141 ;;  secndByt        1   10[COMRAM] unsigned char 
  4142 ;;  firstByt        1    9[COMRAM] unsigned char 
  4143 ;; Return value:  Size  Location     Type
  4144 ;;                  1    wreg      unsigned char 
  4145 ;; Registers used:
  4146 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4147 ;; Tracked objects:
  4148 ;;		On entry : 0/0
  4149 ;;		On exit  : 0/0
  4150 ;;		Unchanged: 0/0
  4151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4152 ;;      Params:         2       0       0       0
  4153 ;;      Locals:         3       0       0       0
  4154 ;;      Temps:          4       0       0       0
  4155 ;;      Totals:         9       0       0       0
  4156 ;;Total ram usage:        9 bytes
  4157 ;; Hardware stack levels used:    1
  4158 ;; Hardware stack levels required when called:    2
  4159 ;; This function calls:
  4160 ;;		_IdleI2C
  4161 ;;		_ReadI2C
  4162 ;;		_WriteI2C
  4163 ;; This function is called by:
  4164 ;;		_FMready
  4165 ;;		_FMvers
  4166 ;;		_SeekChannel
  4167 ;;		_FMid
  4168 ;; This function uses a non-reentrant model
  4169 ;;
  4170                           
  4171                           	psect	text21
  4172  000E84                     __ptext21:
  4173                           	opt stack 0
  4174  000E84                     _FMread:
  4175                           	opt stack 25
  4176                           
  4177                           ;incstack = 0
  4178                           ;FMread@regAddr stored from wreg
  4179  000E84  6E09               	movwf	FMread@regAddr,c
  4180                           
  4181                           ;main.c: 315: unsigned char firstByt;
  4182                           ;main.c: 316: unsigned char secndByt;
  4183                           ;main.c: 318: SSPCON2bits.SEN=1;while(SSPCON2bits.SEN);
  4184  000E86  80C5               	bsf	4037,0,c	;volatile
  4185  000E88                     l133:
  4186  000E88  B0C5               	btfsc	4037,0,c	;volatile
  4187  000E8A  D7FE               	goto	l133
  4188                           
  4189                           ;main.c: 319: IdleI2C();
  4190  000E8C  EC27  F00A         	call	_IdleI2C	;wreg free
  4191                           
  4192                           ;main.c: 322: if (WriteI2C(0x20)) return 1;
  4193  000E90  0E20               	movlw	32
  4194  000E92  EC1A  F009         	call	_WriteI2C
  4195  000E96  0900               	iorlw	0
  4196  000E98  B4D8               	btfsc	status,2,c
  4197  000E9A  D002               	goto	l1825
  4198  000E9C  0E01               	movlw	1
  4199  000E9E  0012               	return	
  4200  000EA0                     l1825:
  4201                           
  4202                           ;main.c: 323: IdleI2C();
  4203  000EA0  EC27  F00A         	call	_IdleI2C	;wreg free
  4204                           
  4205                           ;main.c: 324: WriteI2C(regAddr);
  4206  000EA4  5009               	movf	FMread@regAddr,w,c
  4207  000EA6  EC1A  F009         	call	_WriteI2C
  4208                           
  4209                           ;main.c: 325: IdleI2C();
  4210  000EAA  EC27  F00A         	call	_IdleI2C	;wreg free
  4211                           
  4212                           ;main.c: 326: SSPCON2bits.RSEN=1;while(SSPCON2bits.RSEN);
  4213  000EAE  82C5               	bsf	4037,1,c	;volatile
  4214  000EB0                     l138:
  4215  000EB0  B2C5               	btfsc	4037,1,c	;volatile
  4216  000EB2  D7FE               	goto	l138
  4217                           
  4218                           ;main.c: 327: IdleI2C();
  4219  000EB4  EC27  F00A         	call	_IdleI2C	;wreg free
  4220                           
  4221                           ;main.c: 328: WriteI2C(0x20 + 0x01);
  4222  000EB8  0E21               	movlw	33
  4223  000EBA  EC1A  F009         	call	_WriteI2C
  4224                           
  4225                           ;main.c: 329: IdleI2C();
  4226  000EBE  EC27  F00A         	call	_IdleI2C	;wreg free
  4227                           
  4228                           ;main.c: 330: firstByt = ReadI2C();
  4229  000EC2  EC0E  F00A         	call	_ReadI2C	;wreg free
  4230  000EC6  6E0A               	movwf	FMread@firstByt,c
  4231                           
  4232                           ;main.c: 331: IdleI2C();
  4233  000EC8  EC27  F00A         	call	_IdleI2C	;wreg free
  4234                           
  4235                           ;main.c: 332: SSPCON2bits.ACKDT=0;SSPCON2bits.ACKEN=1;while(SSPCON2bits.ACKEN);
  4236  000ECC  9AC5               	bcf	4037,5,c	;volatile
  4237  000ECE  88C5               	bsf	4037,4,c	;volatile
  4238  000ED0                     l141:
  4239  000ED0  B8C5               	btfsc	4037,4,c	;volatile
  4240  000ED2  D7FE               	goto	l141
  4241                           
  4242                           ;main.c: 333: IdleI2C();
  4243  000ED4  EC27  F00A         	call	_IdleI2C	;wreg free
  4244                           
  4245                           ;main.c: 334: secndByt = ReadI2C();
  4246  000ED8  EC0E  F00A         	call	_ReadI2C	;wreg free
  4247  000EDC  6E0B               	movwf	FMread@secndByt,c
  4248                           
  4249                           ;main.c: 335: IdleI2C();
  4250  000EDE  EC27  F00A         	call	_IdleI2C	;wreg free
  4251                           
  4252                           ;main.c: 336: SSPCON2bits.ACKDT=1;SSPCON2bits.ACKEN=1;while(SSPCON2bits.ACKEN);
  4253  000EE2  8AC5               	bsf	4037,5,c	;volatile
  4254  000EE4  88C5               	bsf	4037,4,c	;volatile
  4255  000EE6                     l144:
  4256  000EE6  B8C5               	btfsc	4037,4,c	;volatile
  4257  000EE8  D7FE               	goto	l144
  4258                           
  4259                           ;main.c: 337: IdleI2C();
  4260  000EEA  EC27  F00A         	call	_IdleI2C	;wreg free
  4261                           
  4262                           ;main.c: 338: SSPCON2bits.PEN=1;while(SSPCON2bits.PEN);
  4263  000EEE  84C5               	bsf	4037,2,c	;volatile
  4264  000EF0                     l147:
  4265  000EF0  B4C5               	btfsc	4037,2,c	;volatile
  4266  000EF2  D7FE               	goto	l147
  4267                           
  4268                           ;main.c: 339: IdleI2C();
  4269  000EF4  EC27  F00A         	call	_IdleI2C	;wreg free
  4270                           
  4271                           ;main.c: 340: *data = firstByt;
  4272  000EF8  500A               	movf	FMread@firstByt,w,c
  4273  000EFA  6E05               	movwf	??_FMread& (0+255),c
  4274  000EFC  6A06               	clrf	(??_FMread+1)& (0+255),c
  4275  000EFE  C003  FFD9         	movff	FMread@data,fsr2l
  4276  000F02  C004  FFDA         	movff	FMread@data+1,fsr2h
  4277  000F06  C005  FFDE         	movff	??_FMread,postinc2
  4278  000F0A  C006  FFDD         	movff	??_FMread+1,postdec2
  4279                           
  4280                           ;main.c: 341: *data <<= 8;
  4281  000F0E  C003  FFD9         	movff	FMread@data,fsr2l
  4282  000F12  C004  FFDA         	movff	FMread@data+1,fsr2h
  4283  000F16  50DE               	movf	postinc2,w,c
  4284  000F18  6EDD               	movwf	postdec2,c
  4285  000F1A  6ADF               	clrf	indf2,c
  4286                           
  4287                           ;main.c: 342: *data = *data | secndByt;
  4288  000F1C  C003  FFD9         	movff	FMread@data,fsr2l
  4289  000F20  C004  FFDA         	movff	FMread@data+1,fsr2h
  4290  000F24  CFDE F005          	movff	postinc2,??_FMread
  4291  000F28  CFDD F006          	movff	postdec2,??_FMread+1
  4292  000F2C  500B               	movf	FMread@secndByt,w,c
  4293  000F2E  6E07               	movwf	(??_FMread+2)& (0+255),c
  4294  000F30  6A08               	clrf	(??_FMread+3)& (0+255),c
  4295  000F32  5005               	movf	??_FMread,w,c
  4296  000F34  1207               	iorwf	??_FMread+2,f,c
  4297  000F36  5006               	movf	??_FMread+1,w,c
  4298  000F38  1208               	iorwf	??_FMread+3,f,c
  4299  000F3A  C003  FFD9         	movff	FMread@data,fsr2l
  4300  000F3E  C004  FFDA         	movff	FMread@data+1,fsr2h
  4301  000F42  C007  FFDE         	movff	??_FMread+2,postinc2
  4302  000F46  C008  FFDD         	movff	??_FMread+3,postdec2
  4303                           
  4304                           ;main.c: 344: return 0;
  4305  000F4A  0E00               	movlw	0
  4306  000F4C  0012               	return	
  4307  000F4E                     __end_of_FMread:
  4308                           	opt stack 0
  4309                           tblptru	equ	0xFF8
  4310                           tblptrh	equ	0xFF7
  4311                           tblptrl	equ	0xFF6
  4312                           tablat	equ	0xFF5
  4313                           prodh	equ	0xFF4
  4314                           prodl	equ	0xFF3
  4315                           intcon	equ	0xFF2
  4316                           postinc0	equ	0xFEE
  4317                           wreg	equ	0xFE8
  4318                           indf2	equ	0xFDF
  4319                           postinc2	equ	0xFDE
  4320                           postdec2	equ	0xFDD
  4321                           fsr2h	equ	0xFDA
  4322                           fsr2l	equ	0xFD9
  4323                           status	equ	0xFD8
  4324                           
  4325 ;; *************** function _WriteI2C *****************
  4326 ;; Defined at:
  4327 ;;		line 12 in file "/Applications/microchip/xc8/v1.41/sources/pic18/plib/i2c/i2c_writ.c"
  4328 ;; Parameters:    Size  Location     Type
  4329 ;;  data_out        1    wreg     unsigned char 
  4330 ;; Auto vars:     Size  Location     Type
  4331 ;;  data_out        1    1[COMRAM] unsigned char 
  4332 ;; Return value:  Size  Location     Type
  4333 ;;                  1    wreg      char 
  4334 ;; Registers used:
  4335 ;;		wreg, status,2, status,0, cstack
  4336 ;; Tracked objects:
  4337 ;;		On entry : 0/0
  4338 ;;		On exit  : 0/0
  4339 ;;		Unchanged: 0/0
  4340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4341 ;;      Params:         0       0       0       0
  4342 ;;      Locals:         1       0       0       0
  4343 ;;      Temps:          0       0       0       0
  4344 ;;      Totals:         1       0       0       0
  4345 ;;Total ram usage:        1 bytes
  4346 ;; Hardware stack levels used:    1
  4347 ;; Hardware stack levels required when called:    1
  4348 ;; This function calls:
  4349 ;;		_IdleI2C
  4350 ;; This function is called by:
  4351 ;;		_FMwrite
  4352 ;;		_FMread
  4353 ;; This function uses a non-reentrant model
  4354 ;;
  4355                           
  4356                           	psect	text22
  4357  001234                     __ptext22:
  4358                           	opt stack 0
  4359  001234                     _WriteI2C:
  4360                           	opt stack 26
  4361                           
  4362                           ;incstack = 0
  4363                           ;WriteI2C@data_out stored from wreg
  4364  001234  6E02               	movwf	WriteI2C@data_out,c
  4365  001236  C002  FFC9         	movff	WriteI2C@data_out,4041	;volatile
  4366  00123A  AEC6               	btfss	4038,7,c	;volatile
  4367  00123C  D002               	goto	l995
  4368  00123E  0EFF               	movlw	255
  4369  001240  0012               	return	
  4370  001242                     l995:
  4371  001242  50C6               	movf	4038,w,c	;volatile
  4372  001244  0B0F               	andlw	15
  4373  001246  0A08               	xorlw	8
  4374  001248  B4D8               	btfsc	status,2,c
  4375  00124A  D00F               	goto	l1013
  4376  00124C  50C6               	movf	4038,w,c	;volatile
  4377  00124E  0B0F               	andlw	15
  4378  001250  0A0B               	xorlw	11
  4379  001252  B4D8               	btfsc	status,2,c
  4380  001254  D00A               	goto	l1013
  4381  001256  88C6               	bsf	4038,4,c	;volatile
  4382  001258                     l352:
  4383  001258  A69E               	btfss	3998,3,c	;volatile
  4384  00125A  D7FE               	goto	l352
  4385  00125C  A4C7               	btfss	4039,2,c	;volatile
  4386  00125E  B0C7               	btfsc	4039,0,c	;volatile
  4387  001260  D002               	goto	l1009
  4388  001262  0EFE               	movlw	254
  4389  001264  0012               	return	
  4390  001266                     l1009:
  4391  001266  0E00               	movlw	0
  4392  001268  0012               	return	
  4393  00126A                     l1013:
  4394  00126A  50C6               	movf	4038,w,c	;volatile
  4395  00126C  0B0F               	andlw	15
  4396  00126E  0A08               	xorlw	8
  4397  001270  B4D8               	btfsc	status,2,c
  4398  001272  D005               	goto	l361
  4399  001274  50C6               	movf	4038,w,c	;volatile
  4400  001276  0B0F               	andlw	15
  4401  001278  0A0B               	xorlw	11
  4402  00127A  A4D8               	btfss	status,2,c
  4403  00127C  0012               	return	
  4404  00127E                     l361:
  4405  00127E  B0C7               	btfsc	4039,0,c	;volatile
  4406  001280  D7FE               	goto	l361
  4407  001282  EC27  F00A         	call	_IdleI2C	;wreg free
  4408  001286  ACC5               	btfss	4037,6,c	;volatile
  4409  001288  D002               	goto	l1027
  4410  00128A  0EFE               	movlw	254
  4411  00128C  0012               	return	
  4412  00128E                     l1027:
  4413  00128E  0E00               	movlw	0
  4414  001290  0012               	return	
  4415  001292                     __end_of_WriteI2C:
  4416                           	opt stack 0
  4417                           tblptru	equ	0xFF8
  4418                           tblptrh	equ	0xFF7
  4419                           tblptrl	equ	0xFF6
  4420                           tablat	equ	0xFF5
  4421                           prodh	equ	0xFF4
  4422                           prodl	equ	0xFF3
  4423                           intcon	equ	0xFF2
  4424                           postinc0	equ	0xFEE
  4425                           wreg	equ	0xFE8
  4426                           indf2	equ	0xFDF
  4427                           postinc2	equ	0xFDE
  4428                           postdec2	equ	0xFDD
  4429                           fsr2h	equ	0xFDA
  4430                           fsr2l	equ	0xFD9
  4431                           status	equ	0xFD8
  4432                           
  4433 ;; *************** function _IdleI2C *****************
  4434 ;; Defined at:
  4435 ;;		line 24 in file "/Applications/microchip/xc8/v1.41/sources/pic18/plib/i2c/i2c_idle.c"
  4436 ;; Parameters:    Size  Location     Type
  4437 ;;		None
  4438 ;; Auto vars:     Size  Location     Type
  4439 ;;		None
  4440 ;; Return value:  Size  Location     Type
  4441 ;;                  1    wreg      void 
  4442 ;; Registers used:
  4443 ;;		wreg, status,2, status,0
  4444 ;; Tracked objects:
  4445 ;;		On entry : 0/0
  4446 ;;		On exit  : 0/0
  4447 ;;		Unchanged: 0/0
  4448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4449 ;;      Params:         0       0       0       0
  4450 ;;      Locals:         0       0       0       0
  4451 ;;      Temps:          1       0       0       0
  4452 ;;      Totals:         1       0       0       0
  4453 ;;Total ram usage:        1 bytes
  4454 ;; Hardware stack levels used:    1
  4455 ;; This function calls:
  4456 ;;		Nothing
  4457 ;; This function is called by:
  4458 ;;		_FMwrite
  4459 ;;		_FMread
  4460 ;;		_WriteI2C
  4461 ;; This function uses a non-reentrant model
  4462 ;;
  4463                           
  4464                           	psect	text23
  4465  00144E                     __ptext23:
  4466                           	opt stack 0
  4467  00144E                     _IdleI2C:
  4468                           	opt stack 26
  4469  00144E                     l981:
  4470  00144E  CFC5 F001          	movff	4037,??_IdleI2C	;volatile
  4471  001452  0E1F               	movlw	31
  4472  001454  1601               	andwf	??_IdleI2C,f,c
  4473  001456  A4D8               	btfss	status,2,c
  4474  001458  D7FA               	goto	l981
  4475  00145A  A4C7               	btfss	4039,2,c	;volatile
  4476  00145C  0012               	return	
  4477  00145E  D7F7               	goto	l981
  4478  001460                     __end_of_IdleI2C:
  4479                           	opt stack 0
  4480                           tblptru	equ	0xFF8
  4481                           tblptrh	equ	0xFF7
  4482                           tblptrl	equ	0xFF6
  4483                           tablat	equ	0xFF5
  4484                           prodh	equ	0xFF4
  4485                           prodl	equ	0xFF3
  4486                           intcon	equ	0xFF2
  4487                           postinc0	equ	0xFEE
  4488                           wreg	equ	0xFE8
  4489                           indf2	equ	0xFDF
  4490                           postinc2	equ	0xFDE
  4491                           postdec2	equ	0xFDD
  4492                           fsr2h	equ	0xFDA
  4493                           fsr2l	equ	0xFD9
  4494                           status	equ	0xFD8
  4495                           
  4496 ;; *************** function _ReadI2C *****************
  4497 ;; Defined at:
  4498 ;;		line 11 in file "/Applications/microchip/xc8/v1.41/sources/pic18/plib/i2c/i2c_read.c"
  4499 ;; Parameters:    Size  Location     Type
  4500 ;;		None
  4501 ;; Auto vars:     Size  Location     Type
  4502 ;;		None
  4503 ;; Return value:  Size  Location     Type
  4504 ;;                  1    wreg      unsigned char 
  4505 ;; Registers used:
  4506 ;;		wreg, status,2, status,0
  4507 ;; Tracked objects:
  4508 ;;		On entry : 0/0
  4509 ;;		On exit  : 0/0
  4510 ;;		Unchanged: 0/0
  4511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4512 ;;      Params:         0       0       0       0
  4513 ;;      Locals:         0       0       0       0
  4514 ;;      Temps:          0       0       0       0
  4515 ;;      Totals:         0       0       0       0
  4516 ;;Total ram usage:        0 bytes
  4517 ;; Hardware stack levels used:    1
  4518 ;; This function calls:
  4519 ;;		Nothing
  4520 ;; This function is called by:
  4521 ;;		_FMread
  4522 ;; This function uses a non-reentrant model
  4523 ;;
  4524                           
  4525                           	psect	text24
  4526  00141C                     __ptext24:
  4527                           	opt stack 0
  4528  00141C                     _ReadI2C:
  4529                           	opt stack 26
  4530                           
  4531                           ;incstack = 0
  4532  00141C  50C6               	movf	4038,w,c	;volatile
  4533  00141E  0B0F               	andlw	15
  4534  001420  0A08               	xorlw	8
  4535  001422  B4D8               	btfsc	status,2,c
  4536  001424  D004               	goto	l327
  4537  001426  50C6               	movf	4038,w,c	;volatile
  4538  001428  0B0F               	andlw	15
  4539  00142A  0A0B               	xorlw	11
  4540  00142C  B4D8               	btfsc	status,2,c
  4541  00142E                     l327:
  4542  00142E  86C5               	bsf	4037,3,c	;volatile
  4543  001430                     l328:
  4544  001430  A0C7               	btfss	4039,0,c	;volatile
  4545  001432  D7FE               	goto	l328
  4546  001434  50C9               	movf	4041,w,c	;volatile
  4547  001436  0012               	return	
  4548  001438                     __end_of_ReadI2C:
  4549                           	opt stack 0
  4550                           tblptru	equ	0xFF8
  4551                           tblptrh	equ	0xFF7
  4552                           tblptrl	equ	0xFF6
  4553                           tablat	equ	0xFF5
  4554                           prodh	equ	0xFF4
  4555                           prodl	equ	0xFF3
  4556                           intcon	equ	0xFF2
  4557                           postinc0	equ	0xFEE
  4558                           wreg	equ	0xFE8
  4559                           indf2	equ	0xFDF
  4560                           postinc2	equ	0xFDE
  4561                           postdec2	equ	0xFDD
  4562                           fsr2h	equ	0xFDA
  4563                           fsr2l	equ	0xFD9
  4564                           status	equ	0xFD8
  4565                           tblptru	equ	0xFF8
  4566                           tblptrh	equ	0xFF7
  4567                           tblptrl	equ	0xFF6
  4568                           tablat	equ	0xFF5
  4569                           prodh	equ	0xFF4
  4570                           prodl	equ	0xFF3
  4571                           intcon	equ	0xFF2
  4572                           postinc0	equ	0xFEE
  4573                           wreg	equ	0xFE8
  4574                           indf2	equ	0xFDF
  4575                           postinc2	equ	0xFDE
  4576                           postdec2	equ	0xFDD
  4577                           fsr2h	equ	0xFDA
  4578                           fsr2l	equ	0xFD9
  4579                           status	equ	0xFD8
  4580                           
  4581                           	psect	rparam
  4582  0000                     tblptru	equ	0xFF8
  4583                           tblptrh	equ	0xFF7
  4584                           tblptrl	equ	0xFF6
  4585                           tablat	equ	0xFF5
  4586                           prodh	equ	0xFF4
  4587                           prodl	equ	0xFF3
  4588                           intcon	equ	0xFF2
  4589                           postinc0	equ	0xFEE
  4590                           wreg	equ	0xFE8
  4591                           indf2	equ	0xFDF
  4592                           postinc2	equ	0xFDE
  4593                           postdec2	equ	0xFDD
  4594                           fsr2h	equ	0xFDA
  4595                           fsr2l	equ	0xFD9
  4596                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    130
    Data        0
    BSS         36
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     47      83
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    FMvers@vsn	PTR unsigned int  size(2) Largest target is 2
		 -> main@ui(COMRAM[2]), 

    FMready@rdy	PTR unsigned int  size(2) Largest target is 2
		 -> SeekChannel@dat(COMRAM[2]), FMfrequenc@dat(COMRAM[2]), FMinit@dat(COMRAM[2]), 

    FMread@data	PTR unsigned int  size(2) Largest target is 2
		 -> main@ui(COMRAM[2]), SeekChannel@newchannel(COMRAM[2]), FMready@sts(COMRAM[2]), 

    segWrt@LCReg	PTR unsigned char  size(2) Largest target is 1
		 -> LCDDATA0(SFR_1[1]), 

    clrscn@CLEARptr	PTR unsigned char  size(2) Largest target is 1
		 -> LCDDATA0(SFR_1[1]), 


Critical Paths under _main in COMRAM

    _main->_SeekChannel
    _presetFrequency->_FMfrequenc
    _presetFrequency->_showFreq
    _Vol_change->_showVol
    _showVol->___lwmod
    _errfm->_dly
    _SeekChannel->_FMfrequenc
    _SeekChannel->_showFreq
    _ManualChan->_FMfrequenc
    _ManualChan->_showFreq
    _showFreq->___lwmod
    ___lwmod->___lwdiv
    _FMfrequenc->_FMready
    _Init->_OpenI2C
    _FMvers->_FMread
    _FMinit->_FMready
    _FMwrite->_WriteI2C
    _FMready->_FMread
    _FMread->_WriteI2C
    _WriteI2C->_IdleI2C

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                11    11      0   32149
                                             38 COMRAM     9     9      0
                         _FMfrequenc
                             _FMinit
                             _FMvers
                               _Init
                         _ManualChan
                        _SeekChannel
                         _Vol_change
                          _butnEvent
                                _dly
                              _errfm
                    _presetFrequency
                           _showFreq
 ---------------------------------------------------------------------------------
 (1) _presetFrequency                                      8     4      4    5930
                                             27 COMRAM     8     4      4
                         _FMfrequenc
                           _showFreq
 ---------------------------------------------------------------------------------
 (1) _butnEvent                                            2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Vol_change                                           7     4      3    4000
                                             25 COMRAM     7     4      3
                            _FMwrite
                              _errfm
                            _showVol
 ---------------------------------------------------------------------------------
 (2) _showVol                                             13    11      2    2870
                                             12 COMRAM    13    11      2
                            ___lwdiv
                            ___lwmod
                             _clrscn
                             _segWrt
 ---------------------------------------------------------------------------------
 (1) _errfm                                                2     2      0     560
                                _dly
 ---------------------------------------------------------------------------------
 (1) _SeekChannel                                         11     7      4    7554
                                             27 COMRAM    11     7      4
                         _FMfrequenc
                             _FMread
                            _FMready
                            _FMwrite
                                _dly
                           _showFreq
 ---------------------------------------------------------------------------------
 (1) _ManualChan                                           3     0      3    5730
                                             27 COMRAM     3     0      3
                         _FMfrequenc
                           _showFreq
 ---------------------------------------------------------------------------------
 (1) _showFreq                                            15    13      2    3456
                                             12 COMRAM    15    13      2
                            ___lwdiv
                            ___lwmod
                             _clrscn
                             _segWrt
 ---------------------------------------------------------------------------------
 (2) _segWrt                                               7     6      1     946
                                              0 COMRAM     7     6      1
 ---------------------------------------------------------------------------------
 (2) _clrscn                                               4     4      0      45
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     799
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     546
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _FMfrequenc                                          10     8      2    1818
                                             17 COMRAM    10     8      2
                            _FMready
                            _FMwrite
                                _dly
 ---------------------------------------------------------------------------------
 (1) _Init                                                 2     2      0     108
                            _OpenI2C
 ---------------------------------------------------------------------------------
 (2) _OpenI2C                                              2     1      1     108
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _FMvers                                               2     0      2     513
                                             11 COMRAM     2     0      2
                             _FMread
 ---------------------------------------------------------------------------------
 (1) _FMinit                                               3     3      0    1570
                                             17 COMRAM     3     3      0
                            _FMready
                            _FMwrite
                                _dly
 ---------------------------------------------------------------------------------
 (3) _dly                                                  4     2      2     560
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) _FMwrite                                              8     8      0      90
                                              2 COMRAM     5     5      0
                            _IdleI2C
                           _WriteI2C
 ---------------------------------------------------------------------------------
 (3) _FMready                                              6     4      2     693
                                             11 COMRAM     6     4      2
                             _FMread
 ---------------------------------------------------------------------------------
 (4) _FMread                                               9     7      2     427
                                              2 COMRAM     9     7      2
                            _IdleI2C
                            _ReadI2C
                           _WriteI2C
 ---------------------------------------------------------------------------------
 (4) _WriteI2C                                             1     1      0      15
                                              1 COMRAM     1     1      0
                            _IdleI2C
 ---------------------------------------------------------------------------------
 (5) _IdleI2C                                              1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _ReadI2C                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _FMfrequenc
     _FMready
       _FMread
         _IdleI2C
         _ReadI2C
         _WriteI2C
           _IdleI2C
     _FMwrite
       _IdleI2C
       _WriteI2C
         _IdleI2C
     _dly
   _FMinit
     _FMready
       _FMread
         _IdleI2C
         _ReadI2C
         _WriteI2C
           _IdleI2C
     _FMwrite
       _IdleI2C
       _WriteI2C
         _IdleI2C
     _dly
   _FMvers
     _FMread
       _IdleI2C
       _ReadI2C
       _WriteI2C
         _IdleI2C
   _Init
     _OpenI2C
   _ManualChan
     _FMfrequenc
       _FMready
         _FMread
           _IdleI2C
           _ReadI2C
           _WriteI2C
             _IdleI2C
       _FMwrite
         _IdleI2C
         _WriteI2C
           _IdleI2C
       _dly
     _showFreq
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _clrscn
       _segWrt
   _SeekChannel
     _FMfrequenc
       _FMready
         _FMread
           _IdleI2C
           _ReadI2C
           _WriteI2C
             _IdleI2C
       _FMwrite
         _IdleI2C
         _WriteI2C
           _IdleI2C
       _dly
     _FMread
       _IdleI2C
       _ReadI2C
       _WriteI2C
         _IdleI2C
     _FMready
       _FMread
         _IdleI2C
         _ReadI2C
         _WriteI2C
           _IdleI2C
     _FMwrite
       _IdleI2C
       _WriteI2C
         _IdleI2C
     _dly
     _showFreq
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _clrscn
       _segWrt
   _Vol_change
     _FMwrite
       _IdleI2C
       _WriteI2C
         _IdleI2C
     _errfm
       _dly
     _showVol
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _clrscn
       _segWrt
   _butnEvent
   _dly
   _errfm
     _dly
   _presetFrequency
     _FMfrequenc
       _FMready
         _FMread
           _IdleI2C
           _ReadI2C
           _WriteI2C
             _IdleI2C
       _FMwrite
         _IdleI2C
         _WriteI2C
           _IdleI2C
       _dly
     _showFreq
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _clrscn
       _segWrt
   _showFreq
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _clrscn
     _segWrt

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
BITBANK2           100      0       0       6        0.0%
BANK2              100      0       0       7        0.0%
BITBANK1           100      0       0       9        0.0%
BANK1              100      0       0       5        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      0       0       4        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     2F      53       1       87.4%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      53       8        0.0%
DATA                 0      0      53      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Sat Apr  1 21:28:39 2017

             __CFG_CP$OFF 000000               _SSPSTATbits 000FC7                        l81 0D84  
                      l90 0E14                        l92 0E38                        l84 0DA8  
                      l94 0E5C                        l86 0DCC                        l88 0DF0  
             __CFG_BORV$3 000000                       l111 13AA                       l123 104A  
                     l141 0ED0                       l133 0E88                       l144 0EE6  
                     l128 1086                       l240 08F6                       l209 13DE  
                     l138 0EB0                       l147 0EF0                       l157 0F8A  
                     l229 0588                       l327 142E                       l328 1430  
                     l352 1258                       l361 127E                       l259 0D5E  
                     l197 0C0A                       l269 074E                       l768 12DA  
                     l778 1362                       l981 144E                       l995 1242  
__size_of_presetFrequency 01A8                       _dly 13AC                       prod 000FF3  
                     wreg 000FE8              __CFG_WDT$OFF 000000                      l1013 126A  
                    l1009 1266                      l2001 04BE                      l1027 128E  
                    l2003 04C8                      l2013 04E6                      l2023 0524  
                    l2007 04CE                      l1129 1062                      l2033 0568  
                    l2025 052C                      l2017 0512                      l2009 04D6  
                    l2201 0ADC                      l2035 0574                      l2019 051E  
                    l2125 0F52                      l2029 053C                      l2143 0FA4  
                    l1095 1384                      l2039 057A                      l2145 0FA8  
                    l2129 0F5A                      l2209 0AF4                      l2073 0CC0  
                    l2321 0824                      l2305 0776                      l2171 0FF8  
                    l2155 0FC0                      l1099 1394                      l2251 0B92  
                    l2235 0B54                      l2227 0B2C                      l2219 0B14  
                    l2083 0CFA                      l2067 0CA8                      l1427 0E80  
                    l2331 086C                      l2323 082C                      l2149 0FB0  
                    l2245 0B74                      l2093 0D3E                      l2085 0D02  
                    l2077 0CEA                      l2069 0CB0                      l2405 0720  
                    l2413 073E                      l2317 0816                      l2309 07B2  
                    l2167 0FDE                      l2159 0FC4                      l2095 0D4A  
                    l2079 0CF4                      l2407 072E                      l2169 0FEC  
                    l2193 0AC4                      l2089 0D12                      l2409 0738  
                    l2353 058C                      l2345 08D8                      l2441 0974  
                    l2283 1134                      l2259 0BAA                      l2099 0D50  
                    l2371 0636                      l2339 08D0                      l2443 098A  
                    l1901 12A8                      l2293 1164                      l2381 0662  
                    l2461 0A38                      l2445 09A8                      l1903 12B0  
                    l2463 0A4E                      l2455 0A06                      l2447 09BA  
                    l2439 096C                      l1825 0EA0                      l1913 12D0  
                    l1905 12B4                      l1921 1338                      l2377 064C  
                    l2449 09D4                      l1923 1340                      l2379 065A  
                    l2299 075A                      l2467 0A6C                      l1861 13C0  
                    l1925 1344                      l1863 13C6                      l2399 070A  
                    l1929 1358                      l1873 1178                      ?_dly 0001  
                    l1859 13B6                      l1867 13D4                      l1887 12FC  
                    l1879 11BE                      l1991 047C                      l1993 0484  
                    l1985 0460                      l1997 0494                      u2005 0BB6  
                    u1414 11A2                      u2070 0774                      u1415 119E  
                    u2215 06A0                      u1440 1310                      u2225 06E2  
                    u1450 1312                      u2250 0944                      u2307 0DDA  
                    u2165 05CC                      u2317 0DFE                      u1710 0CA6  
                    u2175 060E                      u2327 0E22                      u2337 0E46  
                    u1634 04FC                      u1570 047A                      u1635 04F6  
                    u2347 0E6A                      u2277 0D6E                      u1734 0CD6  
                    u1735 0CD0                      u2287 0D92                      u2297 0DB6  
             main@counter 0027                      u1674 0552                      u1594 04AA  
                    u1675 054C                      u1595 04A4                      u1774 0D28  
                    u1775 0D22                      u1895 0AA2                      _Init 11D2  
         __end_of_FMready 132A                      _main 0900                      dly@d 0001  
                    dly@i 0003                      fsr2h 000FDA                      indf2 000FDF  
                    fsr2l 000FD9           __end_of_FMwrite 1092                      prodh 000FF4  
                    prodl 000FF3                      start 0000             __CFG_IESO$OFF 000000  
         __end_of_IdleI2C 1460             __CFG_MCLRE$ON 000000              ___param_bank 000000  
         __end_of_ReadI2C 1438           __end_of_OpenI2C 141C                     ??_dly 0003  
                   ?_Init 0001                     ?_main 0001                     _T0CON 000FD5  
                   _LCDPS 000F58           __end_of___lwdiv 12E4           __end_of___lwmod 136C  
                   _TMR0H 000FD7                     _TMR0L 000FD6                     _PORTA 000F80  
                   _PORTB 000F81                     _PORTC 000F82                     _TRISA 000F92  
        showFreq@hundreds 0016                     _TRISB 000F93                     _TRISC 000F94  
                   _TRISG 000F98             __CFG_PWRT$OFF 000000            __CFG_FCMEN$OFF 000000  
         __end_of_regDflt 0371                     _errfm 13DE             ??_SeekChannel 0020  
             ?_FMfrequenc 0012            __CFG_BOREN$OFF 000000                     tablat 000FF5  
         __end_of_showVol 0D60                     status 000FD8                _ManualChan 1104  
           Vol_change@dir 001C             Vol_change@vol 001A           __initialization 1438  
            __end_of_Init 1234              __end_of_main 0AA0                    ??_Init 0003  
       __end_of_LCDDigits 037B                    ??_main 0027             __activetblptr 000002  
        __end_of_Vol_data 034D                    _ADCON1 000FC1                 ??_FMready 000E  
                  ?_errfm 0001         ??_presetFrequency 0020          __end_of_WriteI2C 1292  
               ??_FMwrite 0003                    _LCDCON 000F59                    _LCDSE0 000F5A  
                  _LCDSE1 000F5B                    _LCDSE2 000F5C                    _LCDSE3 000F5D  
             OpenI2C@slew 0001                 ??_IdleI2C 0001                    _OSCCON 000FD3  
           main@frequency 002E                    _FMinit 0F4E                    _FMread 0E84  
                  _SSPADD 000FC8                    _SSPBUF 000FC9                    _FMvers 1460  
               ??_ReadI2C 0001       __end_of_SeekChannel 0C14                 ??_OpenI2C 0002  
          __CFG_XINST$OFF 000000                 ??___lwdiv 0005                 ??___lwmod 000C  
                  _clrscn 136C       __size_of_FMfrequenc 0072                    _regImg 0030  
                  clear_0 143E                    _segWrt 116E                    main@ui 002C  
        __end_of_showFreq 058A            clrscn@CLEARptr 0001              __mediumconst 0000  
                  tblptrh 000FF7                    tblptrl 000FF6                    tblptru 000FF8  
               ??_showVol 000F                _Vol_change 058A                __accesstop 0060  
 __end_of__initialization 1444    presetFrequency@channel 001C             ___rparam_used 000001  
             ?_ManualChan 001C    presetFrequency@counter 0022            __pcstackCOMRAM 0001  
           __end_of_errfm 13FE               segWrt@LCReg 0004           __CFG_OSC$INTIO7 000000  
             segWrt@state 0001                   ??_errfm 0005               _SeekChannel 0AA0  
       ManualChan@channel 001C        __size_of_butnEvent 0124                   ?_FMinit 0001  
                 ?_FMread 0003                   ?_FMvers 000C        presetFrequency@dir 001E  
           ManualChan@dir 001E                   ?_clrscn 0001                   ?_segWrt 0001  
               ?_WriteI2C 0001                 FMinit@dat 0012       __size_of_ManualChan 006A  
                 _FMready 12E4                   _SSPCON1 000FC6                   _SSPCON2 000FC5  
            ??_FMfrequenc 0014               ?_Vol_change 001A                   _SSPSTAT 000FC7  
                 _FMwrite 1010                   _IdleI2C 144E           __size_of_FMinit 00C2  
         __size_of_FMread 00CA                 FMvers@vsn 000C                   _ReadI2C 141C  
         __size_of_FMvers 0010                   _OpenI2C 13FE                   __Hparam 0000  
                 __Lparam 0000                 ?_showFreq 000D                   ___lwdiv 1292  
                 ___lwmod 132A              __psmallconst 0300           __size_of_clrscn 0040  
         __CFG_STVREN$OFF 000000                   __pcinit 1438                ??_WriteI2C 0002  
       __end_of_butnEvent 0E84        __end_of_FMfrequenc 1104                   __ramtop 0300  
         __size_of_segWrt 0064           _presetFrequency 0758                   __ptext0 0900  
                 __ptext1 0758                   __ptext2 0D60                   __ptext3 058A  
                 __ptext4 0C14                   __ptext5 13DE                   __ptext6 0AA0  
                 __ptext7 1104                   __ptext8 0384                   __ptext9 116E  
               _T0CONbits 000FD5                   _regDflt 034D              __size_of_dly 0032  
               _LCDDigits 0371                   _showVol 0C14                   clrscn@i 0003  
                 main@evt 0029                   main@vol 002A      end_of_initialization 1444  
           __Lmediumconst 0000               FMfrequenc@f 0012                ??_showFreq 000F  
                 postdec2 000FDD                   postinc0 000FEE                   postinc2 000FDE  
     __size_of_Vol_change 01CE                _presetFreq 037B                 _PORTAbits 000F80  
               _PORTBbits 000F81                 _PORTGbits 000F86            SeekChannel@dat 0023  
          SeekChannel@dir 001E               showVol@ones 0012                 _TRISCbits 000F94  
             showVol@tens 0014            __end_of_FMinit 1010            __end_of_FMread 0F4E  
          __end_of_FMvers 1470              ??_ManualChan 001F   __end_of_presetFrequency 0900  
          __end_of_clrscn 13AC            __end_of_segWrt 11D2       start_initialization 1438  
             __end_of_dly 13DE        __end_of_ManualChan 116E          WriteI2C@data_out 0002  
            ?_SeekChannel 001C                  ??_FMinit 0012                  ??_FMread 0005  
                ??_FMvers 000E              segWrt@segOrd 0007                  ??_clrscn 0001  
                ??_segWrt 0002         __size_of_WriteI2C 005E               __pbssCOMRAM 0030  
                ?_FMready 000C              ??_Vol_change 001D                  ?_FMwrite 0001  
                ?_IdleI2C 0001     SeekChannel@newchannel 0025                  ?_ReadI2C 0001  
                ?_OpenI2C 0001          ___lwdiv@dividend 0001          ?_presetFrequency 001C  
                ?___lwdiv 0001                  ?___lwmod 0008         __size_of_showFreq 0206  
                FMinit@ad 0014        __end_of_Vol_change 0758               __smallconst 0300  
               _butnEvent 0D60           FMwrite@firstByt 0005                  ?_showVol 000D  
        ___lwdiv@quotient 0005                  _LCDDATA0 000F60                  _LCDDATA1 000F61  
                _LCDDATA2 000F62           FMwrite@secndByt 0006            __size_of_errfm 0020  
         segWrt@bitSelect 0006            FMread@firstByt 000A                FMread@data 0003  
                _PIR1bits 000F9E            FMread@secndByt 000B                FMready@rdy 000C  
              FMready@sts 0010                showVol@vol 000D                ?_butnEvent 0001  
        __size_of_FMready 0046          __size_of_FMwrite 0082          OpenI2C@sync_mode 0002  
    __size_of_SeekChannel 0174          __size_of_IdleI2C 0012          __size_of_ReadI2C 001C  
                __Hrparam 0000          __size_of_OpenI2C 001E                  __Lrparam 0000  
              FMwrite@adr 0007                  _Vol_data 0301          __size_of___lwdiv 0052  
        __size_of___lwmod 0042                  _WriteI2C 1234           ___lwdiv@divisor 0003  
         ___lwdiv@counter 0007                  __ptext10 136C                  __ptext11 132A  
                __ptext20 12E4                  __ptext12 1292                  __ptext21 0E84  
                __ptext13 1092                  __ptext22 1234                  __ptext14 11D2  
                __ptext23 144E                  __ptext15 13FE                  __ptext24 141C  
                __ptext16 1460                  __ptext17 0F4E                  __ptext18 13AC  
                __ptext19 1010          __size_of_showVol 014C             __size_of_Init 0062  
           __size_of_main 01A0             FMread@regAddr 0009                 showFreq@f 000D  
               showFreq@i 0018                 showFreq@j 001A                  _showFreq 0384  
           FMfrequenc@dat 001A               ??_butnEvent 0001                _INTCONbits 000FF2  
        ___lwmod@dividend 0008        __end_of_presetFreq 0383              FMfrequenc@cn 0018  
                showVol@i 0016                  showVol@j 0018        SeekChannel@channel 001C  
            showFreq@ones 0012              showFreq@tens 0014           ___lwmod@divisor 000A  
         ___lwmod@counter 000C               _SSPCON1bits 000FC6               _SSPCON2bits 000FC5  
              _FMfrequenc 1092  
